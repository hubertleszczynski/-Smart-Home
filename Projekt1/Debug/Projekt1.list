
Projekt1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08006bb8  08006bb8  00016bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec0  08006ec0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08006ec0  08006ec0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ec0  08006ec0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ec4  08006ec4  00016ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200001e0  080070a8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  080070a8  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e796  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fdd  00000000  00000000  0002e9a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d98  00000000  00000000  00030988  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc0  00000000  00000000  00031720  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e3e2  00000000  00000000  000323e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c0f6  00000000  00000000  000507c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b793b  00000000  00000000  0005c8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001141f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004244  00000000  00000000  00114270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ba0 	.word	0x08006ba0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006ba0 	.word	0x08006ba0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <DWT_Delay_Init+0x58>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <DWT_Delay_Init+0x58>)
 8000bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bb6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <DWT_Delay_Init+0x58>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4a10      	ldr	r2, [pc, #64]	; (8000c00 <DWT_Delay_Init+0x58>)
 8000bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bc2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <DWT_Delay_Init+0x5c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <DWT_Delay_Init+0x5c>)
 8000bca:	f023 0301 	bic.w	r3, r3, #1
 8000bce:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <DWT_Delay_Init+0x5c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <DWT_Delay_Init+0x5c>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <DWT_Delay_Init+0x5c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000be2:	bf00      	nop
     __ASM volatile ("NOP");
 8000be4:	bf00      	nop
  __ASM volatile ("NOP");
 8000be6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <DWT_Delay_Init+0x5c>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e000      	b.n	8000bf6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000bf4:	2301      	movs	r3, #1
  }
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000edf0 	.word	0xe000edf0
 8000c04:	e0001000 	.word	0xe0001000

08000c08 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <delay+0x3c>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000c16:	f002 fa2f 	bl	8003078 <HAL_RCC_GetHCLKFreq>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <delay+0x40>)
 8000c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8000c22:	0c9b      	lsrs	r3, r3, #18
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	fb02 f303 	mul.w	r3, r2, r3
 8000c2a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000c2c:	bf00      	nop
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <delay+0x3c>)
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	1ad2      	subs	r2, r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d3f8      	bcc.n	8000c2e <delay+0x26>
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	e0001000 	.word	0xe0001000
 8000c48:	431bde83 	.word	0x431bde83

08000c4c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	4619      	mov	r1, r3
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f000 ff64 	bl	8001b48 <HAL_GPIO_Init>
}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ca4:	887b      	ldrh	r3, [r7, #2]
 8000ca6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f000 ff46 	bl	8001b48 <HAL_GPIO_Init>
}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <DHT_Start>:


void DHT_Start (void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000cc8:	f7ff ff6e 	bl	8000ba8 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000ccc:	2120      	movs	r1, #32
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <DHT_Start+0x40>)
 8000cd0:	f7ff ffbc 	bl	8000c4c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2120      	movs	r1, #32
 8000cd8:	480a      	ldr	r0, [pc, #40]	; (8000d04 <DHT_Start+0x40>)
 8000cda:	f001 f8c7 	bl	8001e6c <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000cde:	f244 6050 	movw	r0, #18000	; 0x4650
 8000ce2:	f7ff ff91 	bl	8000c08 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2120      	movs	r1, #32
 8000cea:	4806      	ldr	r0, [pc, #24]	; (8000d04 <DHT_Start+0x40>)
 8000cec:	f001 f8be 	bl	8001e6c <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000cf0:	2014      	movs	r0, #20
 8000cf2:	f7ff ff89 	bl	8000c08 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000cf6:	2120      	movs	r1, #32
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <DHT_Start+0x40>)
 8000cfa:	f7ff ffc5 	bl	8000c88 <Set_Pin_Input>
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	48000c00 	.word	0x48000c00

08000d08 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000d12:	2028      	movs	r0, #40	; 0x28
 8000d14:	f7ff ff78 	bl	8000c08 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000d18:	2120      	movs	r1, #32
 8000d1a:	4811      	ldr	r0, [pc, #68]	; (8000d60 <DHT_Check_Response+0x58>)
 8000d1c:	f001 f88e 	bl	8001e3c <HAL_GPIO_ReadPin>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10e      	bne.n	8000d44 <DHT_Check_Response+0x3c>
	{
		delay (80);
 8000d26:	2050      	movs	r0, #80	; 0x50
 8000d28:	f7ff ff6e 	bl	8000c08 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000d2c:	2120      	movs	r1, #32
 8000d2e:	480c      	ldr	r0, [pc, #48]	; (8000d60 <DHT_Check_Response+0x58>)
 8000d30:	f001 f884 	bl	8001e3c <HAL_GPIO_ReadPin>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d002      	beq.n	8000d40 <DHT_Check_Response+0x38>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	71fb      	strb	r3, [r7, #7]
 8000d3e:	e001      	b.n	8000d44 <DHT_Check_Response+0x3c>
		else Response = -1;
 8000d40:	23ff      	movs	r3, #255	; 0xff
 8000d42:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000d44:	bf00      	nop
 8000d46:	2120      	movs	r1, #32
 8000d48:	4805      	ldr	r0, [pc, #20]	; (8000d60 <DHT_Check_Response+0x58>)
 8000d4a:	f001 f877 	bl	8001e3c <HAL_GPIO_ReadPin>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1f8      	bne.n	8000d46 <DHT_Check_Response+0x3e>

	return Response;
 8000d54:	79fb      	ldrb	r3, [r7, #7]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	48000c00 	.word	0x48000c00

08000d64 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	e037      	b.n	8000de0 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000d70:	bf00      	nop
 8000d72:	2120      	movs	r1, #32
 8000d74:	481e      	ldr	r0, [pc, #120]	; (8000df0 <DHT_Read+0x8c>)
 8000d76:	f001 f861 	bl	8001e3c <HAL_GPIO_ReadPin>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f8      	beq.n	8000d72 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000d80:	2028      	movs	r0, #40	; 0x28
 8000d82:	f7ff ff41 	bl	8000c08 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000d86:	2120      	movs	r1, #32
 8000d88:	4819      	ldr	r0, [pc, #100]	; (8000df0 <DHT_Read+0x8c>)
 8000d8a:	f001 f857 	bl	8001e3c <HAL_GPIO_ReadPin>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d10e      	bne.n	8000db2 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000d94:	79bb      	ldrb	r3, [r7, #6]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	b25a      	sxtb	r2, r3
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	4013      	ands	r3, r2
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	e00b      	b.n	8000dca <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	f1c3 0307 	rsb	r3, r3, #7
 8000db8:	2201      	movs	r2, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	b25a      	sxtb	r2, r3
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000dca:	bf00      	nop
 8000dcc:	2120      	movs	r1, #32
 8000dce:	4808      	ldr	r0, [pc, #32]	; (8000df0 <DHT_Read+0x8c>)
 8000dd0:	f001 f834 	bl	8001e3c <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f8      	bne.n	8000dcc <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	71bb      	strb	r3, [r7, #6]
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	2b07      	cmp	r3, #7
 8000de4:	d9c4      	bls.n	8000d70 <DHT_Read+0xc>
	}
	return i;
 8000de6:	79fb      	ldrb	r3, [r7, #7]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	48000c00 	.word	0x48000c00

08000df4 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000dfc:	f7ff ff62 	bl	8000cc4 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000e00:	f7ff ff82 	bl	8000d08 <DHT_Check_Response>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <DHT_GetData+0xa4>)
 8000e0a:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000e0c:	f7ff ffaa 	bl	8000d64 <DHT_Read>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <DHT_GetData+0xa8>)
 8000e16:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000e18:	f7ff ffa4 	bl	8000d64 <DHT_Read>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <DHT_GetData+0xac>)
 8000e22:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000e24:	f7ff ff9e 	bl	8000d64 <DHT_Read>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <DHT_GetData+0xb0>)
 8000e2e:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000e30:	f7ff ff98 	bl	8000d64 <DHT_Read>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <DHT_GetData+0xb4>)
 8000e3a:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000e3c:	f7ff ff92 	bl	8000d64 <DHT_Read>
 8000e40:	4603      	mov	r3, r0
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <DHT_GetData+0xb8>)
 8000e46:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <DHT_GetData+0xb8>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <DHT_GetData+0xa8>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <DHT_GetData+0xac>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <DHT_GetData+0xb0>)
 8000e5c:	7812      	ldrb	r2, [r2, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a11      	ldr	r2, [pc, #68]	; (8000ea8 <DHT_GetData+0xb4>)
 8000e62:	7812      	ldrb	r2, [r2, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d111      	bne.n	8000e8e <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <DHT_GetData+0xb0>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	ee07 3a90 	vmov	s15, r3
 8000e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <DHT_GetData+0xa8>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	ee07 3a90 	vmov	s15, r3
 8000e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200001fc 	.word	0x200001fc
 8000e9c:	2000020c 	.word	0x2000020c
 8000ea0:	2000020e 	.word	0x2000020e
 8000ea4:	2000020d 	.word	0x2000020d
 8000ea8:	20000212 	.word	0x20000212
 8000eac:	20000210 	.word	0x20000210

08000eb0 <led_on>:
/* USER CODE BEGIN 0 */
/**
 * Funkcja która włączącza swiatło ustawia stan wyjsciowy wysoki
 */
void led_on(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOD, GPIO_PIN_1,GPIO_PIN_SET); // turn on LED
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <led_on+0x14>)
 8000eba:	f000 ffd7 	bl	8001e6c <HAL_GPIO_WritePin>
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	48000c00 	.word	0x48000c00

08000ec8 <led_off>:
/**
 * Funkcja która wyłączącza swiatło ustawia stan wyjsciowy niski
 */
void led_off(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOD, GPIO_PIN_1,GPIO_PIN_RESET); // turn off LED
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2102      	movs	r1, #2
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <led_off+0x14>)
 8000ed2:	f000 ffcb 	bl	8001e6c <HAL_GPIO_WritePin>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	48000c00 	.word	0x48000c00

08000ee0 <light_sensor>:
 * lub czy któryś z czujnikow wysłał stan wysoki
 * pin D0 czujnik zmierzchu
 * pin D4 czujnik ruchu
 */
void light_sensor(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	if(is_led_on==T)
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <light_sensor+0x3c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d102      	bne.n	8000ef2 <light_sensor+0x12>
	{
		led_on();
 8000eec:	f7ff ffe0 	bl	8000eb0 <led_on>
	}
	else
	{
		led_off();
	}
}
 8000ef0:	e012      	b.n	8000f18 <light_sensor+0x38>
	else if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0)||HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4)) // if the pin is HIGH
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	480a      	ldr	r0, [pc, #40]	; (8000f20 <light_sensor+0x40>)
 8000ef6:	f000 ffa1 	bl	8001e3c <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d106      	bne.n	8000f0e <light_sensor+0x2e>
 8000f00:	2110      	movs	r1, #16
 8000f02:	4807      	ldr	r0, [pc, #28]	; (8000f20 <light_sensor+0x40>)
 8000f04:	f000 ff9a 	bl	8001e3c <HAL_GPIO_ReadPin>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <light_sensor+0x34>
		led_on();
 8000f0e:	f7ff ffcf 	bl	8000eb0 <led_on>
}
 8000f12:	e001      	b.n	8000f18 <light_sensor+0x38>
		led_off();
 8000f14:	f7ff ffd8 	bl	8000ec8 <led_off>
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200001fd 	.word	0x200001fd
 8000f20:	48000c00 	.word	0x48000c00

08000f24 <buzzer_on>:
/**
 * Funkcja która włączącza alarm, ustawia stan wyjsciowy niski
 */
void buzzer_on(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOD, GPIO_PIN_3,GPIO_PIN_RESET); // turn on buzzer
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2108      	movs	r1, #8
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <buzzer_on+0x14>)
 8000f2e:	f000 ff9d 	bl	8001e6c <HAL_GPIO_WritePin>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	48000c00 	.word	0x48000c00

08000f3c <buzzer_off>:
/**
 * Funkcja która wyłączącza alarm, ustawia stan wyjsciowy wysoki
 */
void buzzer_off(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOD, GPIO_PIN_3,GPIO_PIN_SET); // turn off buzzer
 8000f40:	2201      	movs	r2, #1
 8000f42:	2108      	movs	r1, #8
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <buzzer_off+0x14>)
 8000f46:	f000 ff91 	bl	8001e6c <HAL_GPIO_WritePin>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	48000c00 	.word	0x48000c00

08000f54 <gas_sensor>:
 * Funkcja obsługująca włączanie\wyłączanie alarmu w zależności czy uzytkownik włączył test alarmu,
 * lub czy czujnik dymu nie przysłał stanu niskiego oznaczajacego wykrycie dymu
 * pin D2 czujnik dymu
 */
void gas_sensor(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	if(alarm_test==F)
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <gas_sensor+0x30>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d10c      	bne.n	8000f7a <gas_sensor+0x26>
	{
		if (!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) // if the pin is LOW
 8000f60:	2104      	movs	r1, #4
 8000f62:	4809      	ldr	r0, [pc, #36]	; (8000f88 <gas_sensor+0x34>)
 8000f64:	f000 ff6a 	bl	8001e3c <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d102      	bne.n	8000f74 <gas_sensor+0x20>
		{
			buzzer_on();
 8000f6e:	f7ff ffd9 	bl	8000f24 <buzzer_on>
	}
	else
	{
		buzzer_on();
	}
}
 8000f72:	e004      	b.n	8000f7e <gas_sensor+0x2a>
			buzzer_off();
 8000f74:	f7ff ffe2 	bl	8000f3c <buzzer_off>
}
 8000f78:	e001      	b.n	8000f7e <gas_sensor+0x2a>
		buzzer_on();
 8000f7a:	f7ff ffd3 	bl	8000f24 <buzzer_on>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200001fe 	.word	0x200001fe
 8000f88:	48000c00 	.word	0x48000c00

08000f8c <fan_device>:
/**
 * Funkcja obsługująca włączanie\wyłączanie wiatraka w zależności jaka temperatura została zmierzona
 * pin D6 wyjscie do tranzystora
 */
void fan_device(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	if(DHT.Temperature>temperature_fan_on)
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <fan_device+0x3c>)
 8000f92:	ed93 7a00 	vldr	s14, [r3]
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <fan_device+0x40>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	ee07 3a90 	vmov	s15, r3
 8000f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000faa:	dd05      	ble.n	8000fb8 <fan_device+0x2c>
	{
		HAL_GPIO_WritePin (GPIOD, GPIO_PIN_6,GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2140      	movs	r1, #64	; 0x40
 8000fb0:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <fan_device+0x44>)
 8000fb2:	f000 ff5b 	bl	8001e6c <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin (GPIOD, GPIO_PIN_6,GPIO_PIN_RESET);
	}
}
 8000fb6:	e004      	b.n	8000fc2 <fan_device+0x36>
		HAL_GPIO_WritePin (GPIOD, GPIO_PIN_6,GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2140      	movs	r1, #64	; 0x40
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <fan_device+0x44>)
 8000fbe:	f000 ff55 	bl	8001e6c <HAL_GPIO_WritePin>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200002c4 	.word	0x200002c4
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	48000c00 	.word	0x48000c00

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd8:	f000 fbc8 	bl	800176c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 f81c 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f000 f8f0 	bl	80011c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fe4:	f000 f8be 	bl	8001164 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000fe8:	f000 f86c 	bl	80010c4 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000fec:	f000 f892 	bl	8001114 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  //inicjalizacja przerwania uart
  HAL_UART_Receive_IT(&huart2,&znak, 1);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4906      	ldr	r1, [pc, #24]	; (800100c <main+0x38>)
 8000ff4:	4806      	ldr	r0, [pc, #24]	; (8001010 <main+0x3c>)
 8000ff6:	f002 fda1 	bl	8003b3c <HAL_UART_Receive_IT>
  //inicjalizacja przerwania timer
  HAL_TIM_Base_Start_IT(&htim16);
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <main+0x40>)
 8000ffc:	f002 fa94 	bl	8003528 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 light_sensor();
 8001000:	f7ff ff6e 	bl	8000ee0 <light_sensor>
	 gas_sensor();
 8001004:	f7ff ffa6 	bl	8000f54 <gas_sensor>
	 light_sensor();
 8001008:	e7fa      	b.n	8001000 <main+0x2c>
 800100a:	bf00      	nop
 800100c:	200002cc 	.word	0x200002cc
 8001010:	200002d0 	.word	0x200002d0
 8001014:	20000354 	.word	0x20000354

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b09e      	sub	sp, #120	; 0x78
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001022:	2228      	movs	r2, #40	; 0x28
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f003 fd74 	bl	8004b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800103c:	463b      	mov	r3, r7
 800103e:	223c      	movs	r2, #60	; 0x3c
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fd66 	bl	8004b14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001048:	2302      	movs	r3, #2
 800104a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800104c:	2301      	movs	r3, #1
 800104e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001050:	2310      	movs	r3, #16
 8001052:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001054:	2302      	movs	r3, #2
 8001056:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001058:	2300      	movs	r3, #0
 800105a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800105c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001060:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001062:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001066:	4618      	mov	r0, r3
 8001068:	f000 ff18 	bl	8001e9c <HAL_RCC_OscConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001072:	f000 fa05 	bl	8001480 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001076:	230f      	movs	r3, #15
 8001078:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107a:	2302      	movs	r3, #2
 800107c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001086:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800108c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001090:	2101      	movs	r1, #1
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fe0a 	bl	8002cac <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800109e:	f000 f9ef 	bl	8001480 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4618      	mov	r0, r3
 80010ae:	f002 f833 	bl	8003118 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010b8:	f000 f9e2 	bl	8001480 <Error_Handler>
  }
}
 80010bc:	bf00      	nop
 80010be:	3778      	adds	r7, #120	; 0x78
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_TIM16_Init+0x48>)
 80010ca:	4a11      	ldr	r2, [pc, #68]	; (8001110 <MX_TIM16_Init+0x4c>)
 80010cc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 35999;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_TIM16_Init+0x48>)
 80010d0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80010d4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <MX_TIM16_Init+0x48>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 59999;
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <MX_TIM16_Init+0x48>)
 80010de:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80010e2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_TIM16_Init+0x48>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <MX_TIM16_Init+0x48>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_TIM16_Init+0x48>)
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_TIM16_Init+0x48>)
 80010f8:	f002 f9be 	bl	8003478 <HAL_TIM_Base_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001102:	f000 f9bd 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000354 	.word	0x20000354
 8001110:	40014400 	.word	0x40014400

08001114 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <MX_TIM17_Init+0x48>)
 800111a:	4a11      	ldr	r2, [pc, #68]	; (8001160 <MX_TIM17_Init+0x4c>)
 800111c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 17999;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_TIM17_Init+0x48>)
 8001120:	f244 624f 	movw	r2, #17999	; 0x464f
 8001124:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <MX_TIM17_Init+0x48>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 9999;
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <MX_TIM17_Init+0x48>)
 800112e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001132:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_TIM17_Init+0x48>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <MX_TIM17_Init+0x48>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_TIM17_Init+0x48>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_TIM17_Init+0x48>)
 8001148:	f002 f996 	bl	8003478 <HAL_TIM_Base_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001152:	f000 f995 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000278 	.word	0x20000278
 8001160:	40014800 	.word	0x40014800

08001164 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MX_USART2_UART_Init+0x58>)
 800116a:	4a15      	ldr	r2, [pc, #84]	; (80011c0 <MX_USART2_UART_Init+0x5c>)
 800116c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <MX_USART2_UART_Init+0x58>)
 8001170:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001174:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_USART2_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_USART2_UART_Init+0x58>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_USART2_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_USART2_UART_Init+0x58>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_USART2_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_USART2_UART_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <MX_USART2_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_USART2_UART_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_USART2_UART_Init+0x58>)
 80011a8:	f002 fc1e 	bl	80039e8 <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011b2:	f000 f965 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200002d0 	.word	0x200002d0
 80011c0:	40004400 	.word	0x40004400

080011c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <MX_GPIO_Init+0xa8>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	4a23      	ldr	r2, [pc, #140]	; (800126c <MX_GPIO_Init+0xa8>)
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <MX_GPIO_Init+0xa8>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <MX_GPIO_Init+0xa8>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	4a1d      	ldr	r2, [pc, #116]	; (800126c <MX_GPIO_Init+0xa8>)
 80011f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011fc:	6153      	str	r3, [r2, #20]
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MX_GPIO_Init+0xa8>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	214a      	movs	r1, #74	; 0x4a
 800120e:	4818      	ldr	r0, [pc, #96]	; (8001270 <MX_GPIO_Init+0xac>)
 8001210:	f000 fe2c 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD0 PD2 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4;
 8001214:	2315      	movs	r3, #21
 8001216:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4619      	mov	r1, r3
 8001226:	4812      	ldr	r0, [pc, #72]	; (8001270 <MX_GPIO_Init+0xac>)
 8001228:	f000 fc8e 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 800122c:	2342      	movs	r3, #66	; 0x42
 800122e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	4619      	mov	r1, r3
 8001242:	480b      	ldr	r0, [pc, #44]	; (8001270 <MX_GPIO_Init+0xac>)
 8001244:	f000 fc80 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001248:	2308      	movs	r3, #8
 800124a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001250:	2301      	movs	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	4619      	mov	r1, r3
 800125e:	4804      	ldr	r0, [pc, #16]	; (8001270 <MX_GPIO_Init+0xac>)
 8001260:	f000 fc72 	bl	8001b48 <HAL_GPIO_Init>

}
 8001264:	bf00      	nop
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40021000 	.word	0x40021000
 8001270:	48000c00 	.word	0x48000c00

08001274 <HAL_UART_RxCpltCallback>:
 * Funkcja obsługujaca przerwanie uart
 * Stosowany do obsługi komunikacji bluetooth.
 * @param huart wskaźnik na zmienną która zgłosiła przerwanie
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	//sprawdzanie któe przerwanie przyszło z usart2 czyli bluetooth.
	if(huart->Instance==USART2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a50      	ldr	r2, [pc, #320]	; (80013c4 <HAL_UART_RxCpltCallback+0x150>)
 8001282:	4293      	cmp	r3, r2
 8001284:	f040 8099 	bne.w	80013ba <HAL_UART_RxCpltCallback+0x146>
	{
		//włącznie swiatła
		if(znak==1)
 8001288:	4b4f      	ldr	r3, [pc, #316]	; (80013c8 <HAL_UART_RxCpltCallback+0x154>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d114      	bne.n	80012ba <HAL_UART_RxCpltCallback+0x46>
		{

			is_led_on=T;
 8001290:	4b4e      	ldr	r3, [pc, #312]	; (80013cc <HAL_UART_RxCpltCallback+0x158>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
			sprintf(komunikat,"-LED_ON.\n");
 8001296:	4a4e      	ldr	r2, [pc, #312]	; (80013d0 <HAL_UART_RxCpltCallback+0x15c>)
 8001298:	4b4e      	ldr	r3, [pc, #312]	; (80013d4 <HAL_UART_RxCpltCallback+0x160>)
 800129a:	cb03      	ldmia	r3!, {r0, r1}
 800129c:	6010      	str	r0, [r2, #0]
 800129e:	6051      	str	r1, [r2, #4]
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	8113      	strh	r3, [r2, #8]
			HAL_UART_Transmit_IT(&huart2,(uint8_t*)komunikat,strlen(komunikat));
 80012a4:	484a      	ldr	r0, [pc, #296]	; (80013d0 <HAL_UART_RxCpltCallback+0x15c>)
 80012a6:	f7fe ff93 	bl	80001d0 <strlen>
 80012aa:	4603      	mov	r3, r0
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	4947      	ldr	r1, [pc, #284]	; (80013d0 <HAL_UART_RxCpltCallback+0x15c>)
 80012b2:	4849      	ldr	r0, [pc, #292]	; (80013d8 <HAL_UART_RxCpltCallback+0x164>)
 80012b4:	f002 fbe6 	bl	8003a84 <HAL_UART_Transmit_IT>
 80012b8:	e07a      	b.n	80013b0 <HAL_UART_RxCpltCallback+0x13c>
		}
		//wyłącznie swiatła
		else if(znak==0)
 80012ba:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <HAL_UART_RxCpltCallback+0x154>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d11b      	bne.n	80012fa <HAL_UART_RxCpltCallback+0x86>
		{
			is_led_on=F;
 80012c2:	4b42      	ldr	r3, [pc, #264]	; (80013cc <HAL_UART_RxCpltCallback+0x158>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin (GPIOD, GPIO_PIN_6,GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2140      	movs	r1, #64	; 0x40
 80012cc:	4843      	ldr	r0, [pc, #268]	; (80013dc <HAL_UART_RxCpltCallback+0x168>)
 80012ce:	f000 fdcd 	bl	8001e6c <HAL_GPIO_WritePin>
			sprintf(komunikat,"-LED_OFF.\n");
 80012d2:	4a3f      	ldr	r2, [pc, #252]	; (80013d0 <HAL_UART_RxCpltCallback+0x15c>)
 80012d4:	4b42      	ldr	r3, [pc, #264]	; (80013e0 <HAL_UART_RxCpltCallback+0x16c>)
 80012d6:	cb03      	ldmia	r3!, {r0, r1}
 80012d8:	6010      	str	r0, [r2, #0]
 80012da:	6051      	str	r1, [r2, #4]
 80012dc:	8819      	ldrh	r1, [r3, #0]
 80012de:	789b      	ldrb	r3, [r3, #2]
 80012e0:	8111      	strh	r1, [r2, #8]
 80012e2:	7293      	strb	r3, [r2, #10]
			HAL_UART_Transmit_IT(&huart2,(uint8_t*)komunikat,strlen(komunikat));
 80012e4:	483a      	ldr	r0, [pc, #232]	; (80013d0 <HAL_UART_RxCpltCallback+0x15c>)
 80012e6:	f7fe ff73 	bl	80001d0 <strlen>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	4937      	ldr	r1, [pc, #220]	; (80013d0 <HAL_UART_RxCpltCallback+0x15c>)
 80012f2:	4839      	ldr	r0, [pc, #228]	; (80013d8 <HAL_UART_RxCpltCallback+0x164>)
 80012f4:	f002 fbc6 	bl	8003a84 <HAL_UART_Transmit_IT>
 80012f8:	e05a      	b.n	80013b0 <HAL_UART_RxCpltCallback+0x13c>
		}
		//pomiar temperatury i wysłamnie wartosci na telefon
		else if(znak==2)
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <HAL_UART_RxCpltCallback+0x154>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d11a      	bne.n	8001338 <HAL_UART_RxCpltCallback+0xc4>
		{	DHT_GetData(&DHT);
 8001302:	4838      	ldr	r0, [pc, #224]	; (80013e4 <HAL_UART_RxCpltCallback+0x170>)
 8001304:	f7ff fd76 	bl	8000df4 <DHT_GetData>
		    fan_device();
 8001308:	f7ff fe40 	bl	8000f8c <fan_device>
			sprintf(komunikat,"-TEMPERATURA:%d.\n",(int)DHT.Temperature);
 800130c:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <HAL_UART_RxCpltCallback+0x170>)
 800130e:	edd3 7a00 	vldr	s15, [r3]
 8001312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001316:	ee17 2a90 	vmov	r2, s15
 800131a:	4933      	ldr	r1, [pc, #204]	; (80013e8 <HAL_UART_RxCpltCallback+0x174>)
 800131c:	482c      	ldr	r0, [pc, #176]	; (80013d0 <HAL_UART_RxCpltCallback+0x15c>)
 800131e:	f004 f85d 	bl	80053dc <siprintf>
		    HAL_UART_Transmit_IT(&huart2,(uint8_t*)komunikat,strlen(komunikat));
 8001322:	482b      	ldr	r0, [pc, #172]	; (80013d0 <HAL_UART_RxCpltCallback+0x15c>)
 8001324:	f7fe ff54 	bl	80001d0 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	b29b      	uxth	r3, r3
 800132c:	461a      	mov	r2, r3
 800132e:	4928      	ldr	r1, [pc, #160]	; (80013d0 <HAL_UART_RxCpltCallback+0x15c>)
 8001330:	4829      	ldr	r0, [pc, #164]	; (80013d8 <HAL_UART_RxCpltCallback+0x164>)
 8001332:	f002 fba7 	bl	8003a84 <HAL_UART_Transmit_IT>
 8001336:	e03b      	b.n	80013b0 <HAL_UART_RxCpltCallback+0x13c>
		}
		//pomiar wilgotnosci i wysłamnie wartosci na telefon
		else if(znak==3)
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <HAL_UART_RxCpltCallback+0x154>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b03      	cmp	r3, #3
 800133e:	d118      	bne.n	8001372 <HAL_UART_RxCpltCallback+0xfe>
		{	DHT_GetData(&DHT);
 8001340:	4828      	ldr	r0, [pc, #160]	; (80013e4 <HAL_UART_RxCpltCallback+0x170>)
 8001342:	f7ff fd57 	bl	8000df4 <DHT_GetData>
			sprintf(komunikat,"-WILGOTNOSC:%d.\n",(int)DHT.Humidity);
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <HAL_UART_RxCpltCallback+0x170>)
 8001348:	edd3 7a01 	vldr	s15, [r3, #4]
 800134c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001350:	ee17 2a90 	vmov	r2, s15
 8001354:	4925      	ldr	r1, [pc, #148]	; (80013ec <HAL_UART_RxCpltCallback+0x178>)
 8001356:	481e      	ldr	r0, [pc, #120]	; (80013d0 <HAL_UART_RxCpltCallback+0x15c>)
 8001358:	f004 f840 	bl	80053dc <siprintf>
			HAL_UART_Transmit_IT(&huart2,(uint8_t*)komunikat,strlen(komunikat));
 800135c:	481c      	ldr	r0, [pc, #112]	; (80013d0 <HAL_UART_RxCpltCallback+0x15c>)
 800135e:	f7fe ff37 	bl	80001d0 <strlen>
 8001362:	4603      	mov	r3, r0
 8001364:	b29b      	uxth	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	4919      	ldr	r1, [pc, #100]	; (80013d0 <HAL_UART_RxCpltCallback+0x15c>)
 800136a:	481b      	ldr	r0, [pc, #108]	; (80013d8 <HAL_UART_RxCpltCallback+0x164>)
 800136c:	f002 fb8a 	bl	8003a84 <HAL_UART_Transmit_IT>
 8001370:	e01e      	b.n	80013b0 <HAL_UART_RxCpltCallback+0x13c>
		}
		//włącznie alarmu testowego i włączenie timera
		else if(znak==4)
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_UART_RxCpltCallback+0x154>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b04      	cmp	r3, #4
 8001378:	d11a      	bne.n	80013b0 <HAL_UART_RxCpltCallback+0x13c>
		{
			alarm_test=T;
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <HAL_UART_RxCpltCallback+0x17c>)
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim17);
 8001380:	481c      	ldr	r0, [pc, #112]	; (80013f4 <HAL_UART_RxCpltCallback+0x180>)
 8001382:	f002 f8d1 	bl	8003528 <HAL_TIM_Base_Start_IT>
			sprintf(komunikat,"-TEST_ALARMU.\n");
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <HAL_UART_RxCpltCallback+0x15c>)
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_UART_RxCpltCallback+0x184>)
 800138a:	4614      	mov	r4, r2
 800138c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800138e:	6020      	str	r0, [r4, #0]
 8001390:	6061      	str	r1, [r4, #4]
 8001392:	60a2      	str	r2, [r4, #8]
 8001394:	881a      	ldrh	r2, [r3, #0]
 8001396:	789b      	ldrb	r3, [r3, #2]
 8001398:	81a2      	strh	r2, [r4, #12]
 800139a:	73a3      	strb	r3, [r4, #14]
			HAL_UART_Transmit_IT(&huart2,(uint8_t*)komunikat,strlen(komunikat));
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <HAL_UART_RxCpltCallback+0x15c>)
 800139e:	f7fe ff17 	bl	80001d0 <strlen>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	4909      	ldr	r1, [pc, #36]	; (80013d0 <HAL_UART_RxCpltCallback+0x15c>)
 80013aa:	480b      	ldr	r0, [pc, #44]	; (80013d8 <HAL_UART_RxCpltCallback+0x164>)
 80013ac:	f002 fb6a 	bl	8003a84 <HAL_UART_Transmit_IT>
		}


		//oczekiwanie na kolejny przesłaną wiadomosc
		HAL_UART_Receive_IT(&huart2,&znak, 1);
 80013b0:	2201      	movs	r2, #1
 80013b2:	4905      	ldr	r1, [pc, #20]	; (80013c8 <HAL_UART_RxCpltCallback+0x154>)
 80013b4:	4808      	ldr	r0, [pc, #32]	; (80013d8 <HAL_UART_RxCpltCallback+0x164>)
 80013b6:	f002 fbc1 	bl	8003b3c <HAL_UART_Receive_IT>
	}
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd90      	pop	{r4, r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40004400 	.word	0x40004400
 80013c8:	200002cc 	.word	0x200002cc
 80013cc:	200001fd 	.word	0x200001fd
 80013d0:	20000214 	.word	0x20000214
 80013d4:	08006bb8 	.word	0x08006bb8
 80013d8:	200002d0 	.word	0x200002d0
 80013dc:	48000c00 	.word	0x48000c00
 80013e0:	08006bc4 	.word	0x08006bc4
 80013e4:	200002c4 	.word	0x200002c4
 80013e8:	08006bd0 	.word	0x08006bd0
 80013ec:	08006be4 	.word	0x08006be4
 80013f0:	200001fe 	.word	0x200001fe
 80013f4:	20000278 	.word	0x20000278
 80013f8:	08006bf8 	.word	0x08006bf8

080013fc <HAL_TIM_PeriodElapsedCallback>:
/**
 * * Funkcja obsługujaca przerwanie timerów
 * @param htim wskaźnik na zmienną zgłaszającą przerwanie
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	//wysyłanie pomiaru temperatury co 1 min
	if(htim->Instance==TIM16)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a16      	ldr	r2, [pc, #88]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d11e      	bne.n	800144c <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		DHT_GetData(&DHT);
 800140e:	4816      	ldr	r0, [pc, #88]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001410:	f7ff fcf0 	bl	8000df4 <DHT_GetData>
		sprintf(komunikat,"-TEMPERATURA:%d\n WILGOTNOSC:%d.\n",(int)DHT.Temperature,(int)DHT.Humidity);
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001420:	edd3 7a01 	vldr	s15, [r3, #4]
 8001424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001428:	ee17 3a90 	vmov	r3, s15
 800142c:	ee17 2a10 	vmov	r2, s14
 8001430:	490e      	ldr	r1, [pc, #56]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001432:	480f      	ldr	r0, [pc, #60]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001434:	f003 ffd2 	bl	80053dc <siprintf>
		HAL_UART_Transmit_IT(&huart2,(uint8_t*)komunikat,strlen(komunikat));
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800143a:	f7fe fec9 	bl	80001d0 <strlen>
 800143e:	4603      	mov	r3, r0
 8001440:	b29b      	uxth	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	490a      	ldr	r1, [pc, #40]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001446:	480b      	ldr	r0, [pc, #44]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001448:	f002 fb1c 	bl	8003a84 <HAL_UART_Transmit_IT>
	}
	//po czasie 5 sekund wyłączanie alarmu
	if(htim->Instance==TIM17)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a09      	ldr	r2, [pc, #36]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d102      	bne.n	800145c <HAL_TIM_PeriodElapsedCallback+0x60>
		{
		alarm_test=F;
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
		}
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40014400 	.word	0x40014400
 8001468:	200002c4 	.word	0x200002c4
 800146c:	08006c08 	.word	0x08006c08
 8001470:	20000214 	.word	0x20000214
 8001474:	200002d0 	.word	0x200002d0
 8001478:	40014800 	.word	0x40014800
 800147c:	200001fe 	.word	0x200001fe

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_MspInit+0x44>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <HAL_MspInit+0x44>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6193      	str	r3, [r2, #24]
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_MspInit+0x44>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_MspInit+0x44>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_MspInit+0x44>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	61d3      	str	r3, [r2, #28]
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_MspInit+0x44>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000

080014d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <HAL_TIM_Base_MspInit+0x78>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d114      	bne.n	8001514 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_TIM_Base_MspInit+0x7c>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	4a19      	ldr	r2, [pc, #100]	; (8001554 <HAL_TIM_Base_MspInit+0x7c>)
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	6193      	str	r3, [r2, #24]
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_TIM_Base_MspInit+0x7c>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	2019      	movs	r0, #25
 8001508:	f000 fa71 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800150c:	2019      	movs	r0, #25
 800150e:	f000 fa8a 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001512:	e018      	b.n	8001546 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <HAL_TIM_Base_MspInit+0x80>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d113      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_TIM_Base_MspInit+0x7c>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	4a0c      	ldr	r2, [pc, #48]	; (8001554 <HAL_TIM_Base_MspInit+0x7c>)
 8001524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001528:	6193      	str	r3, [r2, #24]
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_TIM_Base_MspInit+0x7c>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	201a      	movs	r0, #26
 800153c:	f000 fa57 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001540:	201a      	movs	r0, #26
 8001542:	f000 fa70 	bl	8001a26 <HAL_NVIC_EnableIRQ>
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40014400 	.word	0x40014400
 8001554:	40021000 	.word	0x40021000
 8001558:	40014800 	.word	0x40014800

0800155c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1b      	ldr	r2, [pc, #108]	; (80015e8 <HAL_UART_MspInit+0x8c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d130      	bne.n	80015e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <HAL_UART_MspInit+0x90>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	4a1a      	ldr	r2, [pc, #104]	; (80015ec <HAL_UART_MspInit+0x90>)
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	61d3      	str	r3, [r2, #28]
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <HAL_UART_MspInit+0x90>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_UART_MspInit+0x90>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	4a14      	ldr	r2, [pc, #80]	; (80015ec <HAL_UART_MspInit+0x90>)
 800159c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a0:	6153      	str	r3, [r2, #20]
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_UART_MspInit+0x90>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ae:	230c      	movs	r3, #12
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015be:	2307      	movs	r3, #7
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015cc:	f000 fabc 	bl	8001b48 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2026      	movs	r0, #38	; 0x26
 80015d6:	f000 fa0a 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015da:	2026      	movs	r0, #38	; 0x26
 80015dc:	f000 fa23 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	; 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40004400 	.word	0x40004400
 80015ec:	40021000 	.word	0x40021000

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <MemManage_Handler+0x4>

0800160a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <UsageFault_Handler+0x4>

08001616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001644:	f000 f8d8 	bl	80017f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001652:	f001 ffd3 	bl	80035fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000354 	.word	0x20000354

08001660 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001666:	f001 ffc9 	bl	80035fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000278 	.word	0x20000278

08001674 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <USART2_IRQHandler+0x10>)
 800167a:	f002 fa9d 	bl	8003bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200002d0 	.word	0x200002d0

08001688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001690:	4a14      	ldr	r2, [pc, #80]	; (80016e4 <_sbrk+0x5c>)
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <_sbrk+0x60>)
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <_sbrk+0x64>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <_sbrk+0x68>)
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d207      	bcs.n	80016c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b8:	f003 fa02 	bl	8004ac0 <__errno>
 80016bc:	4602      	mov	r2, r0
 80016be:	230c      	movs	r3, #12
 80016c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	e009      	b.n	80016dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <_sbrk+0x64>)
 80016d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	2000a000 	.word	0x2000a000
 80016e8:	00000400 	.word	0x00000400
 80016ec:	20000200 	.word	0x20000200
 80016f0:	200003a8 	.word	0x200003a8

080016f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <SystemInit+0x20>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <SystemInit+0x20>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001750 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480d      	ldr	r0, [pc, #52]	; (8001754 <LoopForever+0x6>)
  ldr r1, =_edata
 800171e:	490e      	ldr	r1, [pc, #56]	; (8001758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001720:	4a0e      	ldr	r2, [pc, #56]	; (800175c <LoopForever+0xe>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001734:	4c0b      	ldr	r4, [pc, #44]	; (8001764 <LoopForever+0x16>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001742:	f7ff ffd7 	bl	80016f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001746:	f003 f9c1 	bl	8004acc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800174a:	f7ff fc43 	bl	8000fd4 <main>

0800174e <LoopForever>:

LoopForever:
    b LoopForever
 800174e:	e7fe      	b.n	800174e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001750:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800175c:	08006ec8 	.word	0x08006ec8
  ldr r2, =_sbss
 8001760:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001764:	200003a8 	.word	0x200003a8

08001768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC1_2_IRQHandler>
	...

0800176c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_Init+0x28>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a07      	ldr	r2, [pc, #28]	; (8001794 <HAL_Init+0x28>)
 8001776:	f043 0310 	orr.w	r3, r3, #16
 800177a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177c:	2003      	movs	r0, #3
 800177e:	f000 f92b 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001782:	2000      	movs	r0, #0
 8001784:	f000 f808 	bl	8001798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001788:	f7ff fe82 	bl	8001490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40022000 	.word	0x40022000

08001798 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_InitTick+0x54>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_InitTick+0x58>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f943 	bl	8001a42 <HAL_SYSTICK_Config>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00e      	b.n	80017e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d80a      	bhi.n	80017e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f000 f90b 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d8:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <HAL_InitTick+0x5c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000004 	.word	0x20000004
 80017f0:	2000000c 	.word	0x2000000c
 80017f4:	20000008 	.word	0x20000008

080017f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	2000000c 	.word	0x2000000c
 800181c:	200003a0 	.word	0x200003a0

08001820 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;  
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	200003a0 	.word	0x200003a0

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	; (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db0b      	blt.n	80018c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4907      	ldr	r1, [pc, #28]	; (80018d4 <__NVIC_EnableIRQ+0x38>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	; (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	; (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff8e 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff29 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff3e 	bl	8001880 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff8e 	bl	800192c <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff31 	bl	800189c <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d008      	beq.n	8001a7e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e020      	b.n	8001ac0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 020e 	bic.w	r2, r2, #14
 8001a8c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d005      	beq.n	8001aee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
 8001aec:	e027      	b.n	8001b3e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 020e 	bic.w	r2, r2, #14
 8001afc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0201 	bic.w	r2, r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	4798      	blx	r3
    } 
  }
  return status;
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b56:	e154      	b.n	8001e02 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8146 	beq.w	8001dfc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d00b      	beq.n	8001b90 <HAL_GPIO_Init+0x48>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d007      	beq.n	8001b90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b84:	2b11      	cmp	r3, #17
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b12      	cmp	r3, #18
 8001b8e:	d130      	bne.n	8001bf2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	091b      	lsrs	r3, r3, #4
 8001bdc:	f003 0201 	and.w	r2, r3, #1
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0xea>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b12      	cmp	r3, #18
 8001c30:	d123      	bne.n	8001c7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	08da      	lsrs	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3208      	adds	r2, #8
 8001c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	08da      	lsrs	r2, r3, #3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3208      	adds	r2, #8
 8001c74:	6939      	ldr	r1, [r7, #16]
 8001c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0203 	and.w	r2, r3, #3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 80a0 	beq.w	8001dfc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbc:	4b58      	ldr	r3, [pc, #352]	; (8001e20 <HAL_GPIO_Init+0x2d8>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a57      	ldr	r2, [pc, #348]	; (8001e20 <HAL_GPIO_Init+0x2d8>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b55      	ldr	r3, [pc, #340]	; (8001e20 <HAL_GPIO_Init+0x2d8>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cd4:	4a53      	ldr	r2, [pc, #332]	; (8001e24 <HAL_GPIO_Init+0x2dc>)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	220f      	movs	r2, #15
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cfe:	d019      	beq.n	8001d34 <HAL_GPIO_Init+0x1ec>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a49      	ldr	r2, [pc, #292]	; (8001e28 <HAL_GPIO_Init+0x2e0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d013      	beq.n	8001d30 <HAL_GPIO_Init+0x1e8>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a48      	ldr	r2, [pc, #288]	; (8001e2c <HAL_GPIO_Init+0x2e4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d00d      	beq.n	8001d2c <HAL_GPIO_Init+0x1e4>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a47      	ldr	r2, [pc, #284]	; (8001e30 <HAL_GPIO_Init+0x2e8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d007      	beq.n	8001d28 <HAL_GPIO_Init+0x1e0>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a46      	ldr	r2, [pc, #280]	; (8001e34 <HAL_GPIO_Init+0x2ec>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d101      	bne.n	8001d24 <HAL_GPIO_Init+0x1dc>
 8001d20:	2304      	movs	r3, #4
 8001d22:	e008      	b.n	8001d36 <HAL_GPIO_Init+0x1ee>
 8001d24:	2305      	movs	r3, #5
 8001d26:	e006      	b.n	8001d36 <HAL_GPIO_Init+0x1ee>
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e004      	b.n	8001d36 <HAL_GPIO_Init+0x1ee>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e002      	b.n	8001d36 <HAL_GPIO_Init+0x1ee>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_GPIO_Init+0x1ee>
 8001d34:	2300      	movs	r3, #0
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	f002 0203 	and.w	r2, r2, #3
 8001d3c:	0092      	lsls	r2, r2, #2
 8001d3e:	4093      	lsls	r3, r2
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d46:	4937      	ldr	r1, [pc, #220]	; (8001e24 <HAL_GPIO_Init+0x2dc>)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d54:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d78:	4a2f      	ldr	r2, [pc, #188]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001da2:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001da8:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dcc:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd2:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001df6:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f47f aea3 	bne.w	8001b58 <HAL_GPIO_Init+0x10>
  }
}
 8001e12:	bf00      	nop
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40010000 	.word	0x40010000
 8001e28:	48000400 	.word	0x48000400
 8001e2c:	48000800 	.word	0x48000800
 8001e30:	48000c00 	.word	0x48000c00
 8001e34:	48001000 	.word	0x48001000
 8001e38:	40010400 	.word	0x40010400

08001e3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	887b      	ldrh	r3, [r7, #2]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	e001      	b.n	8001e5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e7c:	787b      	ldrb	r3, [r7, #1]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d102      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f000 bef4 	b.w	8002c9e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 816a 	beq.w	800219a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ec6:	4bb3      	ldr	r3, [pc, #716]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d00c      	beq.n	8001eec <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ed2:	4bb0      	ldr	r3, [pc, #704]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d159      	bne.n	8001f92 <HAL_RCC_OscConfig+0xf6>
 8001ede:	4bad      	ldr	r3, [pc, #692]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eea:	d152      	bne.n	8001f92 <HAL_RCC_OscConfig+0xf6>
 8001eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f00:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d102      	bne.n	8001f1e <HAL_RCC_OscConfig+0x82>
 8001f18:	4b9e      	ldr	r3, [pc, #632]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	e015      	b.n	8001f4a <HAL_RCC_OscConfig+0xae>
 8001f1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f22:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f36:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f3a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f46:	4b93      	ldr	r3, [pc, #588]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f4e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001f52:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f56:	fa92 f2a2 	rbit	r2, r2
 8001f5a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001f5e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f62:	fab2 f282 	clz	r2, r2
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	f042 0220 	orr.w	r2, r2, #32
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f002 021f 	and.w	r2, r2, #31
 8001f72:	2101      	movs	r1, #1
 8001f74:	fa01 f202 	lsl.w	r2, r1, r2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 810c 	beq.w	8002198 <HAL_RCC_OscConfig+0x2fc>
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 8106 	bne.w	8002198 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f000 be86 	b.w	8002c9e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9c:	d106      	bne.n	8001fac <HAL_RCC_OscConfig+0x110>
 8001f9e:	4b7d      	ldr	r3, [pc, #500]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a7c      	ldr	r2, [pc, #496]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e030      	b.n	800200e <HAL_RCC_OscConfig+0x172>
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x134>
 8001fb6:	4b77      	ldr	r3, [pc, #476]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a76      	ldr	r2, [pc, #472]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b74      	ldr	r3, [pc, #464]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a73      	ldr	r2, [pc, #460]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e01e      	b.n	800200e <HAL_RCC_OscConfig+0x172>
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fda:	d10c      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x15a>
 8001fdc:	4b6d      	ldr	r3, [pc, #436]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a6c      	ldr	r2, [pc, #432]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001fe2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b6a      	ldr	r3, [pc, #424]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a69      	ldr	r2, [pc, #420]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	e00b      	b.n	800200e <HAL_RCC_OscConfig+0x172>
 8001ff6:	4b67      	ldr	r3, [pc, #412]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a66      	ldr	r2, [pc, #408]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8001ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b64      	ldr	r3, [pc, #400]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a63      	ldr	r2, [pc, #396]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8002008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800200e:	4b61      	ldr	r3, [pc, #388]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	f023 020f 	bic.w	r2, r3, #15
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	495d      	ldr	r1, [pc, #372]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 800201e:	4313      	orrs	r3, r2
 8002020:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d059      	beq.n	80020e0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff fbf8 	bl	8001820 <HAL_GetTick>
 8002030:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002034:	e00a      	b.n	800204c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002036:	f7ff fbf3 	bl	8001820 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d902      	bls.n	800204c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	f000 be29 	b.w	8002c9e <HAL_RCC_OscConfig+0xe02>
 800204c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002050:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002060:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	b2db      	uxtb	r3, r3
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d102      	bne.n	800207e <HAL_RCC_OscConfig+0x1e2>
 8002078:	4b46      	ldr	r3, [pc, #280]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	e015      	b.n	80020aa <HAL_RCC_OscConfig+0x20e>
 800207e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002082:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002092:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002096:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800209a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80020a6:	4b3b      	ldr	r3, [pc, #236]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020ae:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80020b2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80020b6:	fa92 f2a2 	rbit	r2, r2
 80020ba:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80020be:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80020c2:	fab2 f282 	clz	r2, r2
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	f042 0220 	orr.w	r2, r2, #32
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	f002 021f 	and.w	r2, r2, #31
 80020d2:	2101      	movs	r1, #1
 80020d4:	fa01 f202 	lsl.w	r2, r1, r2
 80020d8:	4013      	ands	r3, r2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0ab      	beq.n	8002036 <HAL_RCC_OscConfig+0x19a>
 80020de:	e05c      	b.n	800219a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fb9e 	bl	8001820 <HAL_GetTick>
 80020e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e8:	e00a      	b.n	8002100 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ea:	f7ff fb99 	bl	8001820 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d902      	bls.n	8002100 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	f000 bdcf 	b.w	8002c9e <HAL_RCC_OscConfig+0xe02>
 8002100:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002104:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800210c:	fa93 f3a3 	rbit	r3, r3
 8002110:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002114:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b01      	cmp	r3, #1
 800212a:	d102      	bne.n	8002132 <HAL_RCC_OscConfig+0x296>
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	e015      	b.n	800215e <HAL_RCC_OscConfig+0x2c2>
 8002132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002136:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002146:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800214a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800214e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_RCC_OscConfig+0x2f8>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002162:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002166:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800216a:	fa92 f2a2 	rbit	r2, r2
 800216e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002172:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002176:	fab2 f282 	clz	r2, r2
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	f042 0220 	orr.w	r2, r2, #32
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	f002 021f 	and.w	r2, r2, #31
 8002186:	2101      	movs	r1, #1
 8002188:	fa01 f202 	lsl.w	r2, r1, r2
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1ab      	bne.n	80020ea <HAL_RCC_OscConfig+0x24e>
 8002192:	e002      	b.n	800219a <HAL_RCC_OscConfig+0x2fe>
 8002194:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 816f 	beq.w	8002488 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021aa:	4bd0      	ldr	r3, [pc, #832]	; (80024ec <HAL_RCC_OscConfig+0x650>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00b      	beq.n	80021ce <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021b6:	4bcd      	ldr	r3, [pc, #820]	; (80024ec <HAL_RCC_OscConfig+0x650>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d16c      	bne.n	800229c <HAL_RCC_OscConfig+0x400>
 80021c2:	4bca      	ldr	r3, [pc, #808]	; (80024ec <HAL_RCC_OscConfig+0x650>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d166      	bne.n	800229c <HAL_RCC_OscConfig+0x400>
 80021ce:	2302      	movs	r3, #2
 80021d0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80021e0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d102      	bne.n	80021fe <HAL_RCC_OscConfig+0x362>
 80021f8:	4bbc      	ldr	r3, [pc, #752]	; (80024ec <HAL_RCC_OscConfig+0x650>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	e013      	b.n	8002226 <HAL_RCC_OscConfig+0x38a>
 80021fe:	2302      	movs	r3, #2
 8002200:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002210:	2302      	movs	r3, #2
 8002212:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002216:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002222:	4bb2      	ldr	r3, [pc, #712]	; (80024ec <HAL_RCC_OscConfig+0x650>)
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	2202      	movs	r2, #2
 8002228:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800222c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002230:	fa92 f2a2 	rbit	r2, r2
 8002234:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002238:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800223c:	fab2 f282 	clz	r2, r2
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	f042 0220 	orr.w	r2, r2, #32
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	f002 021f 	and.w	r2, r2, #31
 800224c:	2101      	movs	r1, #1
 800224e:	fa01 f202 	lsl.w	r2, r1, r2
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d007      	beq.n	8002268 <HAL_RCC_OscConfig+0x3cc>
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d002      	beq.n	8002268 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	f000 bd1b 	b.w	8002c9e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002268:	4ba0      	ldr	r3, [pc, #640]	; (80024ec <HAL_RCC_OscConfig+0x650>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	21f8      	movs	r1, #248	; 0xf8
 8002278:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002280:	fa91 f1a1 	rbit	r1, r1
 8002284:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002288:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800228c:	fab1 f181 	clz	r1, r1
 8002290:	b2c9      	uxtb	r1, r1
 8002292:	408b      	lsls	r3, r1
 8002294:	4995      	ldr	r1, [pc, #596]	; (80024ec <HAL_RCC_OscConfig+0x650>)
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	e0f5      	b.n	8002488 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8085 	beq.w	80023b2 <HAL_RCC_OscConfig+0x516>
 80022a8:	2301      	movs	r3, #1
 80022aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80022ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	461a      	mov	r2, r3
 80022d0:	2301      	movs	r3, #1
 80022d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff faa4 	bl	8001820 <HAL_GetTick>
 80022d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022de:	f7ff fa9f 	bl	8001820 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d902      	bls.n	80022f4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	f000 bcd5 	b.w	8002c9e <HAL_RCC_OscConfig+0xe02>
 80022f4:	2302      	movs	r3, #2
 80022f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002306:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d102      	bne.n	8002324 <HAL_RCC_OscConfig+0x488>
 800231e:	4b73      	ldr	r3, [pc, #460]	; (80024ec <HAL_RCC_OscConfig+0x650>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	e013      	b.n	800234c <HAL_RCC_OscConfig+0x4b0>
 8002324:	2302      	movs	r3, #2
 8002326:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002336:	2302      	movs	r3, #2
 8002338:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800233c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002348:	4b68      	ldr	r3, [pc, #416]	; (80024ec <HAL_RCC_OscConfig+0x650>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	2202      	movs	r2, #2
 800234e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002352:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002356:	fa92 f2a2 	rbit	r2, r2
 800235a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800235e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002362:	fab2 f282 	clz	r2, r2
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	f042 0220 	orr.w	r2, r2, #32
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	f002 021f 	and.w	r2, r2, #31
 8002372:	2101      	movs	r1, #1
 8002374:	fa01 f202 	lsl.w	r2, r1, r2
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0af      	beq.n	80022de <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237e:	4b5b      	ldr	r3, [pc, #364]	; (80024ec <HAL_RCC_OscConfig+0x650>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	21f8      	movs	r1, #248	; 0xf8
 800238e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002396:	fa91 f1a1 	rbit	r1, r1
 800239a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800239e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80023a2:	fab1 f181 	clz	r1, r1
 80023a6:	b2c9      	uxtb	r1, r1
 80023a8:	408b      	lsls	r3, r1
 80023aa:	4950      	ldr	r1, [pc, #320]	; (80024ec <HAL_RCC_OscConfig+0x650>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]
 80023b0:	e06a      	b.n	8002488 <HAL_RCC_OscConfig+0x5ec>
 80023b2:	2301      	movs	r3, #1
 80023b4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80023c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	461a      	mov	r2, r3
 80023da:	2300      	movs	r3, #0
 80023dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7ff fa1f 	bl	8001820 <HAL_GetTick>
 80023e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e8:	f7ff fa1a 	bl	8001820 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d902      	bls.n	80023fe <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	f000 bc50 	b.w	8002c9e <HAL_RCC_OscConfig+0xe02>
 80023fe:	2302      	movs	r3, #2
 8002400:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002408:	fa93 f3a3 	rbit	r3, r3
 800240c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d102      	bne.n	800242e <HAL_RCC_OscConfig+0x592>
 8002428:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_RCC_OscConfig+0x650>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	e013      	b.n	8002456 <HAL_RCC_OscConfig+0x5ba>
 800242e:	2302      	movs	r3, #2
 8002430:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002440:	2302      	movs	r3, #2
 8002442:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002446:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002452:	4b26      	ldr	r3, [pc, #152]	; (80024ec <HAL_RCC_OscConfig+0x650>)
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	2202      	movs	r2, #2
 8002458:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800245c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002460:	fa92 f2a2 	rbit	r2, r2
 8002464:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002468:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800246c:	fab2 f282 	clz	r2, r2
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	f042 0220 	orr.w	r2, r2, #32
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	f002 021f 	and.w	r2, r2, #31
 800247c:	2101      	movs	r1, #1
 800247e:	fa01 f202 	lsl.w	r2, r1, r2
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1af      	bne.n	80023e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80da 	beq.w	800264c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d069      	beq.n	8002576 <HAL_RCC_OscConfig+0x6da>
 80024a2:	2301      	movs	r3, #1
 80024a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80024b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_OscConfig+0x654>)
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	461a      	mov	r2, r3
 80024c8:	2301      	movs	r3, #1
 80024ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024cc:	f7ff f9a8 	bl	8001820 <HAL_GetTick>
 80024d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d4:	e00e      	b.n	80024f4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d6:	f7ff f9a3 	bl	8001820 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d906      	bls.n	80024f4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e3d9      	b.n	8002c9e <HAL_RCC_OscConfig+0xe02>
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	10908120 	.word	0x10908120
 80024f4:	2302      	movs	r3, #2
 80024f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002506:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800250a:	2202      	movs	r2, #2
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	fa93 f2a3 	rbit	r2, r3
 8002518:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002522:	2202      	movs	r2, #2
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	fa93 f2a3 	rbit	r2, r3
 8002530:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002534:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	4ba5      	ldr	r3, [pc, #660]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 8002538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800253a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800253e:	2102      	movs	r1, #2
 8002540:	6019      	str	r1, [r3, #0]
 8002542:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	fa93 f1a3 	rbit	r1, r3
 800254c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002550:	6019      	str	r1, [r3, #0]
  return result;
 8002552:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	2101      	movs	r1, #1
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0b0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x63a>
 8002574:	e06a      	b.n	800264c <HAL_RCC_OscConfig+0x7b0>
 8002576:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f2a3 	rbit	r2, r3
 8002588:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800258c:	601a      	str	r2, [r3, #0]
  return result;
 800258e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002592:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	4b8c      	ldr	r3, [pc, #560]	; (80027d0 <HAL_RCC_OscConfig+0x934>)
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	461a      	mov	r2, r3
 80025a4:	2300      	movs	r3, #0
 80025a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a8:	f7ff f93a 	bl	8001820 <HAL_GetTick>
 80025ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b0:	e009      	b.n	80025c6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025b2:	f7ff f935 	bl	8001820 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e36b      	b.n	8002c9e <HAL_RCC_OscConfig+0xe02>
 80025c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80025ca:	2202      	movs	r2, #2
 80025cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	fa93 f2a3 	rbit	r2, r3
 80025d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80025e2:	2202      	movs	r2, #2
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	fa93 f2a3 	rbit	r2, r3
 80025f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80025fa:	2202      	movs	r2, #2
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	fa93 f2a3 	rbit	r2, r3
 8002608:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800260c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260e:	4b6f      	ldr	r3, [pc, #444]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 8002610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002612:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002616:	2102      	movs	r1, #2
 8002618:	6019      	str	r1, [r3, #0]
 800261a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	fa93 f1a3 	rbit	r1, r3
 8002624:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002628:	6019      	str	r1, [r3, #0]
  return result;
 800262a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	4013      	ands	r3, r2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1b2      	bne.n	80025b2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8158 	beq.w	800290c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265c:	2300      	movs	r3, #0
 800265e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002662:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d112      	bne.n	8002694 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	4b57      	ldr	r3, [pc, #348]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	4a56      	ldr	r2, [pc, #344]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002678:	61d3      	str	r3, [r2, #28]
 800267a:	4b54      	ldr	r3, [pc, #336]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002682:	f107 0308 	add.w	r3, r7, #8
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f107 0308 	add.w	r3, r7, #8
 800268c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800268e:	2301      	movs	r3, #1
 8002690:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	4b4f      	ldr	r3, [pc, #316]	; (80027d4 <HAL_RCC_OscConfig+0x938>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d11a      	bne.n	80026d6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a0:	4b4c      	ldr	r3, [pc, #304]	; (80027d4 <HAL_RCC_OscConfig+0x938>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a4b      	ldr	r2, [pc, #300]	; (80027d4 <HAL_RCC_OscConfig+0x938>)
 80026a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026aa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ac:	f7ff f8b8 	bl	8001820 <HAL_GetTick>
 80026b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	e009      	b.n	80026ca <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b6:	f7ff f8b3 	bl	8001820 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e2e9      	b.n	8002c9e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ca:	4b42      	ldr	r3, [pc, #264]	; (80027d4 <HAL_RCC_OscConfig+0x938>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0ef      	beq.n	80026b6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d106      	bne.n	80026ee <HAL_RCC_OscConfig+0x852>
 80026e0:	4b3a      	ldr	r3, [pc, #232]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4a39      	ldr	r2, [pc, #228]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6213      	str	r3, [r2, #32]
 80026ec:	e02f      	b.n	800274e <HAL_RCC_OscConfig+0x8b2>
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10c      	bne.n	8002712 <HAL_RCC_OscConfig+0x876>
 80026f8:	4b34      	ldr	r3, [pc, #208]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4a33      	ldr	r2, [pc, #204]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 80026fe:	f023 0301 	bic.w	r3, r3, #1
 8002702:	6213      	str	r3, [r2, #32]
 8002704:	4b31      	ldr	r3, [pc, #196]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4a30      	ldr	r2, [pc, #192]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 800270a:	f023 0304 	bic.w	r3, r3, #4
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	e01d      	b.n	800274e <HAL_RCC_OscConfig+0x8b2>
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b05      	cmp	r3, #5
 800271a:	d10c      	bne.n	8002736 <HAL_RCC_OscConfig+0x89a>
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4a2a      	ldr	r2, [pc, #168]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 8002722:	f043 0304 	orr.w	r3, r3, #4
 8002726:	6213      	str	r3, [r2, #32]
 8002728:	4b28      	ldr	r3, [pc, #160]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4a27      	ldr	r2, [pc, #156]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6213      	str	r3, [r2, #32]
 8002734:	e00b      	b.n	800274e <HAL_RCC_OscConfig+0x8b2>
 8002736:	4b25      	ldr	r3, [pc, #148]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a24      	ldr	r2, [pc, #144]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	6213      	str	r3, [r2, #32]
 8002742:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4a21      	ldr	r2, [pc, #132]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 8002748:	f023 0304 	bic.w	r3, r3, #4
 800274c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d06b      	beq.n	8002830 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002758:	f7ff f862 	bl	8001820 <HAL_GetTick>
 800275c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002760:	e00b      	b.n	800277a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7ff f85d 	bl	8001820 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e291      	b.n	8002c9e <HAL_RCC_OscConfig+0xe02>
 800277a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800277e:	2202      	movs	r2, #2
 8002780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	fa93 f2a3 	rbit	r2, r3
 800278c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002796:	2202      	movs	r2, #2
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	fa93 f2a3 	rbit	r2, r3
 80027a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80027a8:	601a      	str	r2, [r3, #0]
  return result;
 80027aa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80027ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	f043 0302 	orr.w	r3, r3, #2
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d109      	bne.n	80027d8 <HAL_RCC_OscConfig+0x93c>
 80027c4:	4b01      	ldr	r3, [pc, #4]	; (80027cc <HAL_RCC_OscConfig+0x930>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	e014      	b.n	80027f4 <HAL_RCC_OscConfig+0x958>
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	10908120 	.word	0x10908120
 80027d4:	40007000 	.word	0x40007000
 80027d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80027dc:	2202      	movs	r2, #2
 80027de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f2a3 	rbit	r2, r3
 80027ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	4bbb      	ldr	r3, [pc, #748]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80027f8:	2102      	movs	r1, #2
 80027fa:	6011      	str	r1, [r2, #0]
 80027fc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	fa92 f1a2 	rbit	r1, r2
 8002806:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800280a:	6011      	str	r1, [r2, #0]
  return result;
 800280c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	fab2 f282 	clz	r2, r2
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f002 021f 	and.w	r2, r2, #31
 8002822:	2101      	movs	r1, #1
 8002824:	fa01 f202 	lsl.w	r2, r1, r2
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d099      	beq.n	8002762 <HAL_RCC_OscConfig+0x8c6>
 800282e:	e063      	b.n	80028f8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002830:	f7fe fff6 	bl	8001820 <HAL_GetTick>
 8002834:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002838:	e00b      	b.n	8002852 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe fff1 	bl	8001820 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e225      	b.n	8002c9e <HAL_RCC_OscConfig+0xe02>
 8002852:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002856:	2202      	movs	r2, #2
 8002858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	fa93 f2a3 	rbit	r2, r3
 8002864:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800286e:	2202      	movs	r2, #2
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	fa93 f2a3 	rbit	r2, r3
 800287c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002880:	601a      	str	r2, [r3, #0]
  return result;
 8002882:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002886:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	b2db      	uxtb	r3, r3
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d102      	bne.n	80028a2 <HAL_RCC_OscConfig+0xa06>
 800289c:	4b90      	ldr	r3, [pc, #576]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	e00d      	b.n	80028be <HAL_RCC_OscConfig+0xa22>
 80028a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80028a6:	2202      	movs	r2, #2
 80028a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	fa93 f2a3 	rbit	r2, r3
 80028b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	4b89      	ldr	r3, [pc, #548]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80028c2:	2102      	movs	r1, #2
 80028c4:	6011      	str	r1, [r2, #0]
 80028c6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	fa92 f1a2 	rbit	r1, r2
 80028d0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80028d4:	6011      	str	r1, [r2, #0]
  return result;
 80028d6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	fab2 f282 	clz	r2, r2
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	f002 021f 	and.w	r2, r2, #31
 80028ec:	2101      	movs	r1, #1
 80028ee:	fa01 f202 	lsl.w	r2, r1, r2
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1a0      	bne.n	800283a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d105      	bne.n	800290c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002900:	4b77      	ldr	r3, [pc, #476]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	4a76      	ldr	r2, [pc, #472]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 8002906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800290a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800290c:	1d3b      	adds	r3, r7, #4
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 81c2 	beq.w	8002c9c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002918:	4b71      	ldr	r3, [pc, #452]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b08      	cmp	r3, #8
 8002922:	f000 819c 	beq.w	8002c5e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002926:	1d3b      	adds	r3, r7, #4
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	2b02      	cmp	r3, #2
 800292e:	f040 8114 	bne.w	8002b5a <HAL_RCC_OscConfig+0xcbe>
 8002932:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002936:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800293a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	fa93 f2a3 	rbit	r2, r3
 8002946:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800294a:	601a      	str	r2, [r3, #0]
  return result;
 800294c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002950:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800295c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	461a      	mov	r2, r3
 8002964:	2300      	movs	r3, #0
 8002966:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7fe ff5a 	bl	8001820 <HAL_GetTick>
 800296c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002970:	e009      	b.n	8002986 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002972:	f7fe ff55 	bl	8001820 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e18b      	b.n	8002c9e <HAL_RCC_OscConfig+0xe02>
 8002986:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800298a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800298e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	fa93 f2a3 	rbit	r2, r3
 800299a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800299e:	601a      	str	r2, [r3, #0]
  return result;
 80029a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	095b      	lsrs	r3, r3, #5
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d102      	bne.n	80029c0 <HAL_RCC_OscConfig+0xb24>
 80029ba:	4b49      	ldr	r3, [pc, #292]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	e01b      	b.n	80029f8 <HAL_RCC_OscConfig+0xb5c>
 80029c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	fa93 f2a3 	rbit	r2, r3
 80029d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80029de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	fa93 f2a3 	rbit	r2, r3
 80029ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	4b3a      	ldr	r3, [pc, #232]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80029fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a00:	6011      	str	r1, [r2, #0]
 8002a02:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	fa92 f1a2 	rbit	r1, r2
 8002a0c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002a10:	6011      	str	r1, [r2, #0]
  return result;
 8002a12:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	fab2 f282 	clz	r2, r2
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	f042 0220 	orr.w	r2, r2, #32
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	f002 021f 	and.w	r2, r2, #31
 8002a28:	2101      	movs	r1, #1
 8002a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d19e      	bne.n	8002972 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a34:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a42:	1d3b      	adds	r3, r7, #4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	4925      	ldr	r1, [pc, #148]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
 8002a50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	fa93 f2a3 	rbit	r2, r3
 8002a64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a68:	601a      	str	r2, [r3, #0]
  return result;
 8002a6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a6e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	461a      	mov	r2, r3
 8002a82:	2301      	movs	r3, #1
 8002a84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fe fecb 	bl	8001820 <HAL_GetTick>
 8002a8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a8e:	e009      	b.n	8002aa4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a90:	f7fe fec6 	bl	8001820 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0fc      	b.n	8002c9e <HAL_RCC_OscConfig+0xe02>
 8002aa4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	fa93 f2a3 	rbit	r2, r3
 8002ab8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002abc:	601a      	str	r2, [r3, #0]
  return result;
 8002abe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ac2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCC_OscConfig+0xc48>
 8002ad8:	4b01      	ldr	r3, [pc, #4]	; (8002ae0 <HAL_RCC_OscConfig+0xc44>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	e01e      	b.n	8002b1c <HAL_RCC_OscConfig+0xc80>
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ae8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	fa93 f2a3 	rbit	r2, r3
 8002af8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	fa93 f2a3 	rbit	r2, r3
 8002b12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	4b63      	ldr	r3, [pc, #396]	; (8002ca8 <HAL_RCC_OscConfig+0xe0c>)
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b24:	6011      	str	r1, [r2, #0]
 8002b26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	fa92 f1a2 	rbit	r1, r2
 8002b30:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b34:	6011      	str	r1, [r2, #0]
  return result;
 8002b36:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	fab2 f282 	clz	r2, r2
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	f042 0220 	orr.w	r2, r2, #32
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	f002 021f 	and.w	r2, r2, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d09b      	beq.n	8002a90 <HAL_RCC_OscConfig+0xbf4>
 8002b58:	e0a0      	b.n	8002c9c <HAL_RCC_OscConfig+0xe00>
 8002b5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	fa93 f2a3 	rbit	r2, r3
 8002b6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b72:	601a      	str	r2, [r3, #0]
  return result;
 8002b74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b78:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe fe46 	bl	8001820 <HAL_GetTick>
 8002b94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b98:	e009      	b.n	8002bae <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7fe fe41 	bl	8001820 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e077      	b.n	8002c9e <HAL_RCC_OscConfig+0xe02>
 8002bae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	fa93 f2a3 	rbit	r2, r3
 8002bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc6:	601a      	str	r2, [r3, #0]
  return result;
 8002bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bcc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <HAL_RCC_OscConfig+0xd4c>
 8002be2:	4b31      	ldr	r3, [pc, #196]	; (8002ca8 <HAL_RCC_OscConfig+0xe0c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	e01b      	b.n	8002c20 <HAL_RCC_OscConfig+0xd84>
 8002be8:	f107 0320 	add.w	r3, r7, #32
 8002bec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f107 0320 	add.w	r3, r7, #32
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	fa93 f2a3 	rbit	r2, r3
 8002bfc:	f107 031c 	add.w	r3, r7, #28
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	f107 0318 	add.w	r3, r7, #24
 8002c06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f107 0318 	add.w	r3, r7, #24
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	fa93 f2a3 	rbit	r2, r3
 8002c16:	f107 0314 	add.w	r3, r7, #20
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <HAL_RCC_OscConfig+0xe0c>)
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	f107 0210 	add.w	r2, r7, #16
 8002c24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c28:	6011      	str	r1, [r2, #0]
 8002c2a:	f107 0210 	add.w	r2, r7, #16
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	fa92 f1a2 	rbit	r1, r2
 8002c34:	f107 020c 	add.w	r2, r7, #12
 8002c38:	6011      	str	r1, [r2, #0]
  return result;
 8002c3a:	f107 020c 	add.w	r2, r7, #12
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	fab2 f282 	clz	r2, r2
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	f042 0220 	orr.w	r2, r2, #32
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f002 021f 	and.w	r2, r2, #31
 8002c50:	2101      	movs	r1, #1
 8002c52:	fa01 f202 	lsl.w	r2, r1, r2
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d19e      	bne.n	8002b9a <HAL_RCC_OscConfig+0xcfe>
 8002c5c:	e01e      	b.n	8002c9c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e018      	b.n	8002c9e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <HAL_RCC_OscConfig+0xe0c>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c74:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c7c:	1d3b      	adds	r3, r7, #4
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d108      	bne.n	8002c98 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40021000 	.word	0x40021000

08002cac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b09e      	sub	sp, #120	; 0x78
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e162      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b90      	ldr	r3, [pc, #576]	; (8002f08 <HAL_RCC_ClockConfig+0x25c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d910      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b8d      	ldr	r3, [pc, #564]	; (8002f08 <HAL_RCC_ClockConfig+0x25c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 0207 	bic.w	r2, r3, #7
 8002cda:	498b      	ldr	r1, [pc, #556]	; (8002f08 <HAL_RCC_ClockConfig+0x25c>)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	4b89      	ldr	r3, [pc, #548]	; (8002f08 <HAL_RCC_ClockConfig+0x25c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e14a      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b82      	ldr	r3, [pc, #520]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	497f      	ldr	r1, [pc, #508]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80dc 	beq.w	8002ed8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d13c      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xf6>
 8002d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d102      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xa6>
 8002d4c:	4b6f      	ldr	r3, [pc, #444]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	e00f      	b.n	8002d72 <HAL_RCC_ClockConfig+0xc6>
 8002d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	667b      	str	r3, [r7, #100]	; 0x64
 8002d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d64:	663b      	str	r3, [r7, #96]	; 0x60
 8002d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d68:	fa93 f3a3 	rbit	r3, r3
 8002d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d6e:	4b67      	ldr	r3, [pc, #412]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d76:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d7a:	fa92 f2a2 	rbit	r2, r2
 8002d7e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d82:	fab2 f282 	clz	r2, r2
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	f042 0220 	orr.w	r2, r2, #32
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	f002 021f 	and.w	r2, r2, #31
 8002d92:	2101      	movs	r1, #1
 8002d94:	fa01 f202 	lsl.w	r2, r1, r2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d17b      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e0f3      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d13c      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x178>
 8002daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d102      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0x128>
 8002dce:	4b4f      	ldr	r3, [pc, #316]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	e00f      	b.n	8002df4 <HAL_RCC_ClockConfig+0x148>
 8002dd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	647b      	str	r3, [r7, #68]	; 0x44
 8002de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002de6:	643b      	str	r3, [r7, #64]	; 0x40
 8002de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df0:	4b46      	ldr	r3, [pc, #280]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002df8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dfc:	fa92 f2a2 	rbit	r2, r2
 8002e00:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e04:	fab2 f282 	clz	r2, r2
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	f042 0220 	orr.w	r2, r2, #32
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	f002 021f 	and.w	r2, r2, #31
 8002e14:	2101      	movs	r1, #1
 8002e16:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d13a      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0b2      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2de>
 8002e24:	2302      	movs	r3, #2
 8002e26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d102      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x1a0>
 8002e46:	4b31      	ldr	r3, [pc, #196]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	e00d      	b.n	8002e68 <HAL_RCC_ClockConfig+0x1bc>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
 8002e58:	2302      	movs	r3, #2
 8002e5a:	623b      	str	r3, [r7, #32]
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	4b29      	ldr	r3, [pc, #164]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	2202      	movs	r2, #2
 8002e6a:	61ba      	str	r2, [r7, #24]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	fa92 f2a2 	rbit	r2, r2
 8002e72:	617a      	str	r2, [r7, #20]
  return result;
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	fab2 f282 	clz	r2, r2
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	f042 0220 	orr.w	r2, r2, #32
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	f002 021f 	and.w	r2, r2, #31
 8002e86:	2101      	movs	r1, #1
 8002e88:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e079      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e96:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f023 0203 	bic.w	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	491a      	ldr	r1, [pc, #104]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea8:	f7fe fcba 	bl	8001820 <HAL_GetTick>
 8002eac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb0:	f7fe fcb6 	bl	8001820 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e061      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 020c 	and.w	r2, r3, #12
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d1eb      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCC_ClockConfig+0x25c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d214      	bcs.n	8002f10 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <HAL_RCC_ClockConfig+0x25c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 0207 	bic.w	r2, r3, #7
 8002eee:	4906      	ldr	r1, [pc, #24]	; (8002f08 <HAL_RCC_ClockConfig+0x25c>)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <HAL_RCC_ClockConfig+0x25c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e040      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2de>
 8002f08:	40022000 	.word	0x40022000
 8002f0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_RCC_ClockConfig+0x2e8>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	491a      	ldr	r1, [pc, #104]	; (8002f94 <HAL_RCC_ClockConfig+0x2e8>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f3a:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_RCC_ClockConfig+0x2e8>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4912      	ldr	r1, [pc, #72]	; (8002f94 <HAL_RCC_ClockConfig+0x2e8>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f4e:	f000 f829 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002f52:	4601      	mov	r1, r0
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_RCC_ClockConfig+0x2e8>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f5c:	22f0      	movs	r2, #240	; 0xf0
 8002f5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	fa92 f2a2 	rbit	r2, r2
 8002f66:	60fa      	str	r2, [r7, #12]
  return result;
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	fab2 f282 	clz	r2, r2
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	40d3      	lsrs	r3, r2
 8002f72:	4a09      	ldr	r2, [pc, #36]	; (8002f98 <HAL_RCC_ClockConfig+0x2ec>)
 8002f74:	5cd3      	ldrb	r3, [r2, r3]
 8002f76:	fa21 f303 	lsr.w	r3, r1, r3
 8002f7a:	4a08      	ldr	r2, [pc, #32]	; (8002f9c <HAL_RCC_ClockConfig+0x2f0>)
 8002f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <HAL_RCC_ClockConfig+0x2f4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fe fc08 	bl	8001798 <HAL_InitTick>
  
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3778      	adds	r7, #120	; 0x78
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	08006c2c 	.word	0x08006c2c
 8002f9c:	20000004 	.word	0x20000004
 8002fa0:	20000008 	.word	0x20000008

08002fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b08b      	sub	sp, #44	; 0x2c
 8002fa8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002fbe:	4b29      	ldr	r3, [pc, #164]	; (8003064 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d002      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x30>
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d003      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0x36>
 8002fd2:	e03c      	b.n	800304e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fd4:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fd6:	623b      	str	r3, [r7, #32]
      break;
 8002fd8:	e03c      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002fe0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002fe4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	fa92 f2a2 	rbit	r2, r2
 8002fec:	607a      	str	r2, [r7, #4]
  return result;
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	fab2 f282 	clz	r2, r2
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	40d3      	lsrs	r3, r2
 8002ff8:	4a1c      	ldr	r2, [pc, #112]	; (800306c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ffe:	4b19      	ldr	r3, [pc, #100]	; (8003064 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	220f      	movs	r2, #15
 8003008:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	fa92 f2a2 	rbit	r2, r2
 8003010:	60fa      	str	r2, [r7, #12]
  return result;
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	fab2 f282 	clz	r2, r2
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	40d3      	lsrs	r3, r2
 800301c:	4a14      	ldr	r2, [pc, #80]	; (8003070 <HAL_RCC_GetSysClockFreq+0xcc>)
 800301e:	5cd3      	ldrb	r3, [r2, r3]
 8003020:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800302c:	4a0e      	ldr	r2, [pc, #56]	; (8003068 <HAL_RCC_GetSysClockFreq+0xc4>)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	fbb2 f2f3 	udiv	r2, r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
 800303c:	e004      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	4a0c      	ldr	r2, [pc, #48]	; (8003074 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	623b      	str	r3, [r7, #32]
      break;
 800304c:	e002      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003050:	623b      	str	r3, [r7, #32]
      break;
 8003052:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003054:	6a3b      	ldr	r3, [r7, #32]
}
 8003056:	4618      	mov	r0, r3
 8003058:	372c      	adds	r7, #44	; 0x2c
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
 8003068:	007a1200 	.word	0x007a1200
 800306c:	08006c44 	.word	0x08006c44
 8003070:	08006c54 	.word	0x08006c54
 8003074:	003d0900 	.word	0x003d0900

08003078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800307c:	4b03      	ldr	r3, [pc, #12]	; (800308c <HAL_RCC_GetHCLKFreq+0x14>)
 800307e:	681b      	ldr	r3, [r3, #0]
}
 8003080:	4618      	mov	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20000004 	.word	0x20000004

08003090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003096:	f7ff ffef 	bl	8003078 <HAL_RCC_GetHCLKFreq>
 800309a:	4601      	mov	r1, r0
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030a4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80030a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	fa92 f2a2 	rbit	r2, r2
 80030b0:	603a      	str	r2, [r7, #0]
  return result;
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	fab2 f282 	clz	r2, r2
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	40d3      	lsrs	r3, r2
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40021000 	.word	0x40021000
 80030d0:	08006c3c 	.word	0x08006c3c

080030d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030da:	f7ff ffcd 	bl	8003078 <HAL_RCC_GetHCLKFreq>
 80030de:	4601      	mov	r1, r0
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80030e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80030ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	fa92 f2a2 	rbit	r2, r2
 80030f4:	603a      	str	r2, [r7, #0]
  return result;
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	fab2 f282 	clz	r2, r2
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	40d3      	lsrs	r3, r2
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003102:	5cd3      	ldrb	r3, [r2, r3]
 8003104:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000
 8003114:	08006c3c 	.word	0x08006c3c

08003118 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b092      	sub	sp, #72	; 0x48
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003128:	2300      	movs	r3, #0
 800312a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80d4 	beq.w	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313c:	4b4e      	ldr	r3, [pc, #312]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10e      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003148:	4b4b      	ldr	r3, [pc, #300]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	4a4a      	ldr	r2, [pc, #296]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003152:	61d3      	str	r3, [r2, #28]
 8003154:	4b48      	ldr	r3, [pc, #288]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003160:	2301      	movs	r3, #1
 8003162:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b45      	ldr	r3, [pc, #276]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003172:	4b42      	ldr	r3, [pc, #264]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a41      	ldr	r2, [pc, #260]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7fe fb4f 	bl	8001820 <HAL_GetTick>
 8003182:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fe fb4b 	bl	8001820 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b64      	cmp	r3, #100	; 0x64
 8003192:	d901      	bls.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e169      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	4b38      	ldr	r3, [pc, #224]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031a4:	4b34      	ldr	r3, [pc, #208]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8084 	beq.w	80032be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d07c      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031c4:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	4b26      	ldr	r3, [pc, #152]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	461a      	mov	r2, r3
 80031ee:	2301      	movs	r3, #1
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	461a      	mov	r2, r3
 8003212:	2300      	movs	r3, #0
 8003214:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003216:	4a18      	ldr	r2, [pc, #96]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800321c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d04b      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003226:	f7fe fafb 	bl	8001820 <HAL_GetTick>
 800322a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322c:	e00a      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322e:	f7fe faf7 	bl	8001820 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f241 3288 	movw	r2, #5000	; 0x1388
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e113      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003244:	2302      	movs	r3, #2
 8003246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
 8003250:	2302      	movs	r3, #2
 8003252:	623b      	str	r3, [r7, #32]
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	61fb      	str	r3, [r7, #28]
  return result;
 800325c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f043 0302 	orr.w	r3, r3, #2
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d108      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003272:	4b01      	ldr	r3, [pc, #4]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	e00d      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003278:	40021000 	.word	0x40021000
 800327c:	40007000 	.word	0x40007000
 8003280:	10908100 	.word	0x10908100
 8003284:	2302      	movs	r3, #2
 8003286:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	4b78      	ldr	r3, [pc, #480]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	2202      	movs	r2, #2
 8003296:	613a      	str	r2, [r7, #16]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	fa92 f2a2 	rbit	r2, r2
 800329e:	60fa      	str	r2, [r7, #12]
  return result;
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	fab2 f282 	clz	r2, r2
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	f002 021f 	and.w	r2, r2, #31
 80032b2:	2101      	movs	r1, #1
 80032b4:	fa01 f202 	lsl.w	r2, r1, r2
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0b7      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80032be:	4b6d      	ldr	r3, [pc, #436]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	496a      	ldr	r1, [pc, #424]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d105      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d8:	4b66      	ldr	r3, [pc, #408]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	4a65      	ldr	r2, [pc, #404]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032f0:	4b60      	ldr	r3, [pc, #384]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	f023 0203 	bic.w	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	495d      	ldr	r1, [pc, #372]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d008      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800330e:	4b59      	ldr	r3, [pc, #356]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	4956      	ldr	r1, [pc, #344]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800331c:	4313      	orrs	r3, r2
 800331e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800332c:	4b51      	ldr	r3, [pc, #324]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	494e      	ldr	r1, [pc, #312]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800333a:	4313      	orrs	r3, r2
 800333c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800334a:	4b4a      	ldr	r3, [pc, #296]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	f023 0210 	bic.w	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	4947      	ldr	r1, [pc, #284]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003358:	4313      	orrs	r3, r2
 800335a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003368:	4b42      	ldr	r3, [pc, #264]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	493f      	ldr	r1, [pc, #252]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003376:	4313      	orrs	r3, r2
 8003378:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003386:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f023 0220 	bic.w	r2, r3, #32
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	4938      	ldr	r1, [pc, #224]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003394:	4313      	orrs	r3, r2
 8003396:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033a4:	4b33      	ldr	r3, [pc, #204]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	4930      	ldr	r1, [pc, #192]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033c2:	4b2c      	ldr	r3, [pc, #176]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	4929      	ldr	r1, [pc, #164]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033e0:	4b24      	ldr	r3, [pc, #144]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	4921      	ldr	r1, [pc, #132]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033fe:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	491a      	ldr	r1, [pc, #104]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800340c:	4313      	orrs	r3, r2
 800340e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800341c:	4b15      	ldr	r3, [pc, #84]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	4912      	ldr	r1, [pc, #72]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800342a:	4313      	orrs	r3, r2
 800342c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800343a:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	490b      	ldr	r1, [pc, #44]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003448:	4313      	orrs	r3, r2
 800344a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003464:	4903      	ldr	r1, [pc, #12]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003466:	4313      	orrs	r3, r2
 8003468:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3748      	adds	r7, #72	; 0x48
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40021000 	.word	0x40021000

08003478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e049      	b.n	800351e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fe f81a 	bl	80014d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3304      	adds	r3, #4
 80034b4:	4619      	mov	r1, r3
 80034b6:	4610      	mov	r0, r2
 80034b8:	f000 f9e8 	bl	800388c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d001      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e04a      	b.n	80035d6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a21      	ldr	r2, [pc, #132]	; (80035e4 <HAL_TIM_Base_Start_IT+0xbc>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d018      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x6c>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356a:	d013      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x6c>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00e      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x6c>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <HAL_TIM_Base_Start_IT+0xc4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d009      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x6c>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a1a      	ldr	r2, [pc, #104]	; (80035f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d004      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x6c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d115      	bne.n	80035c0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	4b17      	ldr	r3, [pc, #92]	; (80035f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800359c:	4013      	ands	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	d015      	beq.n	80035d2 <HAL_TIM_Base_Start_IT+0xaa>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ac:	d011      	beq.n	80035d2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0201 	orr.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035be:	e008      	b.n	80035d2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0201 	orr.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	e000      	b.n	80035d4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40012c00 	.word	0x40012c00
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800
 80035f0:	40013400 	.word	0x40013400
 80035f4:	40014000 	.word	0x40014000
 80035f8:	00010007 	.word	0x00010007

080035fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b02      	cmp	r3, #2
 8003610:	d122      	bne.n	8003658 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b02      	cmp	r3, #2
 800361e:	d11b      	bne.n	8003658 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0202 	mvn.w	r2, #2
 8003628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f905 	bl	800384e <HAL_TIM_IC_CaptureCallback>
 8003644:	e005      	b.n	8003652 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f8f7 	bl	800383a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f908 	bl	8003862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b04      	cmp	r3, #4
 8003664:	d122      	bne.n	80036ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b04      	cmp	r3, #4
 8003672:	d11b      	bne.n	80036ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0204 	mvn.w	r2, #4
 800367c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8db 	bl	800384e <HAL_TIM_IC_CaptureCallback>
 8003698:	e005      	b.n	80036a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f8cd 	bl	800383a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f8de 	bl	8003862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d122      	bne.n	8003700 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d11b      	bne.n	8003700 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0208 	mvn.w	r2, #8
 80036d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2204      	movs	r2, #4
 80036d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f8b1 	bl	800384e <HAL_TIM_IC_CaptureCallback>
 80036ec:	e005      	b.n	80036fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8a3 	bl	800383a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f8b4 	bl	8003862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0310 	and.w	r3, r3, #16
 800370a:	2b10      	cmp	r3, #16
 800370c:	d122      	bne.n	8003754 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b10      	cmp	r3, #16
 800371a:	d11b      	bne.n	8003754 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0210 	mvn.w	r2, #16
 8003724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2208      	movs	r2, #8
 800372a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f887 	bl	800384e <HAL_TIM_IC_CaptureCallback>
 8003740:	e005      	b.n	800374e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f879 	bl	800383a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f88a 	bl	8003862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d10e      	bne.n	8003780 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b01      	cmp	r3, #1
 800376e:	d107      	bne.n	8003780 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0201 	mvn.w	r2, #1
 8003778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd fe3e 	bl	80013fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	2b80      	cmp	r3, #128	; 0x80
 800378c:	d10e      	bne.n	80037ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003798:	2b80      	cmp	r3, #128	; 0x80
 800379a:	d107      	bne.n	80037ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f90a 	bl	80039c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ba:	d10e      	bne.n	80037da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c6:	2b80      	cmp	r3, #128	; 0x80
 80037c8:	d107      	bne.n	80037da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f8fd 	bl	80039d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b40      	cmp	r3, #64	; 0x40
 80037e6:	d10e      	bne.n	8003806 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d107      	bne.n	8003806 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f838 	bl	8003876 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b20      	cmp	r3, #32
 8003812:	d10e      	bne.n	8003832 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b20      	cmp	r3, #32
 8003820:	d107      	bne.n	8003832 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f06f 0220 	mvn.w	r2, #32
 800382a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f8bd 	bl	80039ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a3c      	ldr	r2, [pc, #240]	; (8003990 <TIM_Base_SetConfig+0x104>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00f      	beq.n	80038c4 <TIM_Base_SetConfig+0x38>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038aa:	d00b      	beq.n	80038c4 <TIM_Base_SetConfig+0x38>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a39      	ldr	r2, [pc, #228]	; (8003994 <TIM_Base_SetConfig+0x108>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d007      	beq.n	80038c4 <TIM_Base_SetConfig+0x38>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a38      	ldr	r2, [pc, #224]	; (8003998 <TIM_Base_SetConfig+0x10c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d003      	beq.n	80038c4 <TIM_Base_SetConfig+0x38>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a37      	ldr	r2, [pc, #220]	; (800399c <TIM_Base_SetConfig+0x110>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d108      	bne.n	80038d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a2d      	ldr	r2, [pc, #180]	; (8003990 <TIM_Base_SetConfig+0x104>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d01b      	beq.n	8003916 <TIM_Base_SetConfig+0x8a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e4:	d017      	beq.n	8003916 <TIM_Base_SetConfig+0x8a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <TIM_Base_SetConfig+0x108>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d013      	beq.n	8003916 <TIM_Base_SetConfig+0x8a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a29      	ldr	r2, [pc, #164]	; (8003998 <TIM_Base_SetConfig+0x10c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00f      	beq.n	8003916 <TIM_Base_SetConfig+0x8a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a28      	ldr	r2, [pc, #160]	; (800399c <TIM_Base_SetConfig+0x110>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00b      	beq.n	8003916 <TIM_Base_SetConfig+0x8a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a27      	ldr	r2, [pc, #156]	; (80039a0 <TIM_Base_SetConfig+0x114>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d007      	beq.n	8003916 <TIM_Base_SetConfig+0x8a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a26      	ldr	r2, [pc, #152]	; (80039a4 <TIM_Base_SetConfig+0x118>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d003      	beq.n	8003916 <TIM_Base_SetConfig+0x8a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a25      	ldr	r2, [pc, #148]	; (80039a8 <TIM_Base_SetConfig+0x11c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d108      	bne.n	8003928 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a10      	ldr	r2, [pc, #64]	; (8003990 <TIM_Base_SetConfig+0x104>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00f      	beq.n	8003974 <TIM_Base_SetConfig+0xe8>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a11      	ldr	r2, [pc, #68]	; (800399c <TIM_Base_SetConfig+0x110>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00b      	beq.n	8003974 <TIM_Base_SetConfig+0xe8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a10      	ldr	r2, [pc, #64]	; (80039a0 <TIM_Base_SetConfig+0x114>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d007      	beq.n	8003974 <TIM_Base_SetConfig+0xe8>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a0f      	ldr	r2, [pc, #60]	; (80039a4 <TIM_Base_SetConfig+0x118>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_Base_SetConfig+0xe8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a0e      	ldr	r2, [pc, #56]	; (80039a8 <TIM_Base_SetConfig+0x11c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d103      	bne.n	800397c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	615a      	str	r2, [r3, #20]
}
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40012c00 	.word	0x40012c00
 8003994:	40000400 	.word	0x40000400
 8003998:	40000800 	.word	0x40000800
 800399c:	40013400 	.word	0x40013400
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40014400 	.word	0x40014400
 80039a8:	40014800 	.word	0x40014800

080039ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e040      	b.n	8003a7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fd fda6 	bl	800155c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2224      	movs	r2, #36	; 0x24
 8003a14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fae6 	bl	8003ff8 <UART_SetConfig>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e022      	b.n	8003a7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fcac 	bl	800439c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fd33 	bl	80044e0 <UART_CheckIdleState>
 8003a7a:	4603      	mov	r3, r0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d145      	bne.n	8003b26 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_UART_Transmit_IT+0x22>
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e03e      	b.n	8003b28 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_UART_Transmit_IT+0x34>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e037      	b.n	8003b28 <HAL_UART_Transmit_IT+0xa4>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	88fa      	ldrh	r2, [r7, #6]
 8003aca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	88fa      	ldrh	r2, [r7, #6]
 8003ad2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2221      	movs	r2, #33	; 0x21
 8003ae8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	d107      	bne.n	8003b04 <HAL_UART_Transmit_IT+0x80>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d103      	bne.n	8003b04 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a0d      	ldr	r2, [pc, #52]	; (8003b34 <HAL_UART_Transmit_IT+0xb0>)
 8003b00:	669a      	str	r2, [r3, #104]	; 0x68
 8003b02:	e002      	b.n	8003b0a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a0c      	ldr	r2, [pc, #48]	; (8003b38 <HAL_UART_Transmit_IT+0xb4>)
 8003b08:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b20:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	e000      	b.n	8003b28 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8003b26:	2302      	movs	r3, #2
  }
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	08004857 	.word	0x08004857
 8003b38:	080047e3 	.word	0x080047e3

08003b3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d12c      	bne.n	8003bac <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <HAL_UART_Receive_IT+0x22>
 8003b58:	88fb      	ldrh	r3, [r7, #6]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e025      	b.n	8003bae <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_UART_Receive_IT+0x34>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e01e      	b.n	8003bae <HAL_UART_Receive_IT+0x72>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d007      	beq.n	8003b9c <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b9a:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 fd62 	bl	800466c <UART_Start_Receive_IT>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	e000      	b.n	8003bae <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003bac:	2302      	movs	r3, #2
  }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	f640 030f 	movw	r3, #2063	; 0x80f
 8003bde:	4013      	ands	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d113      	bne.n	8003c10 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00e      	beq.n	8003c10 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 81cd 	beq.w	8003fa0 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	4798      	blx	r3
      }
      return;
 8003c0e:	e1c7      	b.n	8003fa0 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 80e3 	beq.w	8003dde <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d105      	bne.n	8003c2e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4ba5      	ldr	r3, [pc, #660]	; (8003ebc <HAL_UART_IRQHandler+0x304>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80d8 	beq.w	8003dde <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d010      	beq.n	8003c5a <HAL_UART_IRQHandler+0xa2>
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00b      	beq.n	8003c5a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2201      	movs	r2, #1
 8003c48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c50:	f043 0201 	orr.w	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d010      	beq.n	8003c86 <HAL_UART_IRQHandler+0xce>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00b      	beq.n	8003c86 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2202      	movs	r2, #2
 8003c74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c7c:	f043 0204 	orr.w	r2, r3, #4
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d010      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xfa>
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca8:	f043 0202 	orr.w	r2, r3, #2
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d015      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d104      	bne.n	8003cd0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00b      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2208      	movs	r2, #8
 8003cd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cde:	f043 0208 	orr.w	r2, r3, #8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d011      	beq.n	8003d16 <HAL_UART_IRQHandler+0x15e>
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00c      	beq.n	8003d16 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d0c:	f043 0220 	orr.w	r2, r3, #32
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8141 	beq.w	8003fa4 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00c      	beq.n	8003d46 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d58:	2b40      	cmp	r3, #64	; 0x40
 8003d5a:	d004      	beq.n	8003d66 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d031      	beq.n	8003dca <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fcf6 	bl	8004758 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d76:	2b40      	cmp	r3, #64	; 0x40
 8003d78:	d123      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d88:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d013      	beq.n	8003dba <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	4a4a      	ldr	r2, [pc, #296]	; (8003ec0 <HAL_UART_IRQHandler+0x308>)
 8003d98:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fd fe94 	bl	8001acc <HAL_DMA_Abort_IT>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d017      	beq.n	8003dda <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003db4:	4610      	mov	r0, r2
 8003db6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db8:	e00f      	b.n	8003dda <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f906 	bl	8003fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	e00b      	b.n	8003dda <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f902 	bl	8003fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	e007      	b.n	8003dda <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f8fe 	bl	8003fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003dd8:	e0e4      	b.n	8003fa4 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dda:	bf00      	nop
    return;
 8003ddc:	e0e2      	b.n	8003fa4 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	f040 80a7 	bne.w	8003f36 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80a1 	beq.w	8003f36 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 809b 	beq.w	8003f36 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2210      	movs	r2, #16
 8003e06:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e12:	2b40      	cmp	r3, #64	; 0x40
 8003e14:	d156      	bne.n	8003ec4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003e20:	893b      	ldrh	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80c0 	beq.w	8003fa8 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e2e:	893a      	ldrh	r2, [r7, #8]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	f080 80b9 	bcs.w	8003fa8 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	893a      	ldrh	r2, [r7, #8]
 8003e3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d02a      	beq.n	8003e9e <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e56:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e76:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0210 	bic.w	r2, r2, #16
 8003e92:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fd fdde 	bl	8001a5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f894 	bl	8003fe0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003eb8:	e076      	b.n	8003fa8 <HAL_UART_IRQHandler+0x3f0>
 8003eba:	bf00      	nop
 8003ebc:	04000120 	.word	0x04000120
 8003ec0:	080047b7 	.word	0x080047b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d064      	beq.n	8003fac <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 8003ee2:	897b      	ldrh	r3, [r7, #10]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d061      	beq.n	8003fac <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ef6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0201 	bic.w	r2, r2, #1
 8003f06:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0210 	bic.w	r2, r2, #16
 8003f28:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f2a:	897b      	ldrh	r3, [r7, #10]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f856 	bl	8003fe0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f34:	e03a      	b.n	8003fac <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00d      	beq.n	8003f5c <HAL_UART_IRQHandler+0x3a4>
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fda9 	bl	8004aac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f5a:	e02a      	b.n	8003fb2 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01b      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
    }
    return;
 8003f80:	e016      	b.n	8003fb0 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d012      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x3fa>
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fc9b 	bl	80048d2 <UART_EndTransmit_IT>
    return;
 8003f9c:	bf00      	nop
 8003f9e:	e008      	b.n	8003fb2 <HAL_UART_IRQHandler+0x3fa>
      return;
 8003fa0:	bf00      	nop
 8003fa2:	e006      	b.n	8003fb2 <HAL_UART_IRQHandler+0x3fa>
    return;
 8003fa4:	bf00      	nop
 8003fa6:	e004      	b.n	8003fb2 <HAL_UART_IRQHandler+0x3fa>
      return;
 8003fa8:	bf00      	nop
 8003faa:	e002      	b.n	8003fb2 <HAL_UART_IRQHandler+0x3fa>
      return;
 8003fac:	bf00      	nop
 8003fae:	e000      	b.n	8003fb2 <HAL_UART_IRQHandler+0x3fa>
    return;
 8003fb0:	bf00      	nop
  }

}
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004026:	f023 030c 	bic.w	r3, r3, #12
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	6979      	ldr	r1, [r7, #20]
 8004030:	430b      	orrs	r3, r1
 8004032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	430a      	orrs	r2, r1
 800406c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4aad      	ldr	r2, [pc, #692]	; (8004328 <UART_SetConfig+0x330>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d121      	bne.n	80040bc <UART_SetConfig+0xc4>
 8004078:	4bac      	ldr	r3, [pc, #688]	; (800432c <UART_SetConfig+0x334>)
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b03      	cmp	r3, #3
 8004082:	d817      	bhi.n	80040b4 <UART_SetConfig+0xbc>
 8004084:	a201      	add	r2, pc, #4	; (adr r2, 800408c <UART_SetConfig+0x94>)
 8004086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408a:	bf00      	nop
 800408c:	0800409d 	.word	0x0800409d
 8004090:	080040a9 	.word	0x080040a9
 8004094:	080040af 	.word	0x080040af
 8004098:	080040a3 	.word	0x080040a3
 800409c:	2301      	movs	r3, #1
 800409e:	77fb      	strb	r3, [r7, #31]
 80040a0:	e0b2      	b.n	8004208 <UART_SetConfig+0x210>
 80040a2:	2302      	movs	r3, #2
 80040a4:	77fb      	strb	r3, [r7, #31]
 80040a6:	e0af      	b.n	8004208 <UART_SetConfig+0x210>
 80040a8:	2304      	movs	r3, #4
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	e0ac      	b.n	8004208 <UART_SetConfig+0x210>
 80040ae:	2308      	movs	r3, #8
 80040b0:	77fb      	strb	r3, [r7, #31]
 80040b2:	e0a9      	b.n	8004208 <UART_SetConfig+0x210>
 80040b4:	2310      	movs	r3, #16
 80040b6:	77fb      	strb	r3, [r7, #31]
 80040b8:	bf00      	nop
 80040ba:	e0a5      	b.n	8004208 <UART_SetConfig+0x210>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a9b      	ldr	r2, [pc, #620]	; (8004330 <UART_SetConfig+0x338>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d123      	bne.n	800410e <UART_SetConfig+0x116>
 80040c6:	4b99      	ldr	r3, [pc, #612]	; (800432c <UART_SetConfig+0x334>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d2:	d012      	beq.n	80040fa <UART_SetConfig+0x102>
 80040d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d8:	d802      	bhi.n	80040e0 <UART_SetConfig+0xe8>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d007      	beq.n	80040ee <UART_SetConfig+0xf6>
 80040de:	e012      	b.n	8004106 <UART_SetConfig+0x10e>
 80040e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040e4:	d00c      	beq.n	8004100 <UART_SetConfig+0x108>
 80040e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040ea:	d003      	beq.n	80040f4 <UART_SetConfig+0xfc>
 80040ec:	e00b      	b.n	8004106 <UART_SetConfig+0x10e>
 80040ee:	2300      	movs	r3, #0
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	e089      	b.n	8004208 <UART_SetConfig+0x210>
 80040f4:	2302      	movs	r3, #2
 80040f6:	77fb      	strb	r3, [r7, #31]
 80040f8:	e086      	b.n	8004208 <UART_SetConfig+0x210>
 80040fa:	2304      	movs	r3, #4
 80040fc:	77fb      	strb	r3, [r7, #31]
 80040fe:	e083      	b.n	8004208 <UART_SetConfig+0x210>
 8004100:	2308      	movs	r3, #8
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e080      	b.n	8004208 <UART_SetConfig+0x210>
 8004106:	2310      	movs	r3, #16
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	bf00      	nop
 800410c:	e07c      	b.n	8004208 <UART_SetConfig+0x210>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a88      	ldr	r2, [pc, #544]	; (8004334 <UART_SetConfig+0x33c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d123      	bne.n	8004160 <UART_SetConfig+0x168>
 8004118:	4b84      	ldr	r3, [pc, #528]	; (800432c <UART_SetConfig+0x334>)
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004120:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004124:	d012      	beq.n	800414c <UART_SetConfig+0x154>
 8004126:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800412a:	d802      	bhi.n	8004132 <UART_SetConfig+0x13a>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <UART_SetConfig+0x148>
 8004130:	e012      	b.n	8004158 <UART_SetConfig+0x160>
 8004132:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004136:	d00c      	beq.n	8004152 <UART_SetConfig+0x15a>
 8004138:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800413c:	d003      	beq.n	8004146 <UART_SetConfig+0x14e>
 800413e:	e00b      	b.n	8004158 <UART_SetConfig+0x160>
 8004140:	2300      	movs	r3, #0
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e060      	b.n	8004208 <UART_SetConfig+0x210>
 8004146:	2302      	movs	r3, #2
 8004148:	77fb      	strb	r3, [r7, #31]
 800414a:	e05d      	b.n	8004208 <UART_SetConfig+0x210>
 800414c:	2304      	movs	r3, #4
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e05a      	b.n	8004208 <UART_SetConfig+0x210>
 8004152:	2308      	movs	r3, #8
 8004154:	77fb      	strb	r3, [r7, #31]
 8004156:	e057      	b.n	8004208 <UART_SetConfig+0x210>
 8004158:	2310      	movs	r3, #16
 800415a:	77fb      	strb	r3, [r7, #31]
 800415c:	bf00      	nop
 800415e:	e053      	b.n	8004208 <UART_SetConfig+0x210>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a74      	ldr	r2, [pc, #464]	; (8004338 <UART_SetConfig+0x340>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d123      	bne.n	80041b2 <UART_SetConfig+0x1ba>
 800416a:	4b70      	ldr	r3, [pc, #448]	; (800432c <UART_SetConfig+0x334>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004176:	d012      	beq.n	800419e <UART_SetConfig+0x1a6>
 8004178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800417c:	d802      	bhi.n	8004184 <UART_SetConfig+0x18c>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <UART_SetConfig+0x19a>
 8004182:	e012      	b.n	80041aa <UART_SetConfig+0x1b2>
 8004184:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004188:	d00c      	beq.n	80041a4 <UART_SetConfig+0x1ac>
 800418a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800418e:	d003      	beq.n	8004198 <UART_SetConfig+0x1a0>
 8004190:	e00b      	b.n	80041aa <UART_SetConfig+0x1b2>
 8004192:	2300      	movs	r3, #0
 8004194:	77fb      	strb	r3, [r7, #31]
 8004196:	e037      	b.n	8004208 <UART_SetConfig+0x210>
 8004198:	2302      	movs	r3, #2
 800419a:	77fb      	strb	r3, [r7, #31]
 800419c:	e034      	b.n	8004208 <UART_SetConfig+0x210>
 800419e:	2304      	movs	r3, #4
 80041a0:	77fb      	strb	r3, [r7, #31]
 80041a2:	e031      	b.n	8004208 <UART_SetConfig+0x210>
 80041a4:	2308      	movs	r3, #8
 80041a6:	77fb      	strb	r3, [r7, #31]
 80041a8:	e02e      	b.n	8004208 <UART_SetConfig+0x210>
 80041aa:	2310      	movs	r3, #16
 80041ac:	77fb      	strb	r3, [r7, #31]
 80041ae:	bf00      	nop
 80041b0:	e02a      	b.n	8004208 <UART_SetConfig+0x210>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a61      	ldr	r2, [pc, #388]	; (800433c <UART_SetConfig+0x344>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d123      	bne.n	8004204 <UART_SetConfig+0x20c>
 80041bc:	4b5b      	ldr	r3, [pc, #364]	; (800432c <UART_SetConfig+0x334>)
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80041c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c8:	d012      	beq.n	80041f0 <UART_SetConfig+0x1f8>
 80041ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ce:	d802      	bhi.n	80041d6 <UART_SetConfig+0x1de>
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <UART_SetConfig+0x1ec>
 80041d4:	e012      	b.n	80041fc <UART_SetConfig+0x204>
 80041d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041da:	d00c      	beq.n	80041f6 <UART_SetConfig+0x1fe>
 80041dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041e0:	d003      	beq.n	80041ea <UART_SetConfig+0x1f2>
 80041e2:	e00b      	b.n	80041fc <UART_SetConfig+0x204>
 80041e4:	2300      	movs	r3, #0
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	e00e      	b.n	8004208 <UART_SetConfig+0x210>
 80041ea:	2302      	movs	r3, #2
 80041ec:	77fb      	strb	r3, [r7, #31]
 80041ee:	e00b      	b.n	8004208 <UART_SetConfig+0x210>
 80041f0:	2304      	movs	r3, #4
 80041f2:	77fb      	strb	r3, [r7, #31]
 80041f4:	e008      	b.n	8004208 <UART_SetConfig+0x210>
 80041f6:	2308      	movs	r3, #8
 80041f8:	77fb      	strb	r3, [r7, #31]
 80041fa:	e005      	b.n	8004208 <UART_SetConfig+0x210>
 80041fc:	2310      	movs	r3, #16
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	bf00      	nop
 8004202:	e001      	b.n	8004208 <UART_SetConfig+0x210>
 8004204:	2310      	movs	r3, #16
 8004206:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004210:	d15d      	bne.n	80042ce <UART_SetConfig+0x2d6>
  {
    switch (clocksource)
 8004212:	7ffb      	ldrb	r3, [r7, #31]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d828      	bhi.n	800426a <UART_SetConfig+0x272>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <UART_SetConfig+0x228>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004245 	.word	0x08004245
 8004224:	0800424d 	.word	0x0800424d
 8004228:	08004255 	.word	0x08004255
 800422c:	0800426b 	.word	0x0800426b
 8004230:	0800425b 	.word	0x0800425b
 8004234:	0800426b 	.word	0x0800426b
 8004238:	0800426b 	.word	0x0800426b
 800423c:	0800426b 	.word	0x0800426b
 8004240:	08004263 	.word	0x08004263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004244:	f7fe ff24 	bl	8003090 <HAL_RCC_GetPCLK1Freq>
 8004248:	61b8      	str	r0, [r7, #24]
        break;
 800424a:	e013      	b.n	8004274 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800424c:	f7fe ff42 	bl	80030d4 <HAL_RCC_GetPCLK2Freq>
 8004250:	61b8      	str	r0, [r7, #24]
        break;
 8004252:	e00f      	b.n	8004274 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004254:	4b3a      	ldr	r3, [pc, #232]	; (8004340 <UART_SetConfig+0x348>)
 8004256:	61bb      	str	r3, [r7, #24]
        break;
 8004258:	e00c      	b.n	8004274 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800425a:	f7fe fea3 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 800425e:	61b8      	str	r0, [r7, #24]
        break;
 8004260:	e008      	b.n	8004274 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004266:	61bb      	str	r3, [r7, #24]
        break;
 8004268:	e004      	b.n	8004274 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	77bb      	strb	r3, [r7, #30]
        break;
 8004272:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 8085 	beq.w	8004386 <UART_SetConfig+0x38e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	005a      	lsls	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	085b      	lsrs	r3, r3, #1
 8004286:	441a      	add	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	b29b      	uxth	r3, r3
 8004292:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	2b0f      	cmp	r3, #15
 8004298:	d916      	bls.n	80042c8 <UART_SetConfig+0x2d0>
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a0:	d212      	bcs.n	80042c8 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f023 030f 	bic.w	r3, r3, #15
 80042aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	89fb      	ldrh	r3, [r7, #14]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	89fa      	ldrh	r2, [r7, #14]
 80042c4:	60da      	str	r2, [r3, #12]
 80042c6:	e05e      	b.n	8004386 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	77bb      	strb	r3, [r7, #30]
 80042cc:	e05b      	b.n	8004386 <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042ce:	7ffb      	ldrb	r3, [r7, #31]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d837      	bhi.n	8004344 <UART_SetConfig+0x34c>
 80042d4:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <UART_SetConfig+0x2e4>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	08004301 	.word	0x08004301
 80042e0:	08004309 	.word	0x08004309
 80042e4:	08004311 	.word	0x08004311
 80042e8:	08004345 	.word	0x08004345
 80042ec:	08004317 	.word	0x08004317
 80042f0:	08004345 	.word	0x08004345
 80042f4:	08004345 	.word	0x08004345
 80042f8:	08004345 	.word	0x08004345
 80042fc:	0800431f 	.word	0x0800431f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004300:	f7fe fec6 	bl	8003090 <HAL_RCC_GetPCLK1Freq>
 8004304:	61b8      	str	r0, [r7, #24]
        break;
 8004306:	e022      	b.n	800434e <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004308:	f7fe fee4 	bl	80030d4 <HAL_RCC_GetPCLK2Freq>
 800430c:	61b8      	str	r0, [r7, #24]
        break;
 800430e:	e01e      	b.n	800434e <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <UART_SetConfig+0x348>)
 8004312:	61bb      	str	r3, [r7, #24]
        break;
 8004314:	e01b      	b.n	800434e <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004316:	f7fe fe45 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 800431a:	61b8      	str	r0, [r7, #24]
        break;
 800431c:	e017      	b.n	800434e <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800431e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004322:	61bb      	str	r3, [r7, #24]
        break;
 8004324:	e013      	b.n	800434e <UART_SetConfig+0x356>
 8004326:	bf00      	nop
 8004328:	40013800 	.word	0x40013800
 800432c:	40021000 	.word	0x40021000
 8004330:	40004400 	.word	0x40004400
 8004334:	40004800 	.word	0x40004800
 8004338:	40004c00 	.word	0x40004c00
 800433c:	40005000 	.word	0x40005000
 8004340:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	77bb      	strb	r3, [r7, #30]
        break;
 800434c:	bf00      	nop
    }

    if (pclk != 0U)
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d018      	beq.n	8004386 <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	085a      	lsrs	r2, r3, #1
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	441a      	add	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	fbb2 f3f3 	udiv	r3, r2, r3
 8004366:	b29b      	uxth	r3, r3
 8004368:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b0f      	cmp	r3, #15
 800436e:	d908      	bls.n	8004382 <UART_SetConfig+0x38a>
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004376:	d204      	bcs.n	8004382 <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = usartdiv;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	60da      	str	r2, [r3, #12]
 8004380:	e001      	b.n	8004386 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004392:	7fbb      	ldrb	r3, [r7, #30]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	f003 0310 	and.w	r3, r3, #16
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01a      	beq.n	80044b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800449a:	d10a      	bne.n	80044b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	605a      	str	r2, [r3, #4]
  }
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044f0:	f7fd f996 	bl	8001820 <HAL_GetTick>
 80044f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b08      	cmp	r3, #8
 8004502:	d10e      	bne.n	8004522 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f82d 	bl	8004572 <UART_WaitOnFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e023      	b.n	800456a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b04      	cmp	r3, #4
 800452e:	d10e      	bne.n	800454e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f817 	bl	8004572 <UART_WaitOnFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e00d      	b.n	800456a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	603b      	str	r3, [r7, #0]
 800457e:	4613      	mov	r3, r2
 8004580:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004582:	e05e      	b.n	8004642 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458a:	d05a      	beq.n	8004642 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458c:	f7fd f948 	bl	8001820 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d11b      	bne.n	80045da <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0201 	bic.w	r2, r2, #1
 80045c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e043      	b.n	8004662 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d02c      	beq.n	8004642 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f6:	d124      	bne.n	8004642 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004600:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004610:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0201 	bic.w	r2, r2, #1
 8004620:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e00f      	b.n	8004662 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4013      	ands	r3, r2
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	429a      	cmp	r2, r3
 8004650:	bf0c      	ite	eq
 8004652:	2301      	moveq	r3, #1
 8004654:	2300      	movne	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	429a      	cmp	r2, r3
 800465e:	d091      	beq.n	8004584 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	4613      	mov	r3, r2
 8004678:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	88fa      	ldrh	r2, [r7, #6]
 8004684:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	88fa      	ldrh	r2, [r7, #6]
 800468c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469e:	d10e      	bne.n	80046be <UART_Start_Receive_IT+0x52>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d105      	bne.n	80046b4 <UART_Start_Receive_IT+0x48>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80046ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046b2:	e01a      	b.n	80046ea <UART_Start_Receive_IT+0x7e>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	22ff      	movs	r2, #255	; 0xff
 80046b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046bc:	e015      	b.n	80046ea <UART_Start_Receive_IT+0x7e>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10d      	bne.n	80046e2 <UART_Start_Receive_IT+0x76>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d104      	bne.n	80046d8 <UART_Start_Receive_IT+0x6c>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	22ff      	movs	r2, #255	; 0xff
 80046d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046d6:	e008      	b.n	80046ea <UART_Start_Receive_IT+0x7e>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	227f      	movs	r2, #127	; 0x7f
 80046dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046e0:	e003      	b.n	80046ea <UART_Start_Receive_IT+0x7e>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2222      	movs	r2, #34	; 0x22
 80046f6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004710:	d107      	bne.n	8004722 <UART_Start_Receive_IT+0xb6>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d103      	bne.n	8004722 <UART_Start_Receive_IT+0xb6>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4a0c      	ldr	r2, [pc, #48]	; (8004750 <UART_Start_Receive_IT+0xe4>)
 800471e:	665a      	str	r2, [r3, #100]	; 0x64
 8004720:	e002      	b.n	8004728 <UART_Start_Receive_IT+0xbc>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4a0b      	ldr	r2, [pc, #44]	; (8004754 <UART_Start_Receive_IT+0xe8>)
 8004726:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800473e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	080049d9 	.word	0x080049d9
 8004754:	08004905 	.word	0x08004905

08004758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800476e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0201 	bic.w	r2, r2, #1
 800477e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004784:	2b01      	cmp	r3, #1
 8004786:	d107      	bne.n	8004798 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0210 	bic.w	r2, r2, #16
 8004796:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7ff fbf9 	bl	8003fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ee:	2b21      	cmp	r3, #33	; 0x21
 80047f0:	d12b      	bne.n	800484a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d110      	bne.n	8004820 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800480c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800481c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800481e:	e014      	b.n	800484a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004824:	781a      	ldrb	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	b292      	uxth	r2, r2
 800482c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004856:	b480      	push	{r7}
 8004858:	b085      	sub	sp, #20
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004862:	2b21      	cmp	r3, #33	; 0x21
 8004864:	d12f      	bne.n	80048c6 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d110      	bne.n	8004894 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004880:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004890:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004892:	e018      	b.n	80048c6 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004898:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	881a      	ldrh	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048a6:	b292      	uxth	r2, r2
 80048a8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ae:	1c9a      	adds	r2, r3, #2
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2220      	movs	r2, #32
 80048ee:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff fb5e 	bl	8003fb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004912:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004918:	2b22      	cmp	r3, #34	; 0x22
 800491a:	d151      	bne.n	80049c0 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004922:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004924:	89bb      	ldrh	r3, [r7, #12]
 8004926:	b2d9      	uxtb	r1, r3
 8004928:	89fb      	ldrh	r3, [r7, #14]
 800492a:	b2da      	uxtb	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004930:	400a      	ands	r2, r1
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d138      	bne.n	80049d0 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800496c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0201 	bic.w	r2, r2, #1
 800497c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498e:	2b01      	cmp	r3, #1
 8004990:	d10f      	bne.n	80049b2 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0210 	bic.w	r2, r2, #16
 80049a0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049a8:	4619      	mov	r1, r3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff fb18 	bl	8003fe0 <HAL_UARTEx_RxEventCallback>
 80049b0:	e002      	b.n	80049b8 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fc fc5e 	bl	8001274 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049be:	e007      	b.n	80049d0 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0208 	orr.w	r2, r2, #8
 80049ce:	619a      	str	r2, [r3, #24]
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80049e6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ec:	2b22      	cmp	r3, #34	; 0x22
 80049ee:	d151      	bne.n	8004a94 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80049f6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80049fe:	89ba      	ldrh	r2, [r7, #12]
 8004a00:	89fb      	ldrh	r3, [r7, #14]
 8004a02:	4013      	ands	r3, r2
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0e:	1c9a      	adds	r2, r3, #2
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d138      	bne.n	8004aa4 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a40:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0201 	bic.w	r2, r2, #1
 8004a50:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d10f      	bne.n	8004a86 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0210 	bic.w	r2, r2, #16
 8004a74:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff faae 	bl	8003fe0 <HAL_UARTEx_RxEventCallback>
 8004a84:	e002      	b.n	8004a8c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fc fbf4 	bl	8001274 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a92:	e007      	b.n	8004aa4 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0208 	orr.w	r2, r2, #8
 8004aa2:	619a      	str	r2, [r3, #24]
}
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <__errno>:
 8004ac0:	4b01      	ldr	r3, [pc, #4]	; (8004ac8 <__errno+0x8>)
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000010 	.word	0x20000010

08004acc <__libc_init_array>:
 8004acc:	b570      	push	{r4, r5, r6, lr}
 8004ace:	4e0d      	ldr	r6, [pc, #52]	; (8004b04 <__libc_init_array+0x38>)
 8004ad0:	4c0d      	ldr	r4, [pc, #52]	; (8004b08 <__libc_init_array+0x3c>)
 8004ad2:	1ba4      	subs	r4, r4, r6
 8004ad4:	10a4      	asrs	r4, r4, #2
 8004ad6:	2500      	movs	r5, #0
 8004ad8:	42a5      	cmp	r5, r4
 8004ada:	d109      	bne.n	8004af0 <__libc_init_array+0x24>
 8004adc:	4e0b      	ldr	r6, [pc, #44]	; (8004b0c <__libc_init_array+0x40>)
 8004ade:	4c0c      	ldr	r4, [pc, #48]	; (8004b10 <__libc_init_array+0x44>)
 8004ae0:	f002 f85e 	bl	8006ba0 <_init>
 8004ae4:	1ba4      	subs	r4, r4, r6
 8004ae6:	10a4      	asrs	r4, r4, #2
 8004ae8:	2500      	movs	r5, #0
 8004aea:	42a5      	cmp	r5, r4
 8004aec:	d105      	bne.n	8004afa <__libc_init_array+0x2e>
 8004aee:	bd70      	pop	{r4, r5, r6, pc}
 8004af0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004af4:	4798      	blx	r3
 8004af6:	3501      	adds	r5, #1
 8004af8:	e7ee      	b.n	8004ad8 <__libc_init_array+0xc>
 8004afa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004afe:	4798      	blx	r3
 8004b00:	3501      	adds	r5, #1
 8004b02:	e7f2      	b.n	8004aea <__libc_init_array+0x1e>
 8004b04:	08006ec0 	.word	0x08006ec0
 8004b08:	08006ec0 	.word	0x08006ec0
 8004b0c:	08006ec0 	.word	0x08006ec0
 8004b10:	08006ec4 	.word	0x08006ec4

08004b14 <memset>:
 8004b14:	4402      	add	r2, r0
 8004b16:	4603      	mov	r3, r0
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d100      	bne.n	8004b1e <memset+0xa>
 8004b1c:	4770      	bx	lr
 8004b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b22:	e7f9      	b.n	8004b18 <memset+0x4>

08004b24 <__cvt>:
 8004b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b28:	ec55 4b10 	vmov	r4, r5, d0
 8004b2c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004b2e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b32:	2d00      	cmp	r5, #0
 8004b34:	460e      	mov	r6, r1
 8004b36:	4691      	mov	r9, r2
 8004b38:	4619      	mov	r1, r3
 8004b3a:	bfb8      	it	lt
 8004b3c:	4622      	movlt	r2, r4
 8004b3e:	462b      	mov	r3, r5
 8004b40:	f027 0720 	bic.w	r7, r7, #32
 8004b44:	bfbb      	ittet	lt
 8004b46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b4a:	461d      	movlt	r5, r3
 8004b4c:	2300      	movge	r3, #0
 8004b4e:	232d      	movlt	r3, #45	; 0x2d
 8004b50:	bfb8      	it	lt
 8004b52:	4614      	movlt	r4, r2
 8004b54:	2f46      	cmp	r7, #70	; 0x46
 8004b56:	700b      	strb	r3, [r1, #0]
 8004b58:	d004      	beq.n	8004b64 <__cvt+0x40>
 8004b5a:	2f45      	cmp	r7, #69	; 0x45
 8004b5c:	d100      	bne.n	8004b60 <__cvt+0x3c>
 8004b5e:	3601      	adds	r6, #1
 8004b60:	2102      	movs	r1, #2
 8004b62:	e000      	b.n	8004b66 <__cvt+0x42>
 8004b64:	2103      	movs	r1, #3
 8004b66:	ab03      	add	r3, sp, #12
 8004b68:	9301      	str	r3, [sp, #4]
 8004b6a:	ab02      	add	r3, sp, #8
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	4632      	mov	r2, r6
 8004b70:	4653      	mov	r3, sl
 8004b72:	ec45 4b10 	vmov	d0, r4, r5
 8004b76:	f000 fcdf 	bl	8005538 <_dtoa_r>
 8004b7a:	2f47      	cmp	r7, #71	; 0x47
 8004b7c:	4680      	mov	r8, r0
 8004b7e:	d102      	bne.n	8004b86 <__cvt+0x62>
 8004b80:	f019 0f01 	tst.w	r9, #1
 8004b84:	d026      	beq.n	8004bd4 <__cvt+0xb0>
 8004b86:	2f46      	cmp	r7, #70	; 0x46
 8004b88:	eb08 0906 	add.w	r9, r8, r6
 8004b8c:	d111      	bne.n	8004bb2 <__cvt+0x8e>
 8004b8e:	f898 3000 	ldrb.w	r3, [r8]
 8004b92:	2b30      	cmp	r3, #48	; 0x30
 8004b94:	d10a      	bne.n	8004bac <__cvt+0x88>
 8004b96:	2200      	movs	r2, #0
 8004b98:	2300      	movs	r3, #0
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	4629      	mov	r1, r5
 8004b9e:	f7fb ff93 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ba2:	b918      	cbnz	r0, 8004bac <__cvt+0x88>
 8004ba4:	f1c6 0601 	rsb	r6, r6, #1
 8004ba8:	f8ca 6000 	str.w	r6, [sl]
 8004bac:	f8da 3000 	ldr.w	r3, [sl]
 8004bb0:	4499      	add	r9, r3
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	4629      	mov	r1, r5
 8004bba:	f7fb ff85 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bbe:	b938      	cbnz	r0, 8004bd0 <__cvt+0xac>
 8004bc0:	2230      	movs	r2, #48	; 0x30
 8004bc2:	9b03      	ldr	r3, [sp, #12]
 8004bc4:	454b      	cmp	r3, r9
 8004bc6:	d205      	bcs.n	8004bd4 <__cvt+0xb0>
 8004bc8:	1c59      	adds	r1, r3, #1
 8004bca:	9103      	str	r1, [sp, #12]
 8004bcc:	701a      	strb	r2, [r3, #0]
 8004bce:	e7f8      	b.n	8004bc2 <__cvt+0x9e>
 8004bd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004bd4:	9b03      	ldr	r3, [sp, #12]
 8004bd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bd8:	eba3 0308 	sub.w	r3, r3, r8
 8004bdc:	4640      	mov	r0, r8
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	b004      	add	sp, #16
 8004be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004be6 <__exponent>:
 8004be6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004be8:	2900      	cmp	r1, #0
 8004bea:	4604      	mov	r4, r0
 8004bec:	bfba      	itte	lt
 8004bee:	4249      	neglt	r1, r1
 8004bf0:	232d      	movlt	r3, #45	; 0x2d
 8004bf2:	232b      	movge	r3, #43	; 0x2b
 8004bf4:	2909      	cmp	r1, #9
 8004bf6:	f804 2b02 	strb.w	r2, [r4], #2
 8004bfa:	7043      	strb	r3, [r0, #1]
 8004bfc:	dd20      	ble.n	8004c40 <__exponent+0x5a>
 8004bfe:	f10d 0307 	add.w	r3, sp, #7
 8004c02:	461f      	mov	r7, r3
 8004c04:	260a      	movs	r6, #10
 8004c06:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c0a:	fb06 1115 	mls	r1, r6, r5, r1
 8004c0e:	3130      	adds	r1, #48	; 0x30
 8004c10:	2d09      	cmp	r5, #9
 8004c12:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c16:	f103 32ff 	add.w	r2, r3, #4294967295
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	dc09      	bgt.n	8004c32 <__exponent+0x4c>
 8004c1e:	3130      	adds	r1, #48	; 0x30
 8004c20:	3b02      	subs	r3, #2
 8004c22:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004c26:	42bb      	cmp	r3, r7
 8004c28:	4622      	mov	r2, r4
 8004c2a:	d304      	bcc.n	8004c36 <__exponent+0x50>
 8004c2c:	1a10      	subs	r0, r2, r0
 8004c2e:	b003      	add	sp, #12
 8004c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c32:	4613      	mov	r3, r2
 8004c34:	e7e7      	b.n	8004c06 <__exponent+0x20>
 8004c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c3a:	f804 2b01 	strb.w	r2, [r4], #1
 8004c3e:	e7f2      	b.n	8004c26 <__exponent+0x40>
 8004c40:	2330      	movs	r3, #48	; 0x30
 8004c42:	4419      	add	r1, r3
 8004c44:	7083      	strb	r3, [r0, #2]
 8004c46:	1d02      	adds	r2, r0, #4
 8004c48:	70c1      	strb	r1, [r0, #3]
 8004c4a:	e7ef      	b.n	8004c2c <__exponent+0x46>

08004c4c <_printf_float>:
 8004c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c50:	b08d      	sub	sp, #52	; 0x34
 8004c52:	460c      	mov	r4, r1
 8004c54:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004c58:	4616      	mov	r6, r2
 8004c5a:	461f      	mov	r7, r3
 8004c5c:	4605      	mov	r5, r0
 8004c5e:	f001 fa23 	bl	80060a8 <_localeconv_r>
 8004c62:	6803      	ldr	r3, [r0, #0]
 8004c64:	9304      	str	r3, [sp, #16]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fb fab2 	bl	80001d0 <strlen>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c70:	f8d8 3000 	ldr.w	r3, [r8]
 8004c74:	9005      	str	r0, [sp, #20]
 8004c76:	3307      	adds	r3, #7
 8004c78:	f023 0307 	bic.w	r3, r3, #7
 8004c7c:	f103 0208 	add.w	r2, r3, #8
 8004c80:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c84:	f8d4 b000 	ldr.w	fp, [r4]
 8004c88:	f8c8 2000 	str.w	r2, [r8]
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c94:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004c98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c9c:	9307      	str	r3, [sp, #28]
 8004c9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca6:	4ba7      	ldr	r3, [pc, #668]	; (8004f44 <_printf_float+0x2f8>)
 8004ca8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cac:	f7fb ff3e 	bl	8000b2c <__aeabi_dcmpun>
 8004cb0:	bb70      	cbnz	r0, 8004d10 <_printf_float+0xc4>
 8004cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb6:	4ba3      	ldr	r3, [pc, #652]	; (8004f44 <_printf_float+0x2f8>)
 8004cb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cbc:	f7fb ff18 	bl	8000af0 <__aeabi_dcmple>
 8004cc0:	bb30      	cbnz	r0, 8004d10 <_printf_float+0xc4>
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	4649      	mov	r1, r9
 8004cca:	f7fb ff07 	bl	8000adc <__aeabi_dcmplt>
 8004cce:	b110      	cbz	r0, 8004cd6 <_printf_float+0x8a>
 8004cd0:	232d      	movs	r3, #45	; 0x2d
 8004cd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cd6:	4a9c      	ldr	r2, [pc, #624]	; (8004f48 <_printf_float+0x2fc>)
 8004cd8:	4b9c      	ldr	r3, [pc, #624]	; (8004f4c <_printf_float+0x300>)
 8004cda:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004cde:	bf8c      	ite	hi
 8004ce0:	4690      	movhi	r8, r2
 8004ce2:	4698      	movls	r8, r3
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	f02b 0204 	bic.w	r2, fp, #4
 8004cea:	6123      	str	r3, [r4, #16]
 8004cec:	6022      	str	r2, [r4, #0]
 8004cee:	f04f 0900 	mov.w	r9, #0
 8004cf2:	9700      	str	r7, [sp, #0]
 8004cf4:	4633      	mov	r3, r6
 8004cf6:	aa0b      	add	r2, sp, #44	; 0x2c
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f000 f9e6 	bl	80050cc <_printf_common>
 8004d00:	3001      	adds	r0, #1
 8004d02:	f040 808d 	bne.w	8004e20 <_printf_float+0x1d4>
 8004d06:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0a:	b00d      	add	sp, #52	; 0x34
 8004d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d10:	4642      	mov	r2, r8
 8004d12:	464b      	mov	r3, r9
 8004d14:	4640      	mov	r0, r8
 8004d16:	4649      	mov	r1, r9
 8004d18:	f7fb ff08 	bl	8000b2c <__aeabi_dcmpun>
 8004d1c:	b110      	cbz	r0, 8004d24 <_printf_float+0xd8>
 8004d1e:	4a8c      	ldr	r2, [pc, #560]	; (8004f50 <_printf_float+0x304>)
 8004d20:	4b8c      	ldr	r3, [pc, #560]	; (8004f54 <_printf_float+0x308>)
 8004d22:	e7da      	b.n	8004cda <_printf_float+0x8e>
 8004d24:	6861      	ldr	r1, [r4, #4]
 8004d26:	1c4b      	adds	r3, r1, #1
 8004d28:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004d2c:	a80a      	add	r0, sp, #40	; 0x28
 8004d2e:	d13e      	bne.n	8004dae <_printf_float+0x162>
 8004d30:	2306      	movs	r3, #6
 8004d32:	6063      	str	r3, [r4, #4]
 8004d34:	2300      	movs	r3, #0
 8004d36:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004d3a:	ab09      	add	r3, sp, #36	; 0x24
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	ec49 8b10 	vmov	d0, r8, r9
 8004d42:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d46:	6022      	str	r2, [r4, #0]
 8004d48:	f8cd a004 	str.w	sl, [sp, #4]
 8004d4c:	6861      	ldr	r1, [r4, #4]
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f7ff fee8 	bl	8004b24 <__cvt>
 8004d54:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004d58:	2b47      	cmp	r3, #71	; 0x47
 8004d5a:	4680      	mov	r8, r0
 8004d5c:	d109      	bne.n	8004d72 <_printf_float+0x126>
 8004d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d60:	1cd8      	adds	r0, r3, #3
 8004d62:	db02      	blt.n	8004d6a <_printf_float+0x11e>
 8004d64:	6862      	ldr	r2, [r4, #4]
 8004d66:	4293      	cmp	r3, r2
 8004d68:	dd47      	ble.n	8004dfa <_printf_float+0x1ae>
 8004d6a:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d6e:	fa5f fa8a 	uxtb.w	sl, sl
 8004d72:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004d76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d78:	d824      	bhi.n	8004dc4 <_printf_float+0x178>
 8004d7a:	3901      	subs	r1, #1
 8004d7c:	4652      	mov	r2, sl
 8004d7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d82:	9109      	str	r1, [sp, #36]	; 0x24
 8004d84:	f7ff ff2f 	bl	8004be6 <__exponent>
 8004d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d8a:	1813      	adds	r3, r2, r0
 8004d8c:	2a01      	cmp	r2, #1
 8004d8e:	4681      	mov	r9, r0
 8004d90:	6123      	str	r3, [r4, #16]
 8004d92:	dc02      	bgt.n	8004d9a <_printf_float+0x14e>
 8004d94:	6822      	ldr	r2, [r4, #0]
 8004d96:	07d1      	lsls	r1, r2, #31
 8004d98:	d501      	bpl.n	8004d9e <_printf_float+0x152>
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	6123      	str	r3, [r4, #16]
 8004d9e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0a5      	beq.n	8004cf2 <_printf_float+0xa6>
 8004da6:	232d      	movs	r3, #45	; 0x2d
 8004da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dac:	e7a1      	b.n	8004cf2 <_printf_float+0xa6>
 8004dae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004db2:	f000 8177 	beq.w	80050a4 <_printf_float+0x458>
 8004db6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004dba:	d1bb      	bne.n	8004d34 <_printf_float+0xe8>
 8004dbc:	2900      	cmp	r1, #0
 8004dbe:	d1b9      	bne.n	8004d34 <_printf_float+0xe8>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e7b6      	b.n	8004d32 <_printf_float+0xe6>
 8004dc4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004dc8:	d119      	bne.n	8004dfe <_printf_float+0x1b2>
 8004dca:	2900      	cmp	r1, #0
 8004dcc:	6863      	ldr	r3, [r4, #4]
 8004dce:	dd0c      	ble.n	8004dea <_printf_float+0x19e>
 8004dd0:	6121      	str	r1, [r4, #16]
 8004dd2:	b913      	cbnz	r3, 8004dda <_printf_float+0x18e>
 8004dd4:	6822      	ldr	r2, [r4, #0]
 8004dd6:	07d2      	lsls	r2, r2, #31
 8004dd8:	d502      	bpl.n	8004de0 <_printf_float+0x194>
 8004dda:	3301      	adds	r3, #1
 8004ddc:	440b      	add	r3, r1
 8004dde:	6123      	str	r3, [r4, #16]
 8004de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de2:	65a3      	str	r3, [r4, #88]	; 0x58
 8004de4:	f04f 0900 	mov.w	r9, #0
 8004de8:	e7d9      	b.n	8004d9e <_printf_float+0x152>
 8004dea:	b913      	cbnz	r3, 8004df2 <_printf_float+0x1a6>
 8004dec:	6822      	ldr	r2, [r4, #0]
 8004dee:	07d0      	lsls	r0, r2, #31
 8004df0:	d501      	bpl.n	8004df6 <_printf_float+0x1aa>
 8004df2:	3302      	adds	r3, #2
 8004df4:	e7f3      	b.n	8004dde <_printf_float+0x192>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e7f1      	b.n	8004dde <_printf_float+0x192>
 8004dfa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004dfe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e02:	4293      	cmp	r3, r2
 8004e04:	db05      	blt.n	8004e12 <_printf_float+0x1c6>
 8004e06:	6822      	ldr	r2, [r4, #0]
 8004e08:	6123      	str	r3, [r4, #16]
 8004e0a:	07d1      	lsls	r1, r2, #31
 8004e0c:	d5e8      	bpl.n	8004de0 <_printf_float+0x194>
 8004e0e:	3301      	adds	r3, #1
 8004e10:	e7e5      	b.n	8004dde <_printf_float+0x192>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	bfd4      	ite	le
 8004e16:	f1c3 0302 	rsble	r3, r3, #2
 8004e1a:	2301      	movgt	r3, #1
 8004e1c:	4413      	add	r3, r2
 8004e1e:	e7de      	b.n	8004dde <_printf_float+0x192>
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	055a      	lsls	r2, r3, #21
 8004e24:	d407      	bmi.n	8004e36 <_printf_float+0x1ea>
 8004e26:	6923      	ldr	r3, [r4, #16]
 8004e28:	4642      	mov	r2, r8
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	47b8      	blx	r7
 8004e30:	3001      	adds	r0, #1
 8004e32:	d12b      	bne.n	8004e8c <_printf_float+0x240>
 8004e34:	e767      	b.n	8004d06 <_printf_float+0xba>
 8004e36:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004e3a:	f240 80dc 	bls.w	8004ff6 <_printf_float+0x3aa>
 8004e3e:	2200      	movs	r2, #0
 8004e40:	2300      	movs	r3, #0
 8004e42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e46:	f7fb fe3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d033      	beq.n	8004eb6 <_printf_float+0x26a>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	4a41      	ldr	r2, [pc, #260]	; (8004f58 <_printf_float+0x30c>)
 8004e52:	4631      	mov	r1, r6
 8004e54:	4628      	mov	r0, r5
 8004e56:	47b8      	blx	r7
 8004e58:	3001      	adds	r0, #1
 8004e5a:	f43f af54 	beq.w	8004d06 <_printf_float+0xba>
 8004e5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e62:	429a      	cmp	r2, r3
 8004e64:	db02      	blt.n	8004e6c <_printf_float+0x220>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	07d8      	lsls	r0, r3, #31
 8004e6a:	d50f      	bpl.n	8004e8c <_printf_float+0x240>
 8004e6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e70:	4631      	mov	r1, r6
 8004e72:	4628      	mov	r0, r5
 8004e74:	47b8      	blx	r7
 8004e76:	3001      	adds	r0, #1
 8004e78:	f43f af45 	beq.w	8004d06 <_printf_float+0xba>
 8004e7c:	f04f 0800 	mov.w	r8, #0
 8004e80:	f104 091a 	add.w	r9, r4, #26
 8004e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e86:	3b01      	subs	r3, #1
 8004e88:	4543      	cmp	r3, r8
 8004e8a:	dc09      	bgt.n	8004ea0 <_printf_float+0x254>
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	079b      	lsls	r3, r3, #30
 8004e90:	f100 8103 	bmi.w	800509a <_printf_float+0x44e>
 8004e94:	68e0      	ldr	r0, [r4, #12]
 8004e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e98:	4298      	cmp	r0, r3
 8004e9a:	bfb8      	it	lt
 8004e9c:	4618      	movlt	r0, r3
 8004e9e:	e734      	b.n	8004d0a <_printf_float+0xbe>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	464a      	mov	r2, r9
 8004ea4:	4631      	mov	r1, r6
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	47b8      	blx	r7
 8004eaa:	3001      	adds	r0, #1
 8004eac:	f43f af2b 	beq.w	8004d06 <_printf_float+0xba>
 8004eb0:	f108 0801 	add.w	r8, r8, #1
 8004eb4:	e7e6      	b.n	8004e84 <_printf_float+0x238>
 8004eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	dc2b      	bgt.n	8004f14 <_printf_float+0x2c8>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	4a26      	ldr	r2, [pc, #152]	; (8004f58 <_printf_float+0x30c>)
 8004ec0:	4631      	mov	r1, r6
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	47b8      	blx	r7
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	f43f af1d 	beq.w	8004d06 <_printf_float+0xba>
 8004ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ece:	b923      	cbnz	r3, 8004eda <_printf_float+0x28e>
 8004ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ed2:	b913      	cbnz	r3, 8004eda <_printf_float+0x28e>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	07d9      	lsls	r1, r3, #31
 8004ed8:	d5d8      	bpl.n	8004e8c <_printf_float+0x240>
 8004eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ede:	4631      	mov	r1, r6
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	47b8      	blx	r7
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	f43f af0e 	beq.w	8004d06 <_printf_float+0xba>
 8004eea:	f04f 0900 	mov.w	r9, #0
 8004eee:	f104 0a1a 	add.w	sl, r4, #26
 8004ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef4:	425b      	negs	r3, r3
 8004ef6:	454b      	cmp	r3, r9
 8004ef8:	dc01      	bgt.n	8004efe <_printf_float+0x2b2>
 8004efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004efc:	e794      	b.n	8004e28 <_printf_float+0x1dc>
 8004efe:	2301      	movs	r3, #1
 8004f00:	4652      	mov	r2, sl
 8004f02:	4631      	mov	r1, r6
 8004f04:	4628      	mov	r0, r5
 8004f06:	47b8      	blx	r7
 8004f08:	3001      	adds	r0, #1
 8004f0a:	f43f aefc 	beq.w	8004d06 <_printf_float+0xba>
 8004f0e:	f109 0901 	add.w	r9, r9, #1
 8004f12:	e7ee      	b.n	8004ef2 <_printf_float+0x2a6>
 8004f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	bfa8      	it	ge
 8004f1c:	461a      	movge	r2, r3
 8004f1e:	2a00      	cmp	r2, #0
 8004f20:	4691      	mov	r9, r2
 8004f22:	dd07      	ble.n	8004f34 <_printf_float+0x2e8>
 8004f24:	4613      	mov	r3, r2
 8004f26:	4631      	mov	r1, r6
 8004f28:	4642      	mov	r2, r8
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	47b8      	blx	r7
 8004f2e:	3001      	adds	r0, #1
 8004f30:	f43f aee9 	beq.w	8004d06 <_printf_float+0xba>
 8004f34:	f104 031a 	add.w	r3, r4, #26
 8004f38:	f04f 0b00 	mov.w	fp, #0
 8004f3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f40:	9306      	str	r3, [sp, #24]
 8004f42:	e015      	b.n	8004f70 <_printf_float+0x324>
 8004f44:	7fefffff 	.word	0x7fefffff
 8004f48:	08006c68 	.word	0x08006c68
 8004f4c:	08006c64 	.word	0x08006c64
 8004f50:	08006c70 	.word	0x08006c70
 8004f54:	08006c6c 	.word	0x08006c6c
 8004f58:	08006c74 	.word	0x08006c74
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	9a06      	ldr	r2, [sp, #24]
 8004f60:	4631      	mov	r1, r6
 8004f62:	4628      	mov	r0, r5
 8004f64:	47b8      	blx	r7
 8004f66:	3001      	adds	r0, #1
 8004f68:	f43f aecd 	beq.w	8004d06 <_printf_float+0xba>
 8004f6c:	f10b 0b01 	add.w	fp, fp, #1
 8004f70:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004f74:	ebaa 0309 	sub.w	r3, sl, r9
 8004f78:	455b      	cmp	r3, fp
 8004f7a:	dcef      	bgt.n	8004f5c <_printf_float+0x310>
 8004f7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f80:	429a      	cmp	r2, r3
 8004f82:	44d0      	add	r8, sl
 8004f84:	db15      	blt.n	8004fb2 <_printf_float+0x366>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	07da      	lsls	r2, r3, #31
 8004f8a:	d412      	bmi.n	8004fb2 <_printf_float+0x366>
 8004f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f90:	eba3 020a 	sub.w	r2, r3, sl
 8004f94:	eba3 0a01 	sub.w	sl, r3, r1
 8004f98:	4592      	cmp	sl, r2
 8004f9a:	bfa8      	it	ge
 8004f9c:	4692      	movge	sl, r2
 8004f9e:	f1ba 0f00 	cmp.w	sl, #0
 8004fa2:	dc0e      	bgt.n	8004fc2 <_printf_float+0x376>
 8004fa4:	f04f 0800 	mov.w	r8, #0
 8004fa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004fac:	f104 091a 	add.w	r9, r4, #26
 8004fb0:	e019      	b.n	8004fe6 <_printf_float+0x39a>
 8004fb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fb6:	4631      	mov	r1, r6
 8004fb8:	4628      	mov	r0, r5
 8004fba:	47b8      	blx	r7
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	d1e5      	bne.n	8004f8c <_printf_float+0x340>
 8004fc0:	e6a1      	b.n	8004d06 <_printf_float+0xba>
 8004fc2:	4653      	mov	r3, sl
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	4628      	mov	r0, r5
 8004fca:	47b8      	blx	r7
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d1e9      	bne.n	8004fa4 <_printf_float+0x358>
 8004fd0:	e699      	b.n	8004d06 <_printf_float+0xba>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	464a      	mov	r2, r9
 8004fd6:	4631      	mov	r1, r6
 8004fd8:	4628      	mov	r0, r5
 8004fda:	47b8      	blx	r7
 8004fdc:	3001      	adds	r0, #1
 8004fde:	f43f ae92 	beq.w	8004d06 <_printf_float+0xba>
 8004fe2:	f108 0801 	add.w	r8, r8, #1
 8004fe6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fea:	1a9b      	subs	r3, r3, r2
 8004fec:	eba3 030a 	sub.w	r3, r3, sl
 8004ff0:	4543      	cmp	r3, r8
 8004ff2:	dcee      	bgt.n	8004fd2 <_printf_float+0x386>
 8004ff4:	e74a      	b.n	8004e8c <_printf_float+0x240>
 8004ff6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ff8:	2a01      	cmp	r2, #1
 8004ffa:	dc01      	bgt.n	8005000 <_printf_float+0x3b4>
 8004ffc:	07db      	lsls	r3, r3, #31
 8004ffe:	d53a      	bpl.n	8005076 <_printf_float+0x42a>
 8005000:	2301      	movs	r3, #1
 8005002:	4642      	mov	r2, r8
 8005004:	4631      	mov	r1, r6
 8005006:	4628      	mov	r0, r5
 8005008:	47b8      	blx	r7
 800500a:	3001      	adds	r0, #1
 800500c:	f43f ae7b 	beq.w	8004d06 <_printf_float+0xba>
 8005010:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005014:	4631      	mov	r1, r6
 8005016:	4628      	mov	r0, r5
 8005018:	47b8      	blx	r7
 800501a:	3001      	adds	r0, #1
 800501c:	f108 0801 	add.w	r8, r8, #1
 8005020:	f43f ae71 	beq.w	8004d06 <_printf_float+0xba>
 8005024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005026:	2200      	movs	r2, #0
 8005028:	f103 3aff 	add.w	sl, r3, #4294967295
 800502c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005030:	2300      	movs	r3, #0
 8005032:	f7fb fd49 	bl	8000ac8 <__aeabi_dcmpeq>
 8005036:	b9c8      	cbnz	r0, 800506c <_printf_float+0x420>
 8005038:	4653      	mov	r3, sl
 800503a:	4642      	mov	r2, r8
 800503c:	4631      	mov	r1, r6
 800503e:	4628      	mov	r0, r5
 8005040:	47b8      	blx	r7
 8005042:	3001      	adds	r0, #1
 8005044:	d10e      	bne.n	8005064 <_printf_float+0x418>
 8005046:	e65e      	b.n	8004d06 <_printf_float+0xba>
 8005048:	2301      	movs	r3, #1
 800504a:	4652      	mov	r2, sl
 800504c:	4631      	mov	r1, r6
 800504e:	4628      	mov	r0, r5
 8005050:	47b8      	blx	r7
 8005052:	3001      	adds	r0, #1
 8005054:	f43f ae57 	beq.w	8004d06 <_printf_float+0xba>
 8005058:	f108 0801 	add.w	r8, r8, #1
 800505c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800505e:	3b01      	subs	r3, #1
 8005060:	4543      	cmp	r3, r8
 8005062:	dcf1      	bgt.n	8005048 <_printf_float+0x3fc>
 8005064:	464b      	mov	r3, r9
 8005066:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800506a:	e6de      	b.n	8004e2a <_printf_float+0x1de>
 800506c:	f04f 0800 	mov.w	r8, #0
 8005070:	f104 0a1a 	add.w	sl, r4, #26
 8005074:	e7f2      	b.n	800505c <_printf_float+0x410>
 8005076:	2301      	movs	r3, #1
 8005078:	e7df      	b.n	800503a <_printf_float+0x3ee>
 800507a:	2301      	movs	r3, #1
 800507c:	464a      	mov	r2, r9
 800507e:	4631      	mov	r1, r6
 8005080:	4628      	mov	r0, r5
 8005082:	47b8      	blx	r7
 8005084:	3001      	adds	r0, #1
 8005086:	f43f ae3e 	beq.w	8004d06 <_printf_float+0xba>
 800508a:	f108 0801 	add.w	r8, r8, #1
 800508e:	68e3      	ldr	r3, [r4, #12]
 8005090:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	4543      	cmp	r3, r8
 8005096:	dcf0      	bgt.n	800507a <_printf_float+0x42e>
 8005098:	e6fc      	b.n	8004e94 <_printf_float+0x248>
 800509a:	f04f 0800 	mov.w	r8, #0
 800509e:	f104 0919 	add.w	r9, r4, #25
 80050a2:	e7f4      	b.n	800508e <_printf_float+0x442>
 80050a4:	2900      	cmp	r1, #0
 80050a6:	f43f ae8b 	beq.w	8004dc0 <_printf_float+0x174>
 80050aa:	2300      	movs	r3, #0
 80050ac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80050b0:	ab09      	add	r3, sp, #36	; 0x24
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	ec49 8b10 	vmov	d0, r8, r9
 80050b8:	6022      	str	r2, [r4, #0]
 80050ba:	f8cd a004 	str.w	sl, [sp, #4]
 80050be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050c2:	4628      	mov	r0, r5
 80050c4:	f7ff fd2e 	bl	8004b24 <__cvt>
 80050c8:	4680      	mov	r8, r0
 80050ca:	e648      	b.n	8004d5e <_printf_float+0x112>

080050cc <_printf_common>:
 80050cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d0:	4691      	mov	r9, r2
 80050d2:	461f      	mov	r7, r3
 80050d4:	688a      	ldr	r2, [r1, #8]
 80050d6:	690b      	ldr	r3, [r1, #16]
 80050d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050dc:	4293      	cmp	r3, r2
 80050de:	bfb8      	it	lt
 80050e0:	4613      	movlt	r3, r2
 80050e2:	f8c9 3000 	str.w	r3, [r9]
 80050e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050ea:	4606      	mov	r6, r0
 80050ec:	460c      	mov	r4, r1
 80050ee:	b112      	cbz	r2, 80050f6 <_printf_common+0x2a>
 80050f0:	3301      	adds	r3, #1
 80050f2:	f8c9 3000 	str.w	r3, [r9]
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	0699      	lsls	r1, r3, #26
 80050fa:	bf42      	ittt	mi
 80050fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005100:	3302      	addmi	r3, #2
 8005102:	f8c9 3000 	strmi.w	r3, [r9]
 8005106:	6825      	ldr	r5, [r4, #0]
 8005108:	f015 0506 	ands.w	r5, r5, #6
 800510c:	d107      	bne.n	800511e <_printf_common+0x52>
 800510e:	f104 0a19 	add.w	sl, r4, #25
 8005112:	68e3      	ldr	r3, [r4, #12]
 8005114:	f8d9 2000 	ldr.w	r2, [r9]
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	42ab      	cmp	r3, r5
 800511c:	dc28      	bgt.n	8005170 <_printf_common+0xa4>
 800511e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005122:	6822      	ldr	r2, [r4, #0]
 8005124:	3300      	adds	r3, #0
 8005126:	bf18      	it	ne
 8005128:	2301      	movne	r3, #1
 800512a:	0692      	lsls	r2, r2, #26
 800512c:	d42d      	bmi.n	800518a <_printf_common+0xbe>
 800512e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005132:	4639      	mov	r1, r7
 8005134:	4630      	mov	r0, r6
 8005136:	47c0      	blx	r8
 8005138:	3001      	adds	r0, #1
 800513a:	d020      	beq.n	800517e <_printf_common+0xb2>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	68e5      	ldr	r5, [r4, #12]
 8005140:	f8d9 2000 	ldr.w	r2, [r9]
 8005144:	f003 0306 	and.w	r3, r3, #6
 8005148:	2b04      	cmp	r3, #4
 800514a:	bf08      	it	eq
 800514c:	1aad      	subeq	r5, r5, r2
 800514e:	68a3      	ldr	r3, [r4, #8]
 8005150:	6922      	ldr	r2, [r4, #16]
 8005152:	bf0c      	ite	eq
 8005154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005158:	2500      	movne	r5, #0
 800515a:	4293      	cmp	r3, r2
 800515c:	bfc4      	itt	gt
 800515e:	1a9b      	subgt	r3, r3, r2
 8005160:	18ed      	addgt	r5, r5, r3
 8005162:	f04f 0900 	mov.w	r9, #0
 8005166:	341a      	adds	r4, #26
 8005168:	454d      	cmp	r5, r9
 800516a:	d11a      	bne.n	80051a2 <_printf_common+0xd6>
 800516c:	2000      	movs	r0, #0
 800516e:	e008      	b.n	8005182 <_printf_common+0xb6>
 8005170:	2301      	movs	r3, #1
 8005172:	4652      	mov	r2, sl
 8005174:	4639      	mov	r1, r7
 8005176:	4630      	mov	r0, r6
 8005178:	47c0      	blx	r8
 800517a:	3001      	adds	r0, #1
 800517c:	d103      	bne.n	8005186 <_printf_common+0xba>
 800517e:	f04f 30ff 	mov.w	r0, #4294967295
 8005182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005186:	3501      	adds	r5, #1
 8005188:	e7c3      	b.n	8005112 <_printf_common+0x46>
 800518a:	18e1      	adds	r1, r4, r3
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	2030      	movs	r0, #48	; 0x30
 8005190:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005194:	4422      	add	r2, r4
 8005196:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800519a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800519e:	3302      	adds	r3, #2
 80051a0:	e7c5      	b.n	800512e <_printf_common+0x62>
 80051a2:	2301      	movs	r3, #1
 80051a4:	4622      	mov	r2, r4
 80051a6:	4639      	mov	r1, r7
 80051a8:	4630      	mov	r0, r6
 80051aa:	47c0      	blx	r8
 80051ac:	3001      	adds	r0, #1
 80051ae:	d0e6      	beq.n	800517e <_printf_common+0xb2>
 80051b0:	f109 0901 	add.w	r9, r9, #1
 80051b4:	e7d8      	b.n	8005168 <_printf_common+0x9c>
	...

080051b8 <_printf_i>:
 80051b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051c0:	460c      	mov	r4, r1
 80051c2:	7e09      	ldrb	r1, [r1, #24]
 80051c4:	b085      	sub	sp, #20
 80051c6:	296e      	cmp	r1, #110	; 0x6e
 80051c8:	4617      	mov	r7, r2
 80051ca:	4606      	mov	r6, r0
 80051cc:	4698      	mov	r8, r3
 80051ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051d0:	f000 80b3 	beq.w	800533a <_printf_i+0x182>
 80051d4:	d822      	bhi.n	800521c <_printf_i+0x64>
 80051d6:	2963      	cmp	r1, #99	; 0x63
 80051d8:	d036      	beq.n	8005248 <_printf_i+0x90>
 80051da:	d80a      	bhi.n	80051f2 <_printf_i+0x3a>
 80051dc:	2900      	cmp	r1, #0
 80051de:	f000 80b9 	beq.w	8005354 <_printf_i+0x19c>
 80051e2:	2958      	cmp	r1, #88	; 0x58
 80051e4:	f000 8083 	beq.w	80052ee <_printf_i+0x136>
 80051e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80051f0:	e032      	b.n	8005258 <_printf_i+0xa0>
 80051f2:	2964      	cmp	r1, #100	; 0x64
 80051f4:	d001      	beq.n	80051fa <_printf_i+0x42>
 80051f6:	2969      	cmp	r1, #105	; 0x69
 80051f8:	d1f6      	bne.n	80051e8 <_printf_i+0x30>
 80051fa:	6820      	ldr	r0, [r4, #0]
 80051fc:	6813      	ldr	r3, [r2, #0]
 80051fe:	0605      	lsls	r5, r0, #24
 8005200:	f103 0104 	add.w	r1, r3, #4
 8005204:	d52a      	bpl.n	800525c <_printf_i+0xa4>
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6011      	str	r1, [r2, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	da03      	bge.n	8005216 <_printf_i+0x5e>
 800520e:	222d      	movs	r2, #45	; 0x2d
 8005210:	425b      	negs	r3, r3
 8005212:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005216:	486f      	ldr	r0, [pc, #444]	; (80053d4 <_printf_i+0x21c>)
 8005218:	220a      	movs	r2, #10
 800521a:	e039      	b.n	8005290 <_printf_i+0xd8>
 800521c:	2973      	cmp	r1, #115	; 0x73
 800521e:	f000 809d 	beq.w	800535c <_printf_i+0x1a4>
 8005222:	d808      	bhi.n	8005236 <_printf_i+0x7e>
 8005224:	296f      	cmp	r1, #111	; 0x6f
 8005226:	d020      	beq.n	800526a <_printf_i+0xb2>
 8005228:	2970      	cmp	r1, #112	; 0x70
 800522a:	d1dd      	bne.n	80051e8 <_printf_i+0x30>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	f043 0320 	orr.w	r3, r3, #32
 8005232:	6023      	str	r3, [r4, #0]
 8005234:	e003      	b.n	800523e <_printf_i+0x86>
 8005236:	2975      	cmp	r1, #117	; 0x75
 8005238:	d017      	beq.n	800526a <_printf_i+0xb2>
 800523a:	2978      	cmp	r1, #120	; 0x78
 800523c:	d1d4      	bne.n	80051e8 <_printf_i+0x30>
 800523e:	2378      	movs	r3, #120	; 0x78
 8005240:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005244:	4864      	ldr	r0, [pc, #400]	; (80053d8 <_printf_i+0x220>)
 8005246:	e055      	b.n	80052f4 <_printf_i+0x13c>
 8005248:	6813      	ldr	r3, [r2, #0]
 800524a:	1d19      	adds	r1, r3, #4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6011      	str	r1, [r2, #0]
 8005250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005258:	2301      	movs	r3, #1
 800525a:	e08c      	b.n	8005376 <_printf_i+0x1be>
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6011      	str	r1, [r2, #0]
 8005260:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005264:	bf18      	it	ne
 8005266:	b21b      	sxthne	r3, r3
 8005268:	e7cf      	b.n	800520a <_printf_i+0x52>
 800526a:	6813      	ldr	r3, [r2, #0]
 800526c:	6825      	ldr	r5, [r4, #0]
 800526e:	1d18      	adds	r0, r3, #4
 8005270:	6010      	str	r0, [r2, #0]
 8005272:	0628      	lsls	r0, r5, #24
 8005274:	d501      	bpl.n	800527a <_printf_i+0xc2>
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	e002      	b.n	8005280 <_printf_i+0xc8>
 800527a:	0668      	lsls	r0, r5, #25
 800527c:	d5fb      	bpl.n	8005276 <_printf_i+0xbe>
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	4854      	ldr	r0, [pc, #336]	; (80053d4 <_printf_i+0x21c>)
 8005282:	296f      	cmp	r1, #111	; 0x6f
 8005284:	bf14      	ite	ne
 8005286:	220a      	movne	r2, #10
 8005288:	2208      	moveq	r2, #8
 800528a:	2100      	movs	r1, #0
 800528c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005290:	6865      	ldr	r5, [r4, #4]
 8005292:	60a5      	str	r5, [r4, #8]
 8005294:	2d00      	cmp	r5, #0
 8005296:	f2c0 8095 	blt.w	80053c4 <_printf_i+0x20c>
 800529a:	6821      	ldr	r1, [r4, #0]
 800529c:	f021 0104 	bic.w	r1, r1, #4
 80052a0:	6021      	str	r1, [r4, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d13d      	bne.n	8005322 <_printf_i+0x16a>
 80052a6:	2d00      	cmp	r5, #0
 80052a8:	f040 808e 	bne.w	80053c8 <_printf_i+0x210>
 80052ac:	4665      	mov	r5, ip
 80052ae:	2a08      	cmp	r2, #8
 80052b0:	d10b      	bne.n	80052ca <_printf_i+0x112>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	07db      	lsls	r3, r3, #31
 80052b6:	d508      	bpl.n	80052ca <_printf_i+0x112>
 80052b8:	6923      	ldr	r3, [r4, #16]
 80052ba:	6862      	ldr	r2, [r4, #4]
 80052bc:	429a      	cmp	r2, r3
 80052be:	bfde      	ittt	le
 80052c0:	2330      	movle	r3, #48	; 0x30
 80052c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052ca:	ebac 0305 	sub.w	r3, ip, r5
 80052ce:	6123      	str	r3, [r4, #16]
 80052d0:	f8cd 8000 	str.w	r8, [sp]
 80052d4:	463b      	mov	r3, r7
 80052d6:	aa03      	add	r2, sp, #12
 80052d8:	4621      	mov	r1, r4
 80052da:	4630      	mov	r0, r6
 80052dc:	f7ff fef6 	bl	80050cc <_printf_common>
 80052e0:	3001      	adds	r0, #1
 80052e2:	d14d      	bne.n	8005380 <_printf_i+0x1c8>
 80052e4:	f04f 30ff 	mov.w	r0, #4294967295
 80052e8:	b005      	add	sp, #20
 80052ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052ee:	4839      	ldr	r0, [pc, #228]	; (80053d4 <_printf_i+0x21c>)
 80052f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80052f4:	6813      	ldr	r3, [r2, #0]
 80052f6:	6821      	ldr	r1, [r4, #0]
 80052f8:	1d1d      	adds	r5, r3, #4
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6015      	str	r5, [r2, #0]
 80052fe:	060a      	lsls	r2, r1, #24
 8005300:	d50b      	bpl.n	800531a <_printf_i+0x162>
 8005302:	07ca      	lsls	r2, r1, #31
 8005304:	bf44      	itt	mi
 8005306:	f041 0120 	orrmi.w	r1, r1, #32
 800530a:	6021      	strmi	r1, [r4, #0]
 800530c:	b91b      	cbnz	r3, 8005316 <_printf_i+0x15e>
 800530e:	6822      	ldr	r2, [r4, #0]
 8005310:	f022 0220 	bic.w	r2, r2, #32
 8005314:	6022      	str	r2, [r4, #0]
 8005316:	2210      	movs	r2, #16
 8005318:	e7b7      	b.n	800528a <_printf_i+0xd2>
 800531a:	064d      	lsls	r5, r1, #25
 800531c:	bf48      	it	mi
 800531e:	b29b      	uxthmi	r3, r3
 8005320:	e7ef      	b.n	8005302 <_printf_i+0x14a>
 8005322:	4665      	mov	r5, ip
 8005324:	fbb3 f1f2 	udiv	r1, r3, r2
 8005328:	fb02 3311 	mls	r3, r2, r1, r3
 800532c:	5cc3      	ldrb	r3, [r0, r3]
 800532e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005332:	460b      	mov	r3, r1
 8005334:	2900      	cmp	r1, #0
 8005336:	d1f5      	bne.n	8005324 <_printf_i+0x16c>
 8005338:	e7b9      	b.n	80052ae <_printf_i+0xf6>
 800533a:	6813      	ldr	r3, [r2, #0]
 800533c:	6825      	ldr	r5, [r4, #0]
 800533e:	6961      	ldr	r1, [r4, #20]
 8005340:	1d18      	adds	r0, r3, #4
 8005342:	6010      	str	r0, [r2, #0]
 8005344:	0628      	lsls	r0, r5, #24
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	d501      	bpl.n	800534e <_printf_i+0x196>
 800534a:	6019      	str	r1, [r3, #0]
 800534c:	e002      	b.n	8005354 <_printf_i+0x19c>
 800534e:	066a      	lsls	r2, r5, #25
 8005350:	d5fb      	bpl.n	800534a <_printf_i+0x192>
 8005352:	8019      	strh	r1, [r3, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	6123      	str	r3, [r4, #16]
 8005358:	4665      	mov	r5, ip
 800535a:	e7b9      	b.n	80052d0 <_printf_i+0x118>
 800535c:	6813      	ldr	r3, [r2, #0]
 800535e:	1d19      	adds	r1, r3, #4
 8005360:	6011      	str	r1, [r2, #0]
 8005362:	681d      	ldr	r5, [r3, #0]
 8005364:	6862      	ldr	r2, [r4, #4]
 8005366:	2100      	movs	r1, #0
 8005368:	4628      	mov	r0, r5
 800536a:	f7fa ff39 	bl	80001e0 <memchr>
 800536e:	b108      	cbz	r0, 8005374 <_printf_i+0x1bc>
 8005370:	1b40      	subs	r0, r0, r5
 8005372:	6060      	str	r0, [r4, #4]
 8005374:	6863      	ldr	r3, [r4, #4]
 8005376:	6123      	str	r3, [r4, #16]
 8005378:	2300      	movs	r3, #0
 800537a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800537e:	e7a7      	b.n	80052d0 <_printf_i+0x118>
 8005380:	6923      	ldr	r3, [r4, #16]
 8005382:	462a      	mov	r2, r5
 8005384:	4639      	mov	r1, r7
 8005386:	4630      	mov	r0, r6
 8005388:	47c0      	blx	r8
 800538a:	3001      	adds	r0, #1
 800538c:	d0aa      	beq.n	80052e4 <_printf_i+0x12c>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	079b      	lsls	r3, r3, #30
 8005392:	d413      	bmi.n	80053bc <_printf_i+0x204>
 8005394:	68e0      	ldr	r0, [r4, #12]
 8005396:	9b03      	ldr	r3, [sp, #12]
 8005398:	4298      	cmp	r0, r3
 800539a:	bfb8      	it	lt
 800539c:	4618      	movlt	r0, r3
 800539e:	e7a3      	b.n	80052e8 <_printf_i+0x130>
 80053a0:	2301      	movs	r3, #1
 80053a2:	464a      	mov	r2, r9
 80053a4:	4639      	mov	r1, r7
 80053a6:	4630      	mov	r0, r6
 80053a8:	47c0      	blx	r8
 80053aa:	3001      	adds	r0, #1
 80053ac:	d09a      	beq.n	80052e4 <_printf_i+0x12c>
 80053ae:	3501      	adds	r5, #1
 80053b0:	68e3      	ldr	r3, [r4, #12]
 80053b2:	9a03      	ldr	r2, [sp, #12]
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	42ab      	cmp	r3, r5
 80053b8:	dcf2      	bgt.n	80053a0 <_printf_i+0x1e8>
 80053ba:	e7eb      	b.n	8005394 <_printf_i+0x1dc>
 80053bc:	2500      	movs	r5, #0
 80053be:	f104 0919 	add.w	r9, r4, #25
 80053c2:	e7f5      	b.n	80053b0 <_printf_i+0x1f8>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1ac      	bne.n	8005322 <_printf_i+0x16a>
 80053c8:	7803      	ldrb	r3, [r0, #0]
 80053ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053d2:	e76c      	b.n	80052ae <_printf_i+0xf6>
 80053d4:	08006c76 	.word	0x08006c76
 80053d8:	08006c87 	.word	0x08006c87

080053dc <siprintf>:
 80053dc:	b40e      	push	{r1, r2, r3}
 80053de:	b500      	push	{lr}
 80053e0:	b09c      	sub	sp, #112	; 0x70
 80053e2:	ab1d      	add	r3, sp, #116	; 0x74
 80053e4:	9002      	str	r0, [sp, #8]
 80053e6:	9006      	str	r0, [sp, #24]
 80053e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053ec:	4809      	ldr	r0, [pc, #36]	; (8005414 <siprintf+0x38>)
 80053ee:	9107      	str	r1, [sp, #28]
 80053f0:	9104      	str	r1, [sp, #16]
 80053f2:	4909      	ldr	r1, [pc, #36]	; (8005418 <siprintf+0x3c>)
 80053f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053f8:	9105      	str	r1, [sp, #20]
 80053fa:	6800      	ldr	r0, [r0, #0]
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	a902      	add	r1, sp, #8
 8005400:	f001 fa5e 	bl	80068c0 <_svfiprintf_r>
 8005404:	9b02      	ldr	r3, [sp, #8]
 8005406:	2200      	movs	r2, #0
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	b01c      	add	sp, #112	; 0x70
 800540c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005410:	b003      	add	sp, #12
 8005412:	4770      	bx	lr
 8005414:	20000010 	.word	0x20000010
 8005418:	ffff0208 	.word	0xffff0208

0800541c <quorem>:
 800541c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005420:	6903      	ldr	r3, [r0, #16]
 8005422:	690c      	ldr	r4, [r1, #16]
 8005424:	42a3      	cmp	r3, r4
 8005426:	4680      	mov	r8, r0
 8005428:	f2c0 8082 	blt.w	8005530 <quorem+0x114>
 800542c:	3c01      	subs	r4, #1
 800542e:	f101 0714 	add.w	r7, r1, #20
 8005432:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005436:	f100 0614 	add.w	r6, r0, #20
 800543a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800543e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005442:	eb06 030c 	add.w	r3, r6, ip
 8005446:	3501      	adds	r5, #1
 8005448:	eb07 090c 	add.w	r9, r7, ip
 800544c:	9301      	str	r3, [sp, #4]
 800544e:	fbb0 f5f5 	udiv	r5, r0, r5
 8005452:	b395      	cbz	r5, 80054ba <quorem+0x9e>
 8005454:	f04f 0a00 	mov.w	sl, #0
 8005458:	4638      	mov	r0, r7
 800545a:	46b6      	mov	lr, r6
 800545c:	46d3      	mov	fp, sl
 800545e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005462:	b293      	uxth	r3, r2
 8005464:	fb05 a303 	mla	r3, r5, r3, sl
 8005468:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800546c:	b29b      	uxth	r3, r3
 800546e:	ebab 0303 	sub.w	r3, fp, r3
 8005472:	0c12      	lsrs	r2, r2, #16
 8005474:	f8de b000 	ldr.w	fp, [lr]
 8005478:	fb05 a202 	mla	r2, r5, r2, sl
 800547c:	fa13 f38b 	uxtah	r3, r3, fp
 8005480:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005484:	fa1f fb82 	uxth.w	fp, r2
 8005488:	f8de 2000 	ldr.w	r2, [lr]
 800548c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005494:	b29b      	uxth	r3, r3
 8005496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800549a:	4581      	cmp	r9, r0
 800549c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80054a0:	f84e 3b04 	str.w	r3, [lr], #4
 80054a4:	d2db      	bcs.n	800545e <quorem+0x42>
 80054a6:	f856 300c 	ldr.w	r3, [r6, ip]
 80054aa:	b933      	cbnz	r3, 80054ba <quorem+0x9e>
 80054ac:	9b01      	ldr	r3, [sp, #4]
 80054ae:	3b04      	subs	r3, #4
 80054b0:	429e      	cmp	r6, r3
 80054b2:	461a      	mov	r2, r3
 80054b4:	d330      	bcc.n	8005518 <quorem+0xfc>
 80054b6:	f8c8 4010 	str.w	r4, [r8, #16]
 80054ba:	4640      	mov	r0, r8
 80054bc:	f001 f82a 	bl	8006514 <__mcmp>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	db25      	blt.n	8005510 <quorem+0xf4>
 80054c4:	3501      	adds	r5, #1
 80054c6:	4630      	mov	r0, r6
 80054c8:	f04f 0c00 	mov.w	ip, #0
 80054cc:	f857 2b04 	ldr.w	r2, [r7], #4
 80054d0:	f8d0 e000 	ldr.w	lr, [r0]
 80054d4:	b293      	uxth	r3, r2
 80054d6:	ebac 0303 	sub.w	r3, ip, r3
 80054da:	0c12      	lsrs	r2, r2, #16
 80054dc:	fa13 f38e 	uxtah	r3, r3, lr
 80054e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80054e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054ee:	45b9      	cmp	r9, r7
 80054f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80054f4:	f840 3b04 	str.w	r3, [r0], #4
 80054f8:	d2e8      	bcs.n	80054cc <quorem+0xb0>
 80054fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80054fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005502:	b92a      	cbnz	r2, 8005510 <quorem+0xf4>
 8005504:	3b04      	subs	r3, #4
 8005506:	429e      	cmp	r6, r3
 8005508:	461a      	mov	r2, r3
 800550a:	d30b      	bcc.n	8005524 <quorem+0x108>
 800550c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005510:	4628      	mov	r0, r5
 8005512:	b003      	add	sp, #12
 8005514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005518:	6812      	ldr	r2, [r2, #0]
 800551a:	3b04      	subs	r3, #4
 800551c:	2a00      	cmp	r2, #0
 800551e:	d1ca      	bne.n	80054b6 <quorem+0x9a>
 8005520:	3c01      	subs	r4, #1
 8005522:	e7c5      	b.n	80054b0 <quorem+0x94>
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	3b04      	subs	r3, #4
 8005528:	2a00      	cmp	r2, #0
 800552a:	d1ef      	bne.n	800550c <quorem+0xf0>
 800552c:	3c01      	subs	r4, #1
 800552e:	e7ea      	b.n	8005506 <quorem+0xea>
 8005530:	2000      	movs	r0, #0
 8005532:	e7ee      	b.n	8005512 <quorem+0xf6>
 8005534:	0000      	movs	r0, r0
	...

08005538 <_dtoa_r>:
 8005538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553c:	ec57 6b10 	vmov	r6, r7, d0
 8005540:	b097      	sub	sp, #92	; 0x5c
 8005542:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005544:	9106      	str	r1, [sp, #24]
 8005546:	4604      	mov	r4, r0
 8005548:	920b      	str	r2, [sp, #44]	; 0x2c
 800554a:	9312      	str	r3, [sp, #72]	; 0x48
 800554c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005550:	e9cd 6700 	strd	r6, r7, [sp]
 8005554:	b93d      	cbnz	r5, 8005566 <_dtoa_r+0x2e>
 8005556:	2010      	movs	r0, #16
 8005558:	f000 fdb4 	bl	80060c4 <malloc>
 800555c:	6260      	str	r0, [r4, #36]	; 0x24
 800555e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005562:	6005      	str	r5, [r0, #0]
 8005564:	60c5      	str	r5, [r0, #12]
 8005566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005568:	6819      	ldr	r1, [r3, #0]
 800556a:	b151      	cbz	r1, 8005582 <_dtoa_r+0x4a>
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	604a      	str	r2, [r1, #4]
 8005570:	2301      	movs	r3, #1
 8005572:	4093      	lsls	r3, r2
 8005574:	608b      	str	r3, [r1, #8]
 8005576:	4620      	mov	r0, r4
 8005578:	f000 fdeb 	bl	8006152 <_Bfree>
 800557c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	1e3b      	subs	r3, r7, #0
 8005584:	bfbb      	ittet	lt
 8005586:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800558a:	9301      	strlt	r3, [sp, #4]
 800558c:	2300      	movge	r3, #0
 800558e:	2201      	movlt	r2, #1
 8005590:	bfac      	ite	ge
 8005592:	f8c8 3000 	strge.w	r3, [r8]
 8005596:	f8c8 2000 	strlt.w	r2, [r8]
 800559a:	4baf      	ldr	r3, [pc, #700]	; (8005858 <_dtoa_r+0x320>)
 800559c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80055a0:	ea33 0308 	bics.w	r3, r3, r8
 80055a4:	d114      	bne.n	80055d0 <_dtoa_r+0x98>
 80055a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	9b00      	ldr	r3, [sp, #0]
 80055b0:	b923      	cbnz	r3, 80055bc <_dtoa_r+0x84>
 80055b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80055b6:	2800      	cmp	r0, #0
 80055b8:	f000 8542 	beq.w	8006040 <_dtoa_r+0xb08>
 80055bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800586c <_dtoa_r+0x334>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 8544 	beq.w	8006050 <_dtoa_r+0xb18>
 80055c8:	f10b 0303 	add.w	r3, fp, #3
 80055cc:	f000 bd3e 	b.w	800604c <_dtoa_r+0xb14>
 80055d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80055d4:	2200      	movs	r2, #0
 80055d6:	2300      	movs	r3, #0
 80055d8:	4630      	mov	r0, r6
 80055da:	4639      	mov	r1, r7
 80055dc:	f7fb fa74 	bl	8000ac8 <__aeabi_dcmpeq>
 80055e0:	4681      	mov	r9, r0
 80055e2:	b168      	cbz	r0, 8005600 <_dtoa_r+0xc8>
 80055e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055e6:	2301      	movs	r3, #1
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 8524 	beq.w	800603a <_dtoa_r+0xb02>
 80055f2:	4b9a      	ldr	r3, [pc, #616]	; (800585c <_dtoa_r+0x324>)
 80055f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80055f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	f000 bd28 	b.w	8006050 <_dtoa_r+0xb18>
 8005600:	aa14      	add	r2, sp, #80	; 0x50
 8005602:	a915      	add	r1, sp, #84	; 0x54
 8005604:	ec47 6b10 	vmov	d0, r6, r7
 8005608:	4620      	mov	r0, r4
 800560a:	f000 fffa 	bl	8006602 <__d2b>
 800560e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005612:	9004      	str	r0, [sp, #16]
 8005614:	2d00      	cmp	r5, #0
 8005616:	d07c      	beq.n	8005712 <_dtoa_r+0x1da>
 8005618:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800561c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005620:	46b2      	mov	sl, r6
 8005622:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005626:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800562a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800562e:	2200      	movs	r2, #0
 8005630:	4b8b      	ldr	r3, [pc, #556]	; (8005860 <_dtoa_r+0x328>)
 8005632:	4650      	mov	r0, sl
 8005634:	4659      	mov	r1, fp
 8005636:	f7fa fe27 	bl	8000288 <__aeabi_dsub>
 800563a:	a381      	add	r3, pc, #516	; (adr r3, 8005840 <_dtoa_r+0x308>)
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f7fa ffda 	bl	80005f8 <__aeabi_dmul>
 8005644:	a380      	add	r3, pc, #512	; (adr r3, 8005848 <_dtoa_r+0x310>)
 8005646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564a:	f7fa fe1f 	bl	800028c <__adddf3>
 800564e:	4606      	mov	r6, r0
 8005650:	4628      	mov	r0, r5
 8005652:	460f      	mov	r7, r1
 8005654:	f7fa ff66 	bl	8000524 <__aeabi_i2d>
 8005658:	a37d      	add	r3, pc, #500	; (adr r3, 8005850 <_dtoa_r+0x318>)
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	f7fa ffcb 	bl	80005f8 <__aeabi_dmul>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4630      	mov	r0, r6
 8005668:	4639      	mov	r1, r7
 800566a:	f7fa fe0f 	bl	800028c <__adddf3>
 800566e:	4606      	mov	r6, r0
 8005670:	460f      	mov	r7, r1
 8005672:	f7fb fa71 	bl	8000b58 <__aeabi_d2iz>
 8005676:	2200      	movs	r2, #0
 8005678:	4682      	mov	sl, r0
 800567a:	2300      	movs	r3, #0
 800567c:	4630      	mov	r0, r6
 800567e:	4639      	mov	r1, r7
 8005680:	f7fb fa2c 	bl	8000adc <__aeabi_dcmplt>
 8005684:	b148      	cbz	r0, 800569a <_dtoa_r+0x162>
 8005686:	4650      	mov	r0, sl
 8005688:	f7fa ff4c 	bl	8000524 <__aeabi_i2d>
 800568c:	4632      	mov	r2, r6
 800568e:	463b      	mov	r3, r7
 8005690:	f7fb fa1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005694:	b908      	cbnz	r0, 800569a <_dtoa_r+0x162>
 8005696:	f10a 3aff 	add.w	sl, sl, #4294967295
 800569a:	f1ba 0f16 	cmp.w	sl, #22
 800569e:	d859      	bhi.n	8005754 <_dtoa_r+0x21c>
 80056a0:	4970      	ldr	r1, [pc, #448]	; (8005864 <_dtoa_r+0x32c>)
 80056a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80056a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056ae:	f7fb fa33 	bl	8000b18 <__aeabi_dcmpgt>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d050      	beq.n	8005758 <_dtoa_r+0x220>
 80056b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056ba:	2300      	movs	r3, #0
 80056bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80056be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056c0:	1b5d      	subs	r5, r3, r5
 80056c2:	f1b5 0801 	subs.w	r8, r5, #1
 80056c6:	bf49      	itett	mi
 80056c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80056cc:	2300      	movpl	r3, #0
 80056ce:	9305      	strmi	r3, [sp, #20]
 80056d0:	f04f 0800 	movmi.w	r8, #0
 80056d4:	bf58      	it	pl
 80056d6:	9305      	strpl	r3, [sp, #20]
 80056d8:	f1ba 0f00 	cmp.w	sl, #0
 80056dc:	db3e      	blt.n	800575c <_dtoa_r+0x224>
 80056de:	2300      	movs	r3, #0
 80056e0:	44d0      	add	r8, sl
 80056e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80056e6:	9307      	str	r3, [sp, #28]
 80056e8:	9b06      	ldr	r3, [sp, #24]
 80056ea:	2b09      	cmp	r3, #9
 80056ec:	f200 8090 	bhi.w	8005810 <_dtoa_r+0x2d8>
 80056f0:	2b05      	cmp	r3, #5
 80056f2:	bfc4      	itt	gt
 80056f4:	3b04      	subgt	r3, #4
 80056f6:	9306      	strgt	r3, [sp, #24]
 80056f8:	9b06      	ldr	r3, [sp, #24]
 80056fa:	f1a3 0302 	sub.w	r3, r3, #2
 80056fe:	bfcc      	ite	gt
 8005700:	2500      	movgt	r5, #0
 8005702:	2501      	movle	r5, #1
 8005704:	2b03      	cmp	r3, #3
 8005706:	f200 808f 	bhi.w	8005828 <_dtoa_r+0x2f0>
 800570a:	e8df f003 	tbb	[pc, r3]
 800570e:	7f7d      	.short	0x7f7d
 8005710:	7131      	.short	0x7131
 8005712:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005716:	441d      	add	r5, r3
 8005718:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800571c:	2820      	cmp	r0, #32
 800571e:	dd13      	ble.n	8005748 <_dtoa_r+0x210>
 8005720:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005724:	9b00      	ldr	r3, [sp, #0]
 8005726:	fa08 f800 	lsl.w	r8, r8, r0
 800572a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800572e:	fa23 f000 	lsr.w	r0, r3, r0
 8005732:	ea48 0000 	orr.w	r0, r8, r0
 8005736:	f7fa fee5 	bl	8000504 <__aeabi_ui2d>
 800573a:	2301      	movs	r3, #1
 800573c:	4682      	mov	sl, r0
 800573e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005742:	3d01      	subs	r5, #1
 8005744:	9313      	str	r3, [sp, #76]	; 0x4c
 8005746:	e772      	b.n	800562e <_dtoa_r+0xf6>
 8005748:	9b00      	ldr	r3, [sp, #0]
 800574a:	f1c0 0020 	rsb	r0, r0, #32
 800574e:	fa03 f000 	lsl.w	r0, r3, r0
 8005752:	e7f0      	b.n	8005736 <_dtoa_r+0x1fe>
 8005754:	2301      	movs	r3, #1
 8005756:	e7b1      	b.n	80056bc <_dtoa_r+0x184>
 8005758:	900f      	str	r0, [sp, #60]	; 0x3c
 800575a:	e7b0      	b.n	80056be <_dtoa_r+0x186>
 800575c:	9b05      	ldr	r3, [sp, #20]
 800575e:	eba3 030a 	sub.w	r3, r3, sl
 8005762:	9305      	str	r3, [sp, #20]
 8005764:	f1ca 0300 	rsb	r3, sl, #0
 8005768:	9307      	str	r3, [sp, #28]
 800576a:	2300      	movs	r3, #0
 800576c:	930e      	str	r3, [sp, #56]	; 0x38
 800576e:	e7bb      	b.n	80056e8 <_dtoa_r+0x1b0>
 8005770:	2301      	movs	r3, #1
 8005772:	930a      	str	r3, [sp, #40]	; 0x28
 8005774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005776:	2b00      	cmp	r3, #0
 8005778:	dd59      	ble.n	800582e <_dtoa_r+0x2f6>
 800577a:	9302      	str	r3, [sp, #8]
 800577c:	4699      	mov	r9, r3
 800577e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005780:	2200      	movs	r2, #0
 8005782:	6072      	str	r2, [r6, #4]
 8005784:	2204      	movs	r2, #4
 8005786:	f102 0014 	add.w	r0, r2, #20
 800578a:	4298      	cmp	r0, r3
 800578c:	6871      	ldr	r1, [r6, #4]
 800578e:	d953      	bls.n	8005838 <_dtoa_r+0x300>
 8005790:	4620      	mov	r0, r4
 8005792:	f000 fcaa 	bl	80060ea <_Balloc>
 8005796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005798:	6030      	str	r0, [r6, #0]
 800579a:	f1b9 0f0e 	cmp.w	r9, #14
 800579e:	f8d3 b000 	ldr.w	fp, [r3]
 80057a2:	f200 80e6 	bhi.w	8005972 <_dtoa_r+0x43a>
 80057a6:	2d00      	cmp	r5, #0
 80057a8:	f000 80e3 	beq.w	8005972 <_dtoa_r+0x43a>
 80057ac:	ed9d 7b00 	vldr	d7, [sp]
 80057b0:	f1ba 0f00 	cmp.w	sl, #0
 80057b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80057b8:	dd74      	ble.n	80058a4 <_dtoa_r+0x36c>
 80057ba:	4a2a      	ldr	r2, [pc, #168]	; (8005864 <_dtoa_r+0x32c>)
 80057bc:	f00a 030f 	and.w	r3, sl, #15
 80057c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80057c4:	ed93 7b00 	vldr	d7, [r3]
 80057c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80057cc:	06f0      	lsls	r0, r6, #27
 80057ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80057d2:	d565      	bpl.n	80058a0 <_dtoa_r+0x368>
 80057d4:	4b24      	ldr	r3, [pc, #144]	; (8005868 <_dtoa_r+0x330>)
 80057d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057de:	f7fb f835 	bl	800084c <__aeabi_ddiv>
 80057e2:	e9cd 0100 	strd	r0, r1, [sp]
 80057e6:	f006 060f 	and.w	r6, r6, #15
 80057ea:	2503      	movs	r5, #3
 80057ec:	4f1e      	ldr	r7, [pc, #120]	; (8005868 <_dtoa_r+0x330>)
 80057ee:	e04c      	b.n	800588a <_dtoa_r+0x352>
 80057f0:	2301      	movs	r3, #1
 80057f2:	930a      	str	r3, [sp, #40]	; 0x28
 80057f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057f6:	4453      	add	r3, sl
 80057f8:	f103 0901 	add.w	r9, r3, #1
 80057fc:	9302      	str	r3, [sp, #8]
 80057fe:	464b      	mov	r3, r9
 8005800:	2b01      	cmp	r3, #1
 8005802:	bfb8      	it	lt
 8005804:	2301      	movlt	r3, #1
 8005806:	e7ba      	b.n	800577e <_dtoa_r+0x246>
 8005808:	2300      	movs	r3, #0
 800580a:	e7b2      	b.n	8005772 <_dtoa_r+0x23a>
 800580c:	2300      	movs	r3, #0
 800580e:	e7f0      	b.n	80057f2 <_dtoa_r+0x2ba>
 8005810:	2501      	movs	r5, #1
 8005812:	2300      	movs	r3, #0
 8005814:	9306      	str	r3, [sp, #24]
 8005816:	950a      	str	r5, [sp, #40]	; 0x28
 8005818:	f04f 33ff 	mov.w	r3, #4294967295
 800581c:	9302      	str	r3, [sp, #8]
 800581e:	4699      	mov	r9, r3
 8005820:	2200      	movs	r2, #0
 8005822:	2312      	movs	r3, #18
 8005824:	920b      	str	r2, [sp, #44]	; 0x2c
 8005826:	e7aa      	b.n	800577e <_dtoa_r+0x246>
 8005828:	2301      	movs	r3, #1
 800582a:	930a      	str	r3, [sp, #40]	; 0x28
 800582c:	e7f4      	b.n	8005818 <_dtoa_r+0x2e0>
 800582e:	2301      	movs	r3, #1
 8005830:	9302      	str	r3, [sp, #8]
 8005832:	4699      	mov	r9, r3
 8005834:	461a      	mov	r2, r3
 8005836:	e7f5      	b.n	8005824 <_dtoa_r+0x2ec>
 8005838:	3101      	adds	r1, #1
 800583a:	6071      	str	r1, [r6, #4]
 800583c:	0052      	lsls	r2, r2, #1
 800583e:	e7a2      	b.n	8005786 <_dtoa_r+0x24e>
 8005840:	636f4361 	.word	0x636f4361
 8005844:	3fd287a7 	.word	0x3fd287a7
 8005848:	8b60c8b3 	.word	0x8b60c8b3
 800584c:	3fc68a28 	.word	0x3fc68a28
 8005850:	509f79fb 	.word	0x509f79fb
 8005854:	3fd34413 	.word	0x3fd34413
 8005858:	7ff00000 	.word	0x7ff00000
 800585c:	08006c75 	.word	0x08006c75
 8005860:	3ff80000 	.word	0x3ff80000
 8005864:	08006cd0 	.word	0x08006cd0
 8005868:	08006ca8 	.word	0x08006ca8
 800586c:	08006ca1 	.word	0x08006ca1
 8005870:	07f1      	lsls	r1, r6, #31
 8005872:	d508      	bpl.n	8005886 <_dtoa_r+0x34e>
 8005874:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800587c:	f7fa febc 	bl	80005f8 <__aeabi_dmul>
 8005880:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005884:	3501      	adds	r5, #1
 8005886:	1076      	asrs	r6, r6, #1
 8005888:	3708      	adds	r7, #8
 800588a:	2e00      	cmp	r6, #0
 800588c:	d1f0      	bne.n	8005870 <_dtoa_r+0x338>
 800588e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005892:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005896:	f7fa ffd9 	bl	800084c <__aeabi_ddiv>
 800589a:	e9cd 0100 	strd	r0, r1, [sp]
 800589e:	e01a      	b.n	80058d6 <_dtoa_r+0x39e>
 80058a0:	2502      	movs	r5, #2
 80058a2:	e7a3      	b.n	80057ec <_dtoa_r+0x2b4>
 80058a4:	f000 80a0 	beq.w	80059e8 <_dtoa_r+0x4b0>
 80058a8:	f1ca 0600 	rsb	r6, sl, #0
 80058ac:	4b9f      	ldr	r3, [pc, #636]	; (8005b2c <_dtoa_r+0x5f4>)
 80058ae:	4fa0      	ldr	r7, [pc, #640]	; (8005b30 <_dtoa_r+0x5f8>)
 80058b0:	f006 020f 	and.w	r2, r6, #15
 80058b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058c0:	f7fa fe9a 	bl	80005f8 <__aeabi_dmul>
 80058c4:	e9cd 0100 	strd	r0, r1, [sp]
 80058c8:	1136      	asrs	r6, r6, #4
 80058ca:	2300      	movs	r3, #0
 80058cc:	2502      	movs	r5, #2
 80058ce:	2e00      	cmp	r6, #0
 80058d0:	d17f      	bne.n	80059d2 <_dtoa_r+0x49a>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e1      	bne.n	800589a <_dtoa_r+0x362>
 80058d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8087 	beq.w	80059ec <_dtoa_r+0x4b4>
 80058de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80058e2:	2200      	movs	r2, #0
 80058e4:	4b93      	ldr	r3, [pc, #588]	; (8005b34 <_dtoa_r+0x5fc>)
 80058e6:	4630      	mov	r0, r6
 80058e8:	4639      	mov	r1, r7
 80058ea:	f7fb f8f7 	bl	8000adc <__aeabi_dcmplt>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d07c      	beq.n	80059ec <_dtoa_r+0x4b4>
 80058f2:	f1b9 0f00 	cmp.w	r9, #0
 80058f6:	d079      	beq.n	80059ec <_dtoa_r+0x4b4>
 80058f8:	9b02      	ldr	r3, [sp, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	dd35      	ble.n	800596a <_dtoa_r+0x432>
 80058fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005902:	9308      	str	r3, [sp, #32]
 8005904:	4639      	mov	r1, r7
 8005906:	2200      	movs	r2, #0
 8005908:	4b8b      	ldr	r3, [pc, #556]	; (8005b38 <_dtoa_r+0x600>)
 800590a:	4630      	mov	r0, r6
 800590c:	f7fa fe74 	bl	80005f8 <__aeabi_dmul>
 8005910:	e9cd 0100 	strd	r0, r1, [sp]
 8005914:	9f02      	ldr	r7, [sp, #8]
 8005916:	3501      	adds	r5, #1
 8005918:	4628      	mov	r0, r5
 800591a:	f7fa fe03 	bl	8000524 <__aeabi_i2d>
 800591e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005922:	f7fa fe69 	bl	80005f8 <__aeabi_dmul>
 8005926:	2200      	movs	r2, #0
 8005928:	4b84      	ldr	r3, [pc, #528]	; (8005b3c <_dtoa_r+0x604>)
 800592a:	f7fa fcaf 	bl	800028c <__adddf3>
 800592e:	4605      	mov	r5, r0
 8005930:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005934:	2f00      	cmp	r7, #0
 8005936:	d15d      	bne.n	80059f4 <_dtoa_r+0x4bc>
 8005938:	2200      	movs	r2, #0
 800593a:	4b81      	ldr	r3, [pc, #516]	; (8005b40 <_dtoa_r+0x608>)
 800593c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005940:	f7fa fca2 	bl	8000288 <__aeabi_dsub>
 8005944:	462a      	mov	r2, r5
 8005946:	4633      	mov	r3, r6
 8005948:	e9cd 0100 	strd	r0, r1, [sp]
 800594c:	f7fb f8e4 	bl	8000b18 <__aeabi_dcmpgt>
 8005950:	2800      	cmp	r0, #0
 8005952:	f040 8288 	bne.w	8005e66 <_dtoa_r+0x92e>
 8005956:	462a      	mov	r2, r5
 8005958:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800595c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005960:	f7fb f8bc 	bl	8000adc <__aeabi_dcmplt>
 8005964:	2800      	cmp	r0, #0
 8005966:	f040 827c 	bne.w	8005e62 <_dtoa_r+0x92a>
 800596a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800596e:	e9cd 2300 	strd	r2, r3, [sp]
 8005972:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005974:	2b00      	cmp	r3, #0
 8005976:	f2c0 8150 	blt.w	8005c1a <_dtoa_r+0x6e2>
 800597a:	f1ba 0f0e 	cmp.w	sl, #14
 800597e:	f300 814c 	bgt.w	8005c1a <_dtoa_r+0x6e2>
 8005982:	4b6a      	ldr	r3, [pc, #424]	; (8005b2c <_dtoa_r+0x5f4>)
 8005984:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005988:	ed93 7b00 	vldr	d7, [r3]
 800598c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800598e:	2b00      	cmp	r3, #0
 8005990:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005994:	f280 80d8 	bge.w	8005b48 <_dtoa_r+0x610>
 8005998:	f1b9 0f00 	cmp.w	r9, #0
 800599c:	f300 80d4 	bgt.w	8005b48 <_dtoa_r+0x610>
 80059a0:	f040 825e 	bne.w	8005e60 <_dtoa_r+0x928>
 80059a4:	2200      	movs	r2, #0
 80059a6:	4b66      	ldr	r3, [pc, #408]	; (8005b40 <_dtoa_r+0x608>)
 80059a8:	ec51 0b17 	vmov	r0, r1, d7
 80059ac:	f7fa fe24 	bl	80005f8 <__aeabi_dmul>
 80059b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059b4:	f7fb f8a6 	bl	8000b04 <__aeabi_dcmpge>
 80059b8:	464f      	mov	r7, r9
 80059ba:	464e      	mov	r6, r9
 80059bc:	2800      	cmp	r0, #0
 80059be:	f040 8234 	bne.w	8005e2a <_dtoa_r+0x8f2>
 80059c2:	2331      	movs	r3, #49	; 0x31
 80059c4:	f10b 0501 	add.w	r5, fp, #1
 80059c8:	f88b 3000 	strb.w	r3, [fp]
 80059cc:	f10a 0a01 	add.w	sl, sl, #1
 80059d0:	e22f      	b.n	8005e32 <_dtoa_r+0x8fa>
 80059d2:	07f2      	lsls	r2, r6, #31
 80059d4:	d505      	bpl.n	80059e2 <_dtoa_r+0x4aa>
 80059d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059da:	f7fa fe0d 	bl	80005f8 <__aeabi_dmul>
 80059de:	3501      	adds	r5, #1
 80059e0:	2301      	movs	r3, #1
 80059e2:	1076      	asrs	r6, r6, #1
 80059e4:	3708      	adds	r7, #8
 80059e6:	e772      	b.n	80058ce <_dtoa_r+0x396>
 80059e8:	2502      	movs	r5, #2
 80059ea:	e774      	b.n	80058d6 <_dtoa_r+0x39e>
 80059ec:	f8cd a020 	str.w	sl, [sp, #32]
 80059f0:	464f      	mov	r7, r9
 80059f2:	e791      	b.n	8005918 <_dtoa_r+0x3e0>
 80059f4:	4b4d      	ldr	r3, [pc, #308]	; (8005b2c <_dtoa_r+0x5f4>)
 80059f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80059fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80059fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d047      	beq.n	8005a94 <_dtoa_r+0x55c>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	2000      	movs	r0, #0
 8005a0a:	494e      	ldr	r1, [pc, #312]	; (8005b44 <_dtoa_r+0x60c>)
 8005a0c:	f7fa ff1e 	bl	800084c <__aeabi_ddiv>
 8005a10:	462a      	mov	r2, r5
 8005a12:	4633      	mov	r3, r6
 8005a14:	f7fa fc38 	bl	8000288 <__aeabi_dsub>
 8005a18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005a1c:	465d      	mov	r5, fp
 8005a1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a22:	f7fb f899 	bl	8000b58 <__aeabi_d2iz>
 8005a26:	4606      	mov	r6, r0
 8005a28:	f7fa fd7c 	bl	8000524 <__aeabi_i2d>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a34:	f7fa fc28 	bl	8000288 <__aeabi_dsub>
 8005a38:	3630      	adds	r6, #48	; 0x30
 8005a3a:	f805 6b01 	strb.w	r6, [r5], #1
 8005a3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a42:	e9cd 0100 	strd	r0, r1, [sp]
 8005a46:	f7fb f849 	bl	8000adc <__aeabi_dcmplt>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d163      	bne.n	8005b16 <_dtoa_r+0x5de>
 8005a4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a52:	2000      	movs	r0, #0
 8005a54:	4937      	ldr	r1, [pc, #220]	; (8005b34 <_dtoa_r+0x5fc>)
 8005a56:	f7fa fc17 	bl	8000288 <__aeabi_dsub>
 8005a5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a5e:	f7fb f83d 	bl	8000adc <__aeabi_dcmplt>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	f040 80b7 	bne.w	8005bd6 <_dtoa_r+0x69e>
 8005a68:	eba5 030b 	sub.w	r3, r5, fp
 8005a6c:	429f      	cmp	r7, r3
 8005a6e:	f77f af7c 	ble.w	800596a <_dtoa_r+0x432>
 8005a72:	2200      	movs	r2, #0
 8005a74:	4b30      	ldr	r3, [pc, #192]	; (8005b38 <_dtoa_r+0x600>)
 8005a76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a7a:	f7fa fdbd 	bl	80005f8 <__aeabi_dmul>
 8005a7e:	2200      	movs	r2, #0
 8005a80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005a84:	4b2c      	ldr	r3, [pc, #176]	; (8005b38 <_dtoa_r+0x600>)
 8005a86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a8a:	f7fa fdb5 	bl	80005f8 <__aeabi_dmul>
 8005a8e:	e9cd 0100 	strd	r0, r1, [sp]
 8005a92:	e7c4      	b.n	8005a1e <_dtoa_r+0x4e6>
 8005a94:	462a      	mov	r2, r5
 8005a96:	4633      	mov	r3, r6
 8005a98:	f7fa fdae 	bl	80005f8 <__aeabi_dmul>
 8005a9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005aa0:	eb0b 0507 	add.w	r5, fp, r7
 8005aa4:	465e      	mov	r6, fp
 8005aa6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005aaa:	f7fb f855 	bl	8000b58 <__aeabi_d2iz>
 8005aae:	4607      	mov	r7, r0
 8005ab0:	f7fa fd38 	bl	8000524 <__aeabi_i2d>
 8005ab4:	3730      	adds	r7, #48	; 0x30
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005abe:	f7fa fbe3 	bl	8000288 <__aeabi_dsub>
 8005ac2:	f806 7b01 	strb.w	r7, [r6], #1
 8005ac6:	42ae      	cmp	r6, r5
 8005ac8:	e9cd 0100 	strd	r0, r1, [sp]
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	d126      	bne.n	8005b20 <_dtoa_r+0x5e8>
 8005ad2:	4b1c      	ldr	r3, [pc, #112]	; (8005b44 <_dtoa_r+0x60c>)
 8005ad4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ad8:	f7fa fbd8 	bl	800028c <__adddf3>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ae4:	f7fb f818 	bl	8000b18 <__aeabi_dcmpgt>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	d174      	bne.n	8005bd6 <_dtoa_r+0x69e>
 8005aec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005af0:	2000      	movs	r0, #0
 8005af2:	4914      	ldr	r1, [pc, #80]	; (8005b44 <_dtoa_r+0x60c>)
 8005af4:	f7fa fbc8 	bl	8000288 <__aeabi_dsub>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b00:	f7fa ffec 	bl	8000adc <__aeabi_dcmplt>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	f43f af30 	beq.w	800596a <_dtoa_r+0x432>
 8005b0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b0e:	2b30      	cmp	r3, #48	; 0x30
 8005b10:	f105 32ff 	add.w	r2, r5, #4294967295
 8005b14:	d002      	beq.n	8005b1c <_dtoa_r+0x5e4>
 8005b16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005b1a:	e04a      	b.n	8005bb2 <_dtoa_r+0x67a>
 8005b1c:	4615      	mov	r5, r2
 8005b1e:	e7f4      	b.n	8005b0a <_dtoa_r+0x5d2>
 8005b20:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <_dtoa_r+0x600>)
 8005b22:	f7fa fd69 	bl	80005f8 <__aeabi_dmul>
 8005b26:	e9cd 0100 	strd	r0, r1, [sp]
 8005b2a:	e7bc      	b.n	8005aa6 <_dtoa_r+0x56e>
 8005b2c:	08006cd0 	.word	0x08006cd0
 8005b30:	08006ca8 	.word	0x08006ca8
 8005b34:	3ff00000 	.word	0x3ff00000
 8005b38:	40240000 	.word	0x40240000
 8005b3c:	401c0000 	.word	0x401c0000
 8005b40:	40140000 	.word	0x40140000
 8005b44:	3fe00000 	.word	0x3fe00000
 8005b48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005b4c:	465d      	mov	r5, fp
 8005b4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b52:	4630      	mov	r0, r6
 8005b54:	4639      	mov	r1, r7
 8005b56:	f7fa fe79 	bl	800084c <__aeabi_ddiv>
 8005b5a:	f7fa fffd 	bl	8000b58 <__aeabi_d2iz>
 8005b5e:	4680      	mov	r8, r0
 8005b60:	f7fa fce0 	bl	8000524 <__aeabi_i2d>
 8005b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b68:	f7fa fd46 	bl	80005f8 <__aeabi_dmul>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4630      	mov	r0, r6
 8005b72:	4639      	mov	r1, r7
 8005b74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005b78:	f7fa fb86 	bl	8000288 <__aeabi_dsub>
 8005b7c:	f805 6b01 	strb.w	r6, [r5], #1
 8005b80:	eba5 060b 	sub.w	r6, r5, fp
 8005b84:	45b1      	cmp	r9, r6
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	d139      	bne.n	8005c00 <_dtoa_r+0x6c8>
 8005b8c:	f7fa fb7e 	bl	800028c <__adddf3>
 8005b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b94:	4606      	mov	r6, r0
 8005b96:	460f      	mov	r7, r1
 8005b98:	f7fa ffbe 	bl	8000b18 <__aeabi_dcmpgt>
 8005b9c:	b9c8      	cbnz	r0, 8005bd2 <_dtoa_r+0x69a>
 8005b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	f7fa ff8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005baa:	b110      	cbz	r0, 8005bb2 <_dtoa_r+0x67a>
 8005bac:	f018 0f01 	tst.w	r8, #1
 8005bb0:	d10f      	bne.n	8005bd2 <_dtoa_r+0x69a>
 8005bb2:	9904      	ldr	r1, [sp, #16]
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f000 facc 	bl	8006152 <_Bfree>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005bbe:	702b      	strb	r3, [r5, #0]
 8005bc0:	f10a 0301 	add.w	r3, sl, #1
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 8241 	beq.w	8006050 <_dtoa_r+0xb18>
 8005bce:	601d      	str	r5, [r3, #0]
 8005bd0:	e23e      	b.n	8006050 <_dtoa_r+0xb18>
 8005bd2:	f8cd a020 	str.w	sl, [sp, #32]
 8005bd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005bda:	2a39      	cmp	r2, #57	; 0x39
 8005bdc:	f105 33ff 	add.w	r3, r5, #4294967295
 8005be0:	d108      	bne.n	8005bf4 <_dtoa_r+0x6bc>
 8005be2:	459b      	cmp	fp, r3
 8005be4:	d10a      	bne.n	8005bfc <_dtoa_r+0x6c4>
 8005be6:	9b08      	ldr	r3, [sp, #32]
 8005be8:	3301      	adds	r3, #1
 8005bea:	9308      	str	r3, [sp, #32]
 8005bec:	2330      	movs	r3, #48	; 0x30
 8005bee:	f88b 3000 	strb.w	r3, [fp]
 8005bf2:	465b      	mov	r3, fp
 8005bf4:	781a      	ldrb	r2, [r3, #0]
 8005bf6:	3201      	adds	r2, #1
 8005bf8:	701a      	strb	r2, [r3, #0]
 8005bfa:	e78c      	b.n	8005b16 <_dtoa_r+0x5de>
 8005bfc:	461d      	mov	r5, r3
 8005bfe:	e7ea      	b.n	8005bd6 <_dtoa_r+0x69e>
 8005c00:	2200      	movs	r2, #0
 8005c02:	4b9b      	ldr	r3, [pc, #620]	; (8005e70 <_dtoa_r+0x938>)
 8005c04:	f7fa fcf8 	bl	80005f8 <__aeabi_dmul>
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	460f      	mov	r7, r1
 8005c10:	f7fa ff5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d09a      	beq.n	8005b4e <_dtoa_r+0x616>
 8005c18:	e7cb      	b.n	8005bb2 <_dtoa_r+0x67a>
 8005c1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c1c:	2a00      	cmp	r2, #0
 8005c1e:	f000 808b 	beq.w	8005d38 <_dtoa_r+0x800>
 8005c22:	9a06      	ldr	r2, [sp, #24]
 8005c24:	2a01      	cmp	r2, #1
 8005c26:	dc6e      	bgt.n	8005d06 <_dtoa_r+0x7ce>
 8005c28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005c2a:	2a00      	cmp	r2, #0
 8005c2c:	d067      	beq.n	8005cfe <_dtoa_r+0x7c6>
 8005c2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c32:	9f07      	ldr	r7, [sp, #28]
 8005c34:	9d05      	ldr	r5, [sp, #20]
 8005c36:	9a05      	ldr	r2, [sp, #20]
 8005c38:	2101      	movs	r1, #1
 8005c3a:	441a      	add	r2, r3
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	9205      	str	r2, [sp, #20]
 8005c40:	4498      	add	r8, r3
 8005c42:	f000 fb26 	bl	8006292 <__i2b>
 8005c46:	4606      	mov	r6, r0
 8005c48:	2d00      	cmp	r5, #0
 8005c4a:	dd0c      	ble.n	8005c66 <_dtoa_r+0x72e>
 8005c4c:	f1b8 0f00 	cmp.w	r8, #0
 8005c50:	dd09      	ble.n	8005c66 <_dtoa_r+0x72e>
 8005c52:	4545      	cmp	r5, r8
 8005c54:	9a05      	ldr	r2, [sp, #20]
 8005c56:	462b      	mov	r3, r5
 8005c58:	bfa8      	it	ge
 8005c5a:	4643      	movge	r3, r8
 8005c5c:	1ad2      	subs	r2, r2, r3
 8005c5e:	9205      	str	r2, [sp, #20]
 8005c60:	1aed      	subs	r5, r5, r3
 8005c62:	eba8 0803 	sub.w	r8, r8, r3
 8005c66:	9b07      	ldr	r3, [sp, #28]
 8005c68:	b1eb      	cbz	r3, 8005ca6 <_dtoa_r+0x76e>
 8005c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d067      	beq.n	8005d40 <_dtoa_r+0x808>
 8005c70:	b18f      	cbz	r7, 8005c96 <_dtoa_r+0x75e>
 8005c72:	4631      	mov	r1, r6
 8005c74:	463a      	mov	r2, r7
 8005c76:	4620      	mov	r0, r4
 8005c78:	f000 fbaa 	bl	80063d0 <__pow5mult>
 8005c7c:	9a04      	ldr	r2, [sp, #16]
 8005c7e:	4601      	mov	r1, r0
 8005c80:	4606      	mov	r6, r0
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 fb0e 	bl	80062a4 <__multiply>
 8005c88:	9904      	ldr	r1, [sp, #16]
 8005c8a:	9008      	str	r0, [sp, #32]
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f000 fa60 	bl	8006152 <_Bfree>
 8005c92:	9b08      	ldr	r3, [sp, #32]
 8005c94:	9304      	str	r3, [sp, #16]
 8005c96:	9b07      	ldr	r3, [sp, #28]
 8005c98:	1bda      	subs	r2, r3, r7
 8005c9a:	d004      	beq.n	8005ca6 <_dtoa_r+0x76e>
 8005c9c:	9904      	ldr	r1, [sp, #16]
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f000 fb96 	bl	80063d0 <__pow5mult>
 8005ca4:	9004      	str	r0, [sp, #16]
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f000 faf2 	bl	8006292 <__i2b>
 8005cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cb0:	4607      	mov	r7, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 81d0 	beq.w	8006058 <_dtoa_r+0xb20>
 8005cb8:	461a      	mov	r2, r3
 8005cba:	4601      	mov	r1, r0
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f000 fb87 	bl	80063d0 <__pow5mult>
 8005cc2:	9b06      	ldr	r3, [sp, #24]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	4607      	mov	r7, r0
 8005cc8:	dc40      	bgt.n	8005d4c <_dtoa_r+0x814>
 8005cca:	9b00      	ldr	r3, [sp, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d139      	bne.n	8005d44 <_dtoa_r+0x80c>
 8005cd0:	9b01      	ldr	r3, [sp, #4]
 8005cd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d136      	bne.n	8005d48 <_dtoa_r+0x810>
 8005cda:	9b01      	ldr	r3, [sp, #4]
 8005cdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ce0:	0d1b      	lsrs	r3, r3, #20
 8005ce2:	051b      	lsls	r3, r3, #20
 8005ce4:	b12b      	cbz	r3, 8005cf2 <_dtoa_r+0x7ba>
 8005ce6:	9b05      	ldr	r3, [sp, #20]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	9305      	str	r3, [sp, #20]
 8005cec:	f108 0801 	add.w	r8, r8, #1
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	9307      	str	r3, [sp, #28]
 8005cf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d12a      	bne.n	8005d50 <_dtoa_r+0x818>
 8005cfa:	2001      	movs	r0, #1
 8005cfc:	e030      	b.n	8005d60 <_dtoa_r+0x828>
 8005cfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d04:	e795      	b.n	8005c32 <_dtoa_r+0x6fa>
 8005d06:	9b07      	ldr	r3, [sp, #28]
 8005d08:	f109 37ff 	add.w	r7, r9, #4294967295
 8005d0c:	42bb      	cmp	r3, r7
 8005d0e:	bfbf      	itttt	lt
 8005d10:	9b07      	ldrlt	r3, [sp, #28]
 8005d12:	9707      	strlt	r7, [sp, #28]
 8005d14:	1afa      	sublt	r2, r7, r3
 8005d16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005d18:	bfbb      	ittet	lt
 8005d1a:	189b      	addlt	r3, r3, r2
 8005d1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005d1e:	1bdf      	subge	r7, r3, r7
 8005d20:	2700      	movlt	r7, #0
 8005d22:	f1b9 0f00 	cmp.w	r9, #0
 8005d26:	bfb5      	itete	lt
 8005d28:	9b05      	ldrlt	r3, [sp, #20]
 8005d2a:	9d05      	ldrge	r5, [sp, #20]
 8005d2c:	eba3 0509 	sublt.w	r5, r3, r9
 8005d30:	464b      	movge	r3, r9
 8005d32:	bfb8      	it	lt
 8005d34:	2300      	movlt	r3, #0
 8005d36:	e77e      	b.n	8005c36 <_dtoa_r+0x6fe>
 8005d38:	9f07      	ldr	r7, [sp, #28]
 8005d3a:	9d05      	ldr	r5, [sp, #20]
 8005d3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005d3e:	e783      	b.n	8005c48 <_dtoa_r+0x710>
 8005d40:	9a07      	ldr	r2, [sp, #28]
 8005d42:	e7ab      	b.n	8005c9c <_dtoa_r+0x764>
 8005d44:	2300      	movs	r3, #0
 8005d46:	e7d4      	b.n	8005cf2 <_dtoa_r+0x7ba>
 8005d48:	9b00      	ldr	r3, [sp, #0]
 8005d4a:	e7d2      	b.n	8005cf2 <_dtoa_r+0x7ba>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	9307      	str	r3, [sp, #28]
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005d56:	6918      	ldr	r0, [r3, #16]
 8005d58:	f000 fa4d 	bl	80061f6 <__hi0bits>
 8005d5c:	f1c0 0020 	rsb	r0, r0, #32
 8005d60:	4440      	add	r0, r8
 8005d62:	f010 001f 	ands.w	r0, r0, #31
 8005d66:	d047      	beq.n	8005df8 <_dtoa_r+0x8c0>
 8005d68:	f1c0 0320 	rsb	r3, r0, #32
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	dd3b      	ble.n	8005de8 <_dtoa_r+0x8b0>
 8005d70:	9b05      	ldr	r3, [sp, #20]
 8005d72:	f1c0 001c 	rsb	r0, r0, #28
 8005d76:	4403      	add	r3, r0
 8005d78:	9305      	str	r3, [sp, #20]
 8005d7a:	4405      	add	r5, r0
 8005d7c:	4480      	add	r8, r0
 8005d7e:	9b05      	ldr	r3, [sp, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	dd05      	ble.n	8005d90 <_dtoa_r+0x858>
 8005d84:	461a      	mov	r2, r3
 8005d86:	9904      	ldr	r1, [sp, #16]
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f000 fb6f 	bl	800646c <__lshift>
 8005d8e:	9004      	str	r0, [sp, #16]
 8005d90:	f1b8 0f00 	cmp.w	r8, #0
 8005d94:	dd05      	ble.n	8005da2 <_dtoa_r+0x86a>
 8005d96:	4639      	mov	r1, r7
 8005d98:	4642      	mov	r2, r8
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f000 fb66 	bl	800646c <__lshift>
 8005da0:	4607      	mov	r7, r0
 8005da2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005da4:	b353      	cbz	r3, 8005dfc <_dtoa_r+0x8c4>
 8005da6:	4639      	mov	r1, r7
 8005da8:	9804      	ldr	r0, [sp, #16]
 8005daa:	f000 fbb3 	bl	8006514 <__mcmp>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	da24      	bge.n	8005dfc <_dtoa_r+0x8c4>
 8005db2:	2300      	movs	r3, #0
 8005db4:	220a      	movs	r2, #10
 8005db6:	9904      	ldr	r1, [sp, #16]
 8005db8:	4620      	mov	r0, r4
 8005dba:	f000 f9e1 	bl	8006180 <__multadd>
 8005dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dc0:	9004      	str	r0, [sp, #16]
 8005dc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 814d 	beq.w	8006066 <_dtoa_r+0xb2e>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	4631      	mov	r1, r6
 8005dd0:	220a      	movs	r2, #10
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f000 f9d4 	bl	8006180 <__multadd>
 8005dd8:	9b02      	ldr	r3, [sp, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	4606      	mov	r6, r0
 8005dde:	dc4f      	bgt.n	8005e80 <_dtoa_r+0x948>
 8005de0:	9b06      	ldr	r3, [sp, #24]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	dd4c      	ble.n	8005e80 <_dtoa_r+0x948>
 8005de6:	e011      	b.n	8005e0c <_dtoa_r+0x8d4>
 8005de8:	d0c9      	beq.n	8005d7e <_dtoa_r+0x846>
 8005dea:	9a05      	ldr	r2, [sp, #20]
 8005dec:	331c      	adds	r3, #28
 8005dee:	441a      	add	r2, r3
 8005df0:	9205      	str	r2, [sp, #20]
 8005df2:	441d      	add	r5, r3
 8005df4:	4498      	add	r8, r3
 8005df6:	e7c2      	b.n	8005d7e <_dtoa_r+0x846>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	e7f6      	b.n	8005dea <_dtoa_r+0x8b2>
 8005dfc:	f1b9 0f00 	cmp.w	r9, #0
 8005e00:	dc38      	bgt.n	8005e74 <_dtoa_r+0x93c>
 8005e02:	9b06      	ldr	r3, [sp, #24]
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	dd35      	ble.n	8005e74 <_dtoa_r+0x93c>
 8005e08:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e0c:	9b02      	ldr	r3, [sp, #8]
 8005e0e:	b963      	cbnz	r3, 8005e2a <_dtoa_r+0x8f2>
 8005e10:	4639      	mov	r1, r7
 8005e12:	2205      	movs	r2, #5
 8005e14:	4620      	mov	r0, r4
 8005e16:	f000 f9b3 	bl	8006180 <__multadd>
 8005e1a:	4601      	mov	r1, r0
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	9804      	ldr	r0, [sp, #16]
 8005e20:	f000 fb78 	bl	8006514 <__mcmp>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	f73f adcc 	bgt.w	80059c2 <_dtoa_r+0x48a>
 8005e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e2c:	465d      	mov	r5, fp
 8005e2e:	ea6f 0a03 	mvn.w	sl, r3
 8005e32:	f04f 0900 	mov.w	r9, #0
 8005e36:	4639      	mov	r1, r7
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 f98a 	bl	8006152 <_Bfree>
 8005e3e:	2e00      	cmp	r6, #0
 8005e40:	f43f aeb7 	beq.w	8005bb2 <_dtoa_r+0x67a>
 8005e44:	f1b9 0f00 	cmp.w	r9, #0
 8005e48:	d005      	beq.n	8005e56 <_dtoa_r+0x91e>
 8005e4a:	45b1      	cmp	r9, r6
 8005e4c:	d003      	beq.n	8005e56 <_dtoa_r+0x91e>
 8005e4e:	4649      	mov	r1, r9
 8005e50:	4620      	mov	r0, r4
 8005e52:	f000 f97e 	bl	8006152 <_Bfree>
 8005e56:	4631      	mov	r1, r6
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f000 f97a 	bl	8006152 <_Bfree>
 8005e5e:	e6a8      	b.n	8005bb2 <_dtoa_r+0x67a>
 8005e60:	2700      	movs	r7, #0
 8005e62:	463e      	mov	r6, r7
 8005e64:	e7e1      	b.n	8005e2a <_dtoa_r+0x8f2>
 8005e66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005e6a:	463e      	mov	r6, r7
 8005e6c:	e5a9      	b.n	80059c2 <_dtoa_r+0x48a>
 8005e6e:	bf00      	nop
 8005e70:	40240000 	.word	0x40240000
 8005e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e76:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 80fa 	beq.w	8006074 <_dtoa_r+0xb3c>
 8005e80:	2d00      	cmp	r5, #0
 8005e82:	dd05      	ble.n	8005e90 <_dtoa_r+0x958>
 8005e84:	4631      	mov	r1, r6
 8005e86:	462a      	mov	r2, r5
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f000 faef 	bl	800646c <__lshift>
 8005e8e:	4606      	mov	r6, r0
 8005e90:	9b07      	ldr	r3, [sp, #28]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d04c      	beq.n	8005f30 <_dtoa_r+0x9f8>
 8005e96:	6871      	ldr	r1, [r6, #4]
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 f926 	bl	80060ea <_Balloc>
 8005e9e:	6932      	ldr	r2, [r6, #16]
 8005ea0:	3202      	adds	r2, #2
 8005ea2:	4605      	mov	r5, r0
 8005ea4:	0092      	lsls	r2, r2, #2
 8005ea6:	f106 010c 	add.w	r1, r6, #12
 8005eaa:	300c      	adds	r0, #12
 8005eac:	f000 f912 	bl	80060d4 <memcpy>
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f000 fad9 	bl	800646c <__lshift>
 8005eba:	9b00      	ldr	r3, [sp, #0]
 8005ebc:	f8cd b014 	str.w	fp, [sp, #20]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	46b1      	mov	r9, r6
 8005ec6:	9307      	str	r3, [sp, #28]
 8005ec8:	4606      	mov	r6, r0
 8005eca:	4639      	mov	r1, r7
 8005ecc:	9804      	ldr	r0, [sp, #16]
 8005ece:	f7ff faa5 	bl	800541c <quorem>
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	4605      	mov	r5, r0
 8005ed6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005eda:	9804      	ldr	r0, [sp, #16]
 8005edc:	f000 fb1a 	bl	8006514 <__mcmp>
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	9000      	str	r0, [sp, #0]
 8005ee4:	4639      	mov	r1, r7
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f000 fb2e 	bl	8006548 <__mdiff>
 8005eec:	68c3      	ldr	r3, [r0, #12]
 8005eee:	4602      	mov	r2, r0
 8005ef0:	bb03      	cbnz	r3, 8005f34 <_dtoa_r+0x9fc>
 8005ef2:	4601      	mov	r1, r0
 8005ef4:	9008      	str	r0, [sp, #32]
 8005ef6:	9804      	ldr	r0, [sp, #16]
 8005ef8:	f000 fb0c 	bl	8006514 <__mcmp>
 8005efc:	9a08      	ldr	r2, [sp, #32]
 8005efe:	4603      	mov	r3, r0
 8005f00:	4611      	mov	r1, r2
 8005f02:	4620      	mov	r0, r4
 8005f04:	9308      	str	r3, [sp, #32]
 8005f06:	f000 f924 	bl	8006152 <_Bfree>
 8005f0a:	9b08      	ldr	r3, [sp, #32]
 8005f0c:	b9a3      	cbnz	r3, 8005f38 <_dtoa_r+0xa00>
 8005f0e:	9a06      	ldr	r2, [sp, #24]
 8005f10:	b992      	cbnz	r2, 8005f38 <_dtoa_r+0xa00>
 8005f12:	9a07      	ldr	r2, [sp, #28]
 8005f14:	b982      	cbnz	r2, 8005f38 <_dtoa_r+0xa00>
 8005f16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005f1a:	d029      	beq.n	8005f70 <_dtoa_r+0xa38>
 8005f1c:	9b00      	ldr	r3, [sp, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	dd01      	ble.n	8005f26 <_dtoa_r+0x9ee>
 8005f22:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005f26:	9b05      	ldr	r3, [sp, #20]
 8005f28:	1c5d      	adds	r5, r3, #1
 8005f2a:	f883 8000 	strb.w	r8, [r3]
 8005f2e:	e782      	b.n	8005e36 <_dtoa_r+0x8fe>
 8005f30:	4630      	mov	r0, r6
 8005f32:	e7c2      	b.n	8005eba <_dtoa_r+0x982>
 8005f34:	2301      	movs	r3, #1
 8005f36:	e7e3      	b.n	8005f00 <_dtoa_r+0x9c8>
 8005f38:	9a00      	ldr	r2, [sp, #0]
 8005f3a:	2a00      	cmp	r2, #0
 8005f3c:	db04      	blt.n	8005f48 <_dtoa_r+0xa10>
 8005f3e:	d125      	bne.n	8005f8c <_dtoa_r+0xa54>
 8005f40:	9a06      	ldr	r2, [sp, #24]
 8005f42:	bb1a      	cbnz	r2, 8005f8c <_dtoa_r+0xa54>
 8005f44:	9a07      	ldr	r2, [sp, #28]
 8005f46:	bb0a      	cbnz	r2, 8005f8c <_dtoa_r+0xa54>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	ddec      	ble.n	8005f26 <_dtoa_r+0x9ee>
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	9904      	ldr	r1, [sp, #16]
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 fa8b 	bl	800646c <__lshift>
 8005f56:	4639      	mov	r1, r7
 8005f58:	9004      	str	r0, [sp, #16]
 8005f5a:	f000 fadb 	bl	8006514 <__mcmp>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	dc03      	bgt.n	8005f6a <_dtoa_r+0xa32>
 8005f62:	d1e0      	bne.n	8005f26 <_dtoa_r+0x9ee>
 8005f64:	f018 0f01 	tst.w	r8, #1
 8005f68:	d0dd      	beq.n	8005f26 <_dtoa_r+0x9ee>
 8005f6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005f6e:	d1d8      	bne.n	8005f22 <_dtoa_r+0x9ea>
 8005f70:	9b05      	ldr	r3, [sp, #20]
 8005f72:	9a05      	ldr	r2, [sp, #20]
 8005f74:	1c5d      	adds	r5, r3, #1
 8005f76:	2339      	movs	r3, #57	; 0x39
 8005f78:	7013      	strb	r3, [r2, #0]
 8005f7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f7e:	2b39      	cmp	r3, #57	; 0x39
 8005f80:	f105 32ff 	add.w	r2, r5, #4294967295
 8005f84:	d04f      	beq.n	8006026 <_dtoa_r+0xaee>
 8005f86:	3301      	adds	r3, #1
 8005f88:	7013      	strb	r3, [r2, #0]
 8005f8a:	e754      	b.n	8005e36 <_dtoa_r+0x8fe>
 8005f8c:	9a05      	ldr	r2, [sp, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f102 0501 	add.w	r5, r2, #1
 8005f94:	dd06      	ble.n	8005fa4 <_dtoa_r+0xa6c>
 8005f96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005f9a:	d0e9      	beq.n	8005f70 <_dtoa_r+0xa38>
 8005f9c:	f108 0801 	add.w	r8, r8, #1
 8005fa0:	9b05      	ldr	r3, [sp, #20]
 8005fa2:	e7c2      	b.n	8005f2a <_dtoa_r+0x9f2>
 8005fa4:	9a02      	ldr	r2, [sp, #8]
 8005fa6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005faa:	eba5 030b 	sub.w	r3, r5, fp
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d021      	beq.n	8005ff6 <_dtoa_r+0xabe>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	220a      	movs	r2, #10
 8005fb6:	9904      	ldr	r1, [sp, #16]
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 f8e1 	bl	8006180 <__multadd>
 8005fbe:	45b1      	cmp	r9, r6
 8005fc0:	9004      	str	r0, [sp, #16]
 8005fc2:	f04f 0300 	mov.w	r3, #0
 8005fc6:	f04f 020a 	mov.w	r2, #10
 8005fca:	4649      	mov	r1, r9
 8005fcc:	4620      	mov	r0, r4
 8005fce:	d105      	bne.n	8005fdc <_dtoa_r+0xaa4>
 8005fd0:	f000 f8d6 	bl	8006180 <__multadd>
 8005fd4:	4681      	mov	r9, r0
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	9505      	str	r5, [sp, #20]
 8005fda:	e776      	b.n	8005eca <_dtoa_r+0x992>
 8005fdc:	f000 f8d0 	bl	8006180 <__multadd>
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4681      	mov	r9, r0
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	220a      	movs	r2, #10
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 f8c9 	bl	8006180 <__multadd>
 8005fee:	4606      	mov	r6, r0
 8005ff0:	e7f2      	b.n	8005fd8 <_dtoa_r+0xaa0>
 8005ff2:	f04f 0900 	mov.w	r9, #0
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	9904      	ldr	r1, [sp, #16]
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f000 fa36 	bl	800646c <__lshift>
 8006000:	4639      	mov	r1, r7
 8006002:	9004      	str	r0, [sp, #16]
 8006004:	f000 fa86 	bl	8006514 <__mcmp>
 8006008:	2800      	cmp	r0, #0
 800600a:	dcb6      	bgt.n	8005f7a <_dtoa_r+0xa42>
 800600c:	d102      	bne.n	8006014 <_dtoa_r+0xadc>
 800600e:	f018 0f01 	tst.w	r8, #1
 8006012:	d1b2      	bne.n	8005f7a <_dtoa_r+0xa42>
 8006014:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006018:	2b30      	cmp	r3, #48	; 0x30
 800601a:	f105 32ff 	add.w	r2, r5, #4294967295
 800601e:	f47f af0a 	bne.w	8005e36 <_dtoa_r+0x8fe>
 8006022:	4615      	mov	r5, r2
 8006024:	e7f6      	b.n	8006014 <_dtoa_r+0xadc>
 8006026:	4593      	cmp	fp, r2
 8006028:	d105      	bne.n	8006036 <_dtoa_r+0xafe>
 800602a:	2331      	movs	r3, #49	; 0x31
 800602c:	f10a 0a01 	add.w	sl, sl, #1
 8006030:	f88b 3000 	strb.w	r3, [fp]
 8006034:	e6ff      	b.n	8005e36 <_dtoa_r+0x8fe>
 8006036:	4615      	mov	r5, r2
 8006038:	e79f      	b.n	8005f7a <_dtoa_r+0xa42>
 800603a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80060a0 <_dtoa_r+0xb68>
 800603e:	e007      	b.n	8006050 <_dtoa_r+0xb18>
 8006040:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006042:	f8df b060 	ldr.w	fp, [pc, #96]	; 80060a4 <_dtoa_r+0xb6c>
 8006046:	b11b      	cbz	r3, 8006050 <_dtoa_r+0xb18>
 8006048:	f10b 0308 	add.w	r3, fp, #8
 800604c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	4658      	mov	r0, fp
 8006052:	b017      	add	sp, #92	; 0x5c
 8006054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006058:	9b06      	ldr	r3, [sp, #24]
 800605a:	2b01      	cmp	r3, #1
 800605c:	f77f ae35 	ble.w	8005cca <_dtoa_r+0x792>
 8006060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006062:	9307      	str	r3, [sp, #28]
 8006064:	e649      	b.n	8005cfa <_dtoa_r+0x7c2>
 8006066:	9b02      	ldr	r3, [sp, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	dc03      	bgt.n	8006074 <_dtoa_r+0xb3c>
 800606c:	9b06      	ldr	r3, [sp, #24]
 800606e:	2b02      	cmp	r3, #2
 8006070:	f73f aecc 	bgt.w	8005e0c <_dtoa_r+0x8d4>
 8006074:	465d      	mov	r5, fp
 8006076:	4639      	mov	r1, r7
 8006078:	9804      	ldr	r0, [sp, #16]
 800607a:	f7ff f9cf 	bl	800541c <quorem>
 800607e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006082:	f805 8b01 	strb.w	r8, [r5], #1
 8006086:	9a02      	ldr	r2, [sp, #8]
 8006088:	eba5 030b 	sub.w	r3, r5, fp
 800608c:	429a      	cmp	r2, r3
 800608e:	ddb0      	ble.n	8005ff2 <_dtoa_r+0xaba>
 8006090:	2300      	movs	r3, #0
 8006092:	220a      	movs	r2, #10
 8006094:	9904      	ldr	r1, [sp, #16]
 8006096:	4620      	mov	r0, r4
 8006098:	f000 f872 	bl	8006180 <__multadd>
 800609c:	9004      	str	r0, [sp, #16]
 800609e:	e7ea      	b.n	8006076 <_dtoa_r+0xb3e>
 80060a0:	08006c74 	.word	0x08006c74
 80060a4:	08006c98 	.word	0x08006c98

080060a8 <_localeconv_r>:
 80060a8:	4b04      	ldr	r3, [pc, #16]	; (80060bc <_localeconv_r+0x14>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6a18      	ldr	r0, [r3, #32]
 80060ae:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <_localeconv_r+0x18>)
 80060b0:	2800      	cmp	r0, #0
 80060b2:	bf08      	it	eq
 80060b4:	4618      	moveq	r0, r3
 80060b6:	30f0      	adds	r0, #240	; 0xf0
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	20000010 	.word	0x20000010
 80060c0:	20000074 	.word	0x20000074

080060c4 <malloc>:
 80060c4:	4b02      	ldr	r3, [pc, #8]	; (80060d0 <malloc+0xc>)
 80060c6:	4601      	mov	r1, r0
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	f000 bb45 	b.w	8006758 <_malloc_r>
 80060ce:	bf00      	nop
 80060d0:	20000010 	.word	0x20000010

080060d4 <memcpy>:
 80060d4:	b510      	push	{r4, lr}
 80060d6:	1e43      	subs	r3, r0, #1
 80060d8:	440a      	add	r2, r1
 80060da:	4291      	cmp	r1, r2
 80060dc:	d100      	bne.n	80060e0 <memcpy+0xc>
 80060de:	bd10      	pop	{r4, pc}
 80060e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060e8:	e7f7      	b.n	80060da <memcpy+0x6>

080060ea <_Balloc>:
 80060ea:	b570      	push	{r4, r5, r6, lr}
 80060ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060ee:	4604      	mov	r4, r0
 80060f0:	460e      	mov	r6, r1
 80060f2:	b93d      	cbnz	r5, 8006104 <_Balloc+0x1a>
 80060f4:	2010      	movs	r0, #16
 80060f6:	f7ff ffe5 	bl	80060c4 <malloc>
 80060fa:	6260      	str	r0, [r4, #36]	; 0x24
 80060fc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006100:	6005      	str	r5, [r0, #0]
 8006102:	60c5      	str	r5, [r0, #12]
 8006104:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006106:	68eb      	ldr	r3, [r5, #12]
 8006108:	b183      	cbz	r3, 800612c <_Balloc+0x42>
 800610a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006112:	b9b8      	cbnz	r0, 8006144 <_Balloc+0x5a>
 8006114:	2101      	movs	r1, #1
 8006116:	fa01 f506 	lsl.w	r5, r1, r6
 800611a:	1d6a      	adds	r2, r5, #5
 800611c:	0092      	lsls	r2, r2, #2
 800611e:	4620      	mov	r0, r4
 8006120:	f000 fabe 	bl	80066a0 <_calloc_r>
 8006124:	b160      	cbz	r0, 8006140 <_Balloc+0x56>
 8006126:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800612a:	e00e      	b.n	800614a <_Balloc+0x60>
 800612c:	2221      	movs	r2, #33	; 0x21
 800612e:	2104      	movs	r1, #4
 8006130:	4620      	mov	r0, r4
 8006132:	f000 fab5 	bl	80066a0 <_calloc_r>
 8006136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006138:	60e8      	str	r0, [r5, #12]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e4      	bne.n	800610a <_Balloc+0x20>
 8006140:	2000      	movs	r0, #0
 8006142:	bd70      	pop	{r4, r5, r6, pc}
 8006144:	6802      	ldr	r2, [r0, #0]
 8006146:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800614a:	2300      	movs	r3, #0
 800614c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006150:	e7f7      	b.n	8006142 <_Balloc+0x58>

08006152 <_Bfree>:
 8006152:	b570      	push	{r4, r5, r6, lr}
 8006154:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006156:	4606      	mov	r6, r0
 8006158:	460d      	mov	r5, r1
 800615a:	b93c      	cbnz	r4, 800616c <_Bfree+0x1a>
 800615c:	2010      	movs	r0, #16
 800615e:	f7ff ffb1 	bl	80060c4 <malloc>
 8006162:	6270      	str	r0, [r6, #36]	; 0x24
 8006164:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006168:	6004      	str	r4, [r0, #0]
 800616a:	60c4      	str	r4, [r0, #12]
 800616c:	b13d      	cbz	r5, 800617e <_Bfree+0x2c>
 800616e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006170:	686a      	ldr	r2, [r5, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006178:	6029      	str	r1, [r5, #0]
 800617a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800617e:	bd70      	pop	{r4, r5, r6, pc}

08006180 <__multadd>:
 8006180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006184:	690d      	ldr	r5, [r1, #16]
 8006186:	461f      	mov	r7, r3
 8006188:	4606      	mov	r6, r0
 800618a:	460c      	mov	r4, r1
 800618c:	f101 0c14 	add.w	ip, r1, #20
 8006190:	2300      	movs	r3, #0
 8006192:	f8dc 0000 	ldr.w	r0, [ip]
 8006196:	b281      	uxth	r1, r0
 8006198:	fb02 7101 	mla	r1, r2, r1, r7
 800619c:	0c0f      	lsrs	r7, r1, #16
 800619e:	0c00      	lsrs	r0, r0, #16
 80061a0:	fb02 7000 	mla	r0, r2, r0, r7
 80061a4:	b289      	uxth	r1, r1
 80061a6:	3301      	adds	r3, #1
 80061a8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80061ac:	429d      	cmp	r5, r3
 80061ae:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80061b2:	f84c 1b04 	str.w	r1, [ip], #4
 80061b6:	dcec      	bgt.n	8006192 <__multadd+0x12>
 80061b8:	b1d7      	cbz	r7, 80061f0 <__multadd+0x70>
 80061ba:	68a3      	ldr	r3, [r4, #8]
 80061bc:	42ab      	cmp	r3, r5
 80061be:	dc12      	bgt.n	80061e6 <__multadd+0x66>
 80061c0:	6861      	ldr	r1, [r4, #4]
 80061c2:	4630      	mov	r0, r6
 80061c4:	3101      	adds	r1, #1
 80061c6:	f7ff ff90 	bl	80060ea <_Balloc>
 80061ca:	6922      	ldr	r2, [r4, #16]
 80061cc:	3202      	adds	r2, #2
 80061ce:	f104 010c 	add.w	r1, r4, #12
 80061d2:	4680      	mov	r8, r0
 80061d4:	0092      	lsls	r2, r2, #2
 80061d6:	300c      	adds	r0, #12
 80061d8:	f7ff ff7c 	bl	80060d4 <memcpy>
 80061dc:	4621      	mov	r1, r4
 80061de:	4630      	mov	r0, r6
 80061e0:	f7ff ffb7 	bl	8006152 <_Bfree>
 80061e4:	4644      	mov	r4, r8
 80061e6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061ea:	3501      	adds	r5, #1
 80061ec:	615f      	str	r7, [r3, #20]
 80061ee:	6125      	str	r5, [r4, #16]
 80061f0:	4620      	mov	r0, r4
 80061f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080061f6 <__hi0bits>:
 80061f6:	0c02      	lsrs	r2, r0, #16
 80061f8:	0412      	lsls	r2, r2, #16
 80061fa:	4603      	mov	r3, r0
 80061fc:	b9b2      	cbnz	r2, 800622c <__hi0bits+0x36>
 80061fe:	0403      	lsls	r3, r0, #16
 8006200:	2010      	movs	r0, #16
 8006202:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006206:	bf04      	itt	eq
 8006208:	021b      	lsleq	r3, r3, #8
 800620a:	3008      	addeq	r0, #8
 800620c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006210:	bf04      	itt	eq
 8006212:	011b      	lsleq	r3, r3, #4
 8006214:	3004      	addeq	r0, #4
 8006216:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800621a:	bf04      	itt	eq
 800621c:	009b      	lsleq	r3, r3, #2
 800621e:	3002      	addeq	r0, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	db06      	blt.n	8006232 <__hi0bits+0x3c>
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	d503      	bpl.n	8006230 <__hi0bits+0x3a>
 8006228:	3001      	adds	r0, #1
 800622a:	4770      	bx	lr
 800622c:	2000      	movs	r0, #0
 800622e:	e7e8      	b.n	8006202 <__hi0bits+0xc>
 8006230:	2020      	movs	r0, #32
 8006232:	4770      	bx	lr

08006234 <__lo0bits>:
 8006234:	6803      	ldr	r3, [r0, #0]
 8006236:	f013 0207 	ands.w	r2, r3, #7
 800623a:	4601      	mov	r1, r0
 800623c:	d00b      	beq.n	8006256 <__lo0bits+0x22>
 800623e:	07da      	lsls	r2, r3, #31
 8006240:	d423      	bmi.n	800628a <__lo0bits+0x56>
 8006242:	0798      	lsls	r0, r3, #30
 8006244:	bf49      	itett	mi
 8006246:	085b      	lsrmi	r3, r3, #1
 8006248:	089b      	lsrpl	r3, r3, #2
 800624a:	2001      	movmi	r0, #1
 800624c:	600b      	strmi	r3, [r1, #0]
 800624e:	bf5c      	itt	pl
 8006250:	600b      	strpl	r3, [r1, #0]
 8006252:	2002      	movpl	r0, #2
 8006254:	4770      	bx	lr
 8006256:	b298      	uxth	r0, r3
 8006258:	b9a8      	cbnz	r0, 8006286 <__lo0bits+0x52>
 800625a:	0c1b      	lsrs	r3, r3, #16
 800625c:	2010      	movs	r0, #16
 800625e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006262:	bf04      	itt	eq
 8006264:	0a1b      	lsreq	r3, r3, #8
 8006266:	3008      	addeq	r0, #8
 8006268:	071a      	lsls	r2, r3, #28
 800626a:	bf04      	itt	eq
 800626c:	091b      	lsreq	r3, r3, #4
 800626e:	3004      	addeq	r0, #4
 8006270:	079a      	lsls	r2, r3, #30
 8006272:	bf04      	itt	eq
 8006274:	089b      	lsreq	r3, r3, #2
 8006276:	3002      	addeq	r0, #2
 8006278:	07da      	lsls	r2, r3, #31
 800627a:	d402      	bmi.n	8006282 <__lo0bits+0x4e>
 800627c:	085b      	lsrs	r3, r3, #1
 800627e:	d006      	beq.n	800628e <__lo0bits+0x5a>
 8006280:	3001      	adds	r0, #1
 8006282:	600b      	str	r3, [r1, #0]
 8006284:	4770      	bx	lr
 8006286:	4610      	mov	r0, r2
 8006288:	e7e9      	b.n	800625e <__lo0bits+0x2a>
 800628a:	2000      	movs	r0, #0
 800628c:	4770      	bx	lr
 800628e:	2020      	movs	r0, #32
 8006290:	4770      	bx	lr

08006292 <__i2b>:
 8006292:	b510      	push	{r4, lr}
 8006294:	460c      	mov	r4, r1
 8006296:	2101      	movs	r1, #1
 8006298:	f7ff ff27 	bl	80060ea <_Balloc>
 800629c:	2201      	movs	r2, #1
 800629e:	6144      	str	r4, [r0, #20]
 80062a0:	6102      	str	r2, [r0, #16]
 80062a2:	bd10      	pop	{r4, pc}

080062a4 <__multiply>:
 80062a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a8:	4614      	mov	r4, r2
 80062aa:	690a      	ldr	r2, [r1, #16]
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	bfb8      	it	lt
 80062b2:	460b      	movlt	r3, r1
 80062b4:	4688      	mov	r8, r1
 80062b6:	bfbc      	itt	lt
 80062b8:	46a0      	movlt	r8, r4
 80062ba:	461c      	movlt	r4, r3
 80062bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80062c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80062c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80062c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80062cc:	eb07 0609 	add.w	r6, r7, r9
 80062d0:	42b3      	cmp	r3, r6
 80062d2:	bfb8      	it	lt
 80062d4:	3101      	addlt	r1, #1
 80062d6:	f7ff ff08 	bl	80060ea <_Balloc>
 80062da:	f100 0514 	add.w	r5, r0, #20
 80062de:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80062e2:	462b      	mov	r3, r5
 80062e4:	2200      	movs	r2, #0
 80062e6:	4573      	cmp	r3, lr
 80062e8:	d316      	bcc.n	8006318 <__multiply+0x74>
 80062ea:	f104 0214 	add.w	r2, r4, #20
 80062ee:	f108 0114 	add.w	r1, r8, #20
 80062f2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80062f6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	9b00      	ldr	r3, [sp, #0]
 80062fe:	9201      	str	r2, [sp, #4]
 8006300:	4293      	cmp	r3, r2
 8006302:	d80c      	bhi.n	800631e <__multiply+0x7a>
 8006304:	2e00      	cmp	r6, #0
 8006306:	dd03      	ble.n	8006310 <__multiply+0x6c>
 8006308:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800630c:	2b00      	cmp	r3, #0
 800630e:	d05d      	beq.n	80063cc <__multiply+0x128>
 8006310:	6106      	str	r6, [r0, #16]
 8006312:	b003      	add	sp, #12
 8006314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006318:	f843 2b04 	str.w	r2, [r3], #4
 800631c:	e7e3      	b.n	80062e6 <__multiply+0x42>
 800631e:	f8b2 b000 	ldrh.w	fp, [r2]
 8006322:	f1bb 0f00 	cmp.w	fp, #0
 8006326:	d023      	beq.n	8006370 <__multiply+0xcc>
 8006328:	4689      	mov	r9, r1
 800632a:	46ac      	mov	ip, r5
 800632c:	f04f 0800 	mov.w	r8, #0
 8006330:	f859 4b04 	ldr.w	r4, [r9], #4
 8006334:	f8dc a000 	ldr.w	sl, [ip]
 8006338:	b2a3      	uxth	r3, r4
 800633a:	fa1f fa8a 	uxth.w	sl, sl
 800633e:	fb0b a303 	mla	r3, fp, r3, sl
 8006342:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006346:	f8dc 4000 	ldr.w	r4, [ip]
 800634a:	4443      	add	r3, r8
 800634c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006350:	fb0b 840a 	mla	r4, fp, sl, r8
 8006354:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006358:	46e2      	mov	sl, ip
 800635a:	b29b      	uxth	r3, r3
 800635c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006360:	454f      	cmp	r7, r9
 8006362:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006366:	f84a 3b04 	str.w	r3, [sl], #4
 800636a:	d82b      	bhi.n	80063c4 <__multiply+0x120>
 800636c:	f8cc 8004 	str.w	r8, [ip, #4]
 8006370:	9b01      	ldr	r3, [sp, #4]
 8006372:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006376:	3204      	adds	r2, #4
 8006378:	f1ba 0f00 	cmp.w	sl, #0
 800637c:	d020      	beq.n	80063c0 <__multiply+0x11c>
 800637e:	682b      	ldr	r3, [r5, #0]
 8006380:	4689      	mov	r9, r1
 8006382:	46a8      	mov	r8, r5
 8006384:	f04f 0b00 	mov.w	fp, #0
 8006388:	f8b9 c000 	ldrh.w	ip, [r9]
 800638c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006390:	fb0a 440c 	mla	r4, sl, ip, r4
 8006394:	445c      	add	r4, fp
 8006396:	46c4      	mov	ip, r8
 8006398:	b29b      	uxth	r3, r3
 800639a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800639e:	f84c 3b04 	str.w	r3, [ip], #4
 80063a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80063a6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80063aa:	0c1b      	lsrs	r3, r3, #16
 80063ac:	fb0a b303 	mla	r3, sl, r3, fp
 80063b0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80063b4:	454f      	cmp	r7, r9
 80063b6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80063ba:	d805      	bhi.n	80063c8 <__multiply+0x124>
 80063bc:	f8c8 3004 	str.w	r3, [r8, #4]
 80063c0:	3504      	adds	r5, #4
 80063c2:	e79b      	b.n	80062fc <__multiply+0x58>
 80063c4:	46d4      	mov	ip, sl
 80063c6:	e7b3      	b.n	8006330 <__multiply+0x8c>
 80063c8:	46e0      	mov	r8, ip
 80063ca:	e7dd      	b.n	8006388 <__multiply+0xe4>
 80063cc:	3e01      	subs	r6, #1
 80063ce:	e799      	b.n	8006304 <__multiply+0x60>

080063d0 <__pow5mult>:
 80063d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063d4:	4615      	mov	r5, r2
 80063d6:	f012 0203 	ands.w	r2, r2, #3
 80063da:	4606      	mov	r6, r0
 80063dc:	460f      	mov	r7, r1
 80063de:	d007      	beq.n	80063f0 <__pow5mult+0x20>
 80063e0:	3a01      	subs	r2, #1
 80063e2:	4c21      	ldr	r4, [pc, #132]	; (8006468 <__pow5mult+0x98>)
 80063e4:	2300      	movs	r3, #0
 80063e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063ea:	f7ff fec9 	bl	8006180 <__multadd>
 80063ee:	4607      	mov	r7, r0
 80063f0:	10ad      	asrs	r5, r5, #2
 80063f2:	d035      	beq.n	8006460 <__pow5mult+0x90>
 80063f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80063f6:	b93c      	cbnz	r4, 8006408 <__pow5mult+0x38>
 80063f8:	2010      	movs	r0, #16
 80063fa:	f7ff fe63 	bl	80060c4 <malloc>
 80063fe:	6270      	str	r0, [r6, #36]	; 0x24
 8006400:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006404:	6004      	str	r4, [r0, #0]
 8006406:	60c4      	str	r4, [r0, #12]
 8006408:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800640c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006410:	b94c      	cbnz	r4, 8006426 <__pow5mult+0x56>
 8006412:	f240 2171 	movw	r1, #625	; 0x271
 8006416:	4630      	mov	r0, r6
 8006418:	f7ff ff3b 	bl	8006292 <__i2b>
 800641c:	2300      	movs	r3, #0
 800641e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006422:	4604      	mov	r4, r0
 8006424:	6003      	str	r3, [r0, #0]
 8006426:	f04f 0800 	mov.w	r8, #0
 800642a:	07eb      	lsls	r3, r5, #31
 800642c:	d50a      	bpl.n	8006444 <__pow5mult+0x74>
 800642e:	4639      	mov	r1, r7
 8006430:	4622      	mov	r2, r4
 8006432:	4630      	mov	r0, r6
 8006434:	f7ff ff36 	bl	80062a4 <__multiply>
 8006438:	4639      	mov	r1, r7
 800643a:	4681      	mov	r9, r0
 800643c:	4630      	mov	r0, r6
 800643e:	f7ff fe88 	bl	8006152 <_Bfree>
 8006442:	464f      	mov	r7, r9
 8006444:	106d      	asrs	r5, r5, #1
 8006446:	d00b      	beq.n	8006460 <__pow5mult+0x90>
 8006448:	6820      	ldr	r0, [r4, #0]
 800644a:	b938      	cbnz	r0, 800645c <__pow5mult+0x8c>
 800644c:	4622      	mov	r2, r4
 800644e:	4621      	mov	r1, r4
 8006450:	4630      	mov	r0, r6
 8006452:	f7ff ff27 	bl	80062a4 <__multiply>
 8006456:	6020      	str	r0, [r4, #0]
 8006458:	f8c0 8000 	str.w	r8, [r0]
 800645c:	4604      	mov	r4, r0
 800645e:	e7e4      	b.n	800642a <__pow5mult+0x5a>
 8006460:	4638      	mov	r0, r7
 8006462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006466:	bf00      	nop
 8006468:	08006d98 	.word	0x08006d98

0800646c <__lshift>:
 800646c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006470:	460c      	mov	r4, r1
 8006472:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006476:	6923      	ldr	r3, [r4, #16]
 8006478:	6849      	ldr	r1, [r1, #4]
 800647a:	eb0a 0903 	add.w	r9, sl, r3
 800647e:	68a3      	ldr	r3, [r4, #8]
 8006480:	4607      	mov	r7, r0
 8006482:	4616      	mov	r6, r2
 8006484:	f109 0501 	add.w	r5, r9, #1
 8006488:	42ab      	cmp	r3, r5
 800648a:	db32      	blt.n	80064f2 <__lshift+0x86>
 800648c:	4638      	mov	r0, r7
 800648e:	f7ff fe2c 	bl	80060ea <_Balloc>
 8006492:	2300      	movs	r3, #0
 8006494:	4680      	mov	r8, r0
 8006496:	f100 0114 	add.w	r1, r0, #20
 800649a:	461a      	mov	r2, r3
 800649c:	4553      	cmp	r3, sl
 800649e:	db2b      	blt.n	80064f8 <__lshift+0x8c>
 80064a0:	6920      	ldr	r0, [r4, #16]
 80064a2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064a6:	f104 0314 	add.w	r3, r4, #20
 80064aa:	f016 021f 	ands.w	r2, r6, #31
 80064ae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064b2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064b6:	d025      	beq.n	8006504 <__lshift+0x98>
 80064b8:	f1c2 0e20 	rsb	lr, r2, #32
 80064bc:	2000      	movs	r0, #0
 80064be:	681e      	ldr	r6, [r3, #0]
 80064c0:	468a      	mov	sl, r1
 80064c2:	4096      	lsls	r6, r2
 80064c4:	4330      	orrs	r0, r6
 80064c6:	f84a 0b04 	str.w	r0, [sl], #4
 80064ca:	f853 0b04 	ldr.w	r0, [r3], #4
 80064ce:	459c      	cmp	ip, r3
 80064d0:	fa20 f00e 	lsr.w	r0, r0, lr
 80064d4:	d814      	bhi.n	8006500 <__lshift+0x94>
 80064d6:	6048      	str	r0, [r1, #4]
 80064d8:	b108      	cbz	r0, 80064de <__lshift+0x72>
 80064da:	f109 0502 	add.w	r5, r9, #2
 80064de:	3d01      	subs	r5, #1
 80064e0:	4638      	mov	r0, r7
 80064e2:	f8c8 5010 	str.w	r5, [r8, #16]
 80064e6:	4621      	mov	r1, r4
 80064e8:	f7ff fe33 	bl	8006152 <_Bfree>
 80064ec:	4640      	mov	r0, r8
 80064ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f2:	3101      	adds	r1, #1
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	e7c7      	b.n	8006488 <__lshift+0x1c>
 80064f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80064fc:	3301      	adds	r3, #1
 80064fe:	e7cd      	b.n	800649c <__lshift+0x30>
 8006500:	4651      	mov	r1, sl
 8006502:	e7dc      	b.n	80064be <__lshift+0x52>
 8006504:	3904      	subs	r1, #4
 8006506:	f853 2b04 	ldr.w	r2, [r3], #4
 800650a:	f841 2f04 	str.w	r2, [r1, #4]!
 800650e:	459c      	cmp	ip, r3
 8006510:	d8f9      	bhi.n	8006506 <__lshift+0x9a>
 8006512:	e7e4      	b.n	80064de <__lshift+0x72>

08006514 <__mcmp>:
 8006514:	6903      	ldr	r3, [r0, #16]
 8006516:	690a      	ldr	r2, [r1, #16]
 8006518:	1a9b      	subs	r3, r3, r2
 800651a:	b530      	push	{r4, r5, lr}
 800651c:	d10c      	bne.n	8006538 <__mcmp+0x24>
 800651e:	0092      	lsls	r2, r2, #2
 8006520:	3014      	adds	r0, #20
 8006522:	3114      	adds	r1, #20
 8006524:	1884      	adds	r4, r0, r2
 8006526:	4411      	add	r1, r2
 8006528:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800652c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006530:	4295      	cmp	r5, r2
 8006532:	d003      	beq.n	800653c <__mcmp+0x28>
 8006534:	d305      	bcc.n	8006542 <__mcmp+0x2e>
 8006536:	2301      	movs	r3, #1
 8006538:	4618      	mov	r0, r3
 800653a:	bd30      	pop	{r4, r5, pc}
 800653c:	42a0      	cmp	r0, r4
 800653e:	d3f3      	bcc.n	8006528 <__mcmp+0x14>
 8006540:	e7fa      	b.n	8006538 <__mcmp+0x24>
 8006542:	f04f 33ff 	mov.w	r3, #4294967295
 8006546:	e7f7      	b.n	8006538 <__mcmp+0x24>

08006548 <__mdiff>:
 8006548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800654c:	460d      	mov	r5, r1
 800654e:	4607      	mov	r7, r0
 8006550:	4611      	mov	r1, r2
 8006552:	4628      	mov	r0, r5
 8006554:	4614      	mov	r4, r2
 8006556:	f7ff ffdd 	bl	8006514 <__mcmp>
 800655a:	1e06      	subs	r6, r0, #0
 800655c:	d108      	bne.n	8006570 <__mdiff+0x28>
 800655e:	4631      	mov	r1, r6
 8006560:	4638      	mov	r0, r7
 8006562:	f7ff fdc2 	bl	80060ea <_Balloc>
 8006566:	2301      	movs	r3, #1
 8006568:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800656c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006570:	bfa4      	itt	ge
 8006572:	4623      	movge	r3, r4
 8006574:	462c      	movge	r4, r5
 8006576:	4638      	mov	r0, r7
 8006578:	6861      	ldr	r1, [r4, #4]
 800657a:	bfa6      	itte	ge
 800657c:	461d      	movge	r5, r3
 800657e:	2600      	movge	r6, #0
 8006580:	2601      	movlt	r6, #1
 8006582:	f7ff fdb2 	bl	80060ea <_Balloc>
 8006586:	692b      	ldr	r3, [r5, #16]
 8006588:	60c6      	str	r6, [r0, #12]
 800658a:	6926      	ldr	r6, [r4, #16]
 800658c:	f105 0914 	add.w	r9, r5, #20
 8006590:	f104 0214 	add.w	r2, r4, #20
 8006594:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006598:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800659c:	f100 0514 	add.w	r5, r0, #20
 80065a0:	f04f 0e00 	mov.w	lr, #0
 80065a4:	f852 ab04 	ldr.w	sl, [r2], #4
 80065a8:	f859 4b04 	ldr.w	r4, [r9], #4
 80065ac:	fa1e f18a 	uxtah	r1, lr, sl
 80065b0:	b2a3      	uxth	r3, r4
 80065b2:	1ac9      	subs	r1, r1, r3
 80065b4:	0c23      	lsrs	r3, r4, #16
 80065b6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80065ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80065be:	b289      	uxth	r1, r1
 80065c0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80065c4:	45c8      	cmp	r8, r9
 80065c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80065ca:	4694      	mov	ip, r2
 80065cc:	f845 3b04 	str.w	r3, [r5], #4
 80065d0:	d8e8      	bhi.n	80065a4 <__mdiff+0x5c>
 80065d2:	45bc      	cmp	ip, r7
 80065d4:	d304      	bcc.n	80065e0 <__mdiff+0x98>
 80065d6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80065da:	b183      	cbz	r3, 80065fe <__mdiff+0xb6>
 80065dc:	6106      	str	r6, [r0, #16]
 80065de:	e7c5      	b.n	800656c <__mdiff+0x24>
 80065e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80065e4:	fa1e f381 	uxtah	r3, lr, r1
 80065e8:	141a      	asrs	r2, r3, #16
 80065ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065f4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80065f8:	f845 3b04 	str.w	r3, [r5], #4
 80065fc:	e7e9      	b.n	80065d2 <__mdiff+0x8a>
 80065fe:	3e01      	subs	r6, #1
 8006600:	e7e9      	b.n	80065d6 <__mdiff+0x8e>

08006602 <__d2b>:
 8006602:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006606:	460e      	mov	r6, r1
 8006608:	2101      	movs	r1, #1
 800660a:	ec59 8b10 	vmov	r8, r9, d0
 800660e:	4615      	mov	r5, r2
 8006610:	f7ff fd6b 	bl	80060ea <_Balloc>
 8006614:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006618:	4607      	mov	r7, r0
 800661a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800661e:	bb34      	cbnz	r4, 800666e <__d2b+0x6c>
 8006620:	9301      	str	r3, [sp, #4]
 8006622:	f1b8 0300 	subs.w	r3, r8, #0
 8006626:	d027      	beq.n	8006678 <__d2b+0x76>
 8006628:	a802      	add	r0, sp, #8
 800662a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800662e:	f7ff fe01 	bl	8006234 <__lo0bits>
 8006632:	9900      	ldr	r1, [sp, #0]
 8006634:	b1f0      	cbz	r0, 8006674 <__d2b+0x72>
 8006636:	9a01      	ldr	r2, [sp, #4]
 8006638:	f1c0 0320 	rsb	r3, r0, #32
 800663c:	fa02 f303 	lsl.w	r3, r2, r3
 8006640:	430b      	orrs	r3, r1
 8006642:	40c2      	lsrs	r2, r0
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	9201      	str	r2, [sp, #4]
 8006648:	9b01      	ldr	r3, [sp, #4]
 800664a:	61bb      	str	r3, [r7, #24]
 800664c:	2b00      	cmp	r3, #0
 800664e:	bf14      	ite	ne
 8006650:	2102      	movne	r1, #2
 8006652:	2101      	moveq	r1, #1
 8006654:	6139      	str	r1, [r7, #16]
 8006656:	b1c4      	cbz	r4, 800668a <__d2b+0x88>
 8006658:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800665c:	4404      	add	r4, r0
 800665e:	6034      	str	r4, [r6, #0]
 8006660:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006664:	6028      	str	r0, [r5, #0]
 8006666:	4638      	mov	r0, r7
 8006668:	b003      	add	sp, #12
 800666a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800666e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006672:	e7d5      	b.n	8006620 <__d2b+0x1e>
 8006674:	6179      	str	r1, [r7, #20]
 8006676:	e7e7      	b.n	8006648 <__d2b+0x46>
 8006678:	a801      	add	r0, sp, #4
 800667a:	f7ff fddb 	bl	8006234 <__lo0bits>
 800667e:	9b01      	ldr	r3, [sp, #4]
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	2101      	movs	r1, #1
 8006684:	6139      	str	r1, [r7, #16]
 8006686:	3020      	adds	r0, #32
 8006688:	e7e5      	b.n	8006656 <__d2b+0x54>
 800668a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800668e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006692:	6030      	str	r0, [r6, #0]
 8006694:	6918      	ldr	r0, [r3, #16]
 8006696:	f7ff fdae 	bl	80061f6 <__hi0bits>
 800669a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800669e:	e7e1      	b.n	8006664 <__d2b+0x62>

080066a0 <_calloc_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	fb02 f401 	mul.w	r4, r2, r1
 80066a6:	4621      	mov	r1, r4
 80066a8:	f000 f856 	bl	8006758 <_malloc_r>
 80066ac:	4605      	mov	r5, r0
 80066ae:	b118      	cbz	r0, 80066b8 <_calloc_r+0x18>
 80066b0:	4622      	mov	r2, r4
 80066b2:	2100      	movs	r1, #0
 80066b4:	f7fe fa2e 	bl	8004b14 <memset>
 80066b8:	4628      	mov	r0, r5
 80066ba:	bd38      	pop	{r3, r4, r5, pc}

080066bc <_free_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	4605      	mov	r5, r0
 80066c0:	2900      	cmp	r1, #0
 80066c2:	d045      	beq.n	8006750 <_free_r+0x94>
 80066c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066c8:	1f0c      	subs	r4, r1, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bfb8      	it	lt
 80066ce:	18e4      	addlt	r4, r4, r3
 80066d0:	f000 fa29 	bl	8006b26 <__malloc_lock>
 80066d4:	4a1f      	ldr	r2, [pc, #124]	; (8006754 <_free_r+0x98>)
 80066d6:	6813      	ldr	r3, [r2, #0]
 80066d8:	4610      	mov	r0, r2
 80066da:	b933      	cbnz	r3, 80066ea <_free_r+0x2e>
 80066dc:	6063      	str	r3, [r4, #4]
 80066de:	6014      	str	r4, [r2, #0]
 80066e0:	4628      	mov	r0, r5
 80066e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066e6:	f000 ba1f 	b.w	8006b28 <__malloc_unlock>
 80066ea:	42a3      	cmp	r3, r4
 80066ec:	d90c      	bls.n	8006708 <_free_r+0x4c>
 80066ee:	6821      	ldr	r1, [r4, #0]
 80066f0:	1862      	adds	r2, r4, r1
 80066f2:	4293      	cmp	r3, r2
 80066f4:	bf04      	itt	eq
 80066f6:	681a      	ldreq	r2, [r3, #0]
 80066f8:	685b      	ldreq	r3, [r3, #4]
 80066fa:	6063      	str	r3, [r4, #4]
 80066fc:	bf04      	itt	eq
 80066fe:	1852      	addeq	r2, r2, r1
 8006700:	6022      	streq	r2, [r4, #0]
 8006702:	6004      	str	r4, [r0, #0]
 8006704:	e7ec      	b.n	80066e0 <_free_r+0x24>
 8006706:	4613      	mov	r3, r2
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	b10a      	cbz	r2, 8006710 <_free_r+0x54>
 800670c:	42a2      	cmp	r2, r4
 800670e:	d9fa      	bls.n	8006706 <_free_r+0x4a>
 8006710:	6819      	ldr	r1, [r3, #0]
 8006712:	1858      	adds	r0, r3, r1
 8006714:	42a0      	cmp	r0, r4
 8006716:	d10b      	bne.n	8006730 <_free_r+0x74>
 8006718:	6820      	ldr	r0, [r4, #0]
 800671a:	4401      	add	r1, r0
 800671c:	1858      	adds	r0, r3, r1
 800671e:	4282      	cmp	r2, r0
 8006720:	6019      	str	r1, [r3, #0]
 8006722:	d1dd      	bne.n	80066e0 <_free_r+0x24>
 8006724:	6810      	ldr	r0, [r2, #0]
 8006726:	6852      	ldr	r2, [r2, #4]
 8006728:	605a      	str	r2, [r3, #4]
 800672a:	4401      	add	r1, r0
 800672c:	6019      	str	r1, [r3, #0]
 800672e:	e7d7      	b.n	80066e0 <_free_r+0x24>
 8006730:	d902      	bls.n	8006738 <_free_r+0x7c>
 8006732:	230c      	movs	r3, #12
 8006734:	602b      	str	r3, [r5, #0]
 8006736:	e7d3      	b.n	80066e0 <_free_r+0x24>
 8006738:	6820      	ldr	r0, [r4, #0]
 800673a:	1821      	adds	r1, r4, r0
 800673c:	428a      	cmp	r2, r1
 800673e:	bf04      	itt	eq
 8006740:	6811      	ldreq	r1, [r2, #0]
 8006742:	6852      	ldreq	r2, [r2, #4]
 8006744:	6062      	str	r2, [r4, #4]
 8006746:	bf04      	itt	eq
 8006748:	1809      	addeq	r1, r1, r0
 800674a:	6021      	streq	r1, [r4, #0]
 800674c:	605c      	str	r4, [r3, #4]
 800674e:	e7c7      	b.n	80066e0 <_free_r+0x24>
 8006750:	bd38      	pop	{r3, r4, r5, pc}
 8006752:	bf00      	nop
 8006754:	20000204 	.word	0x20000204

08006758 <_malloc_r>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	1ccd      	adds	r5, r1, #3
 800675c:	f025 0503 	bic.w	r5, r5, #3
 8006760:	3508      	adds	r5, #8
 8006762:	2d0c      	cmp	r5, #12
 8006764:	bf38      	it	cc
 8006766:	250c      	movcc	r5, #12
 8006768:	2d00      	cmp	r5, #0
 800676a:	4606      	mov	r6, r0
 800676c:	db01      	blt.n	8006772 <_malloc_r+0x1a>
 800676e:	42a9      	cmp	r1, r5
 8006770:	d903      	bls.n	800677a <_malloc_r+0x22>
 8006772:	230c      	movs	r3, #12
 8006774:	6033      	str	r3, [r6, #0]
 8006776:	2000      	movs	r0, #0
 8006778:	bd70      	pop	{r4, r5, r6, pc}
 800677a:	f000 f9d4 	bl	8006b26 <__malloc_lock>
 800677e:	4a21      	ldr	r2, [pc, #132]	; (8006804 <_malloc_r+0xac>)
 8006780:	6814      	ldr	r4, [r2, #0]
 8006782:	4621      	mov	r1, r4
 8006784:	b991      	cbnz	r1, 80067ac <_malloc_r+0x54>
 8006786:	4c20      	ldr	r4, [pc, #128]	; (8006808 <_malloc_r+0xb0>)
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	b91b      	cbnz	r3, 8006794 <_malloc_r+0x3c>
 800678c:	4630      	mov	r0, r6
 800678e:	f000 f98f 	bl	8006ab0 <_sbrk_r>
 8006792:	6020      	str	r0, [r4, #0]
 8006794:	4629      	mov	r1, r5
 8006796:	4630      	mov	r0, r6
 8006798:	f000 f98a 	bl	8006ab0 <_sbrk_r>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d124      	bne.n	80067ea <_malloc_r+0x92>
 80067a0:	230c      	movs	r3, #12
 80067a2:	6033      	str	r3, [r6, #0]
 80067a4:	4630      	mov	r0, r6
 80067a6:	f000 f9bf 	bl	8006b28 <__malloc_unlock>
 80067aa:	e7e4      	b.n	8006776 <_malloc_r+0x1e>
 80067ac:	680b      	ldr	r3, [r1, #0]
 80067ae:	1b5b      	subs	r3, r3, r5
 80067b0:	d418      	bmi.n	80067e4 <_malloc_r+0x8c>
 80067b2:	2b0b      	cmp	r3, #11
 80067b4:	d90f      	bls.n	80067d6 <_malloc_r+0x7e>
 80067b6:	600b      	str	r3, [r1, #0]
 80067b8:	50cd      	str	r5, [r1, r3]
 80067ba:	18cc      	adds	r4, r1, r3
 80067bc:	4630      	mov	r0, r6
 80067be:	f000 f9b3 	bl	8006b28 <__malloc_unlock>
 80067c2:	f104 000b 	add.w	r0, r4, #11
 80067c6:	1d23      	adds	r3, r4, #4
 80067c8:	f020 0007 	bic.w	r0, r0, #7
 80067cc:	1ac3      	subs	r3, r0, r3
 80067ce:	d0d3      	beq.n	8006778 <_malloc_r+0x20>
 80067d0:	425a      	negs	r2, r3
 80067d2:	50e2      	str	r2, [r4, r3]
 80067d4:	e7d0      	b.n	8006778 <_malloc_r+0x20>
 80067d6:	428c      	cmp	r4, r1
 80067d8:	684b      	ldr	r3, [r1, #4]
 80067da:	bf16      	itet	ne
 80067dc:	6063      	strne	r3, [r4, #4]
 80067de:	6013      	streq	r3, [r2, #0]
 80067e0:	460c      	movne	r4, r1
 80067e2:	e7eb      	b.n	80067bc <_malloc_r+0x64>
 80067e4:	460c      	mov	r4, r1
 80067e6:	6849      	ldr	r1, [r1, #4]
 80067e8:	e7cc      	b.n	8006784 <_malloc_r+0x2c>
 80067ea:	1cc4      	adds	r4, r0, #3
 80067ec:	f024 0403 	bic.w	r4, r4, #3
 80067f0:	42a0      	cmp	r0, r4
 80067f2:	d005      	beq.n	8006800 <_malloc_r+0xa8>
 80067f4:	1a21      	subs	r1, r4, r0
 80067f6:	4630      	mov	r0, r6
 80067f8:	f000 f95a 	bl	8006ab0 <_sbrk_r>
 80067fc:	3001      	adds	r0, #1
 80067fe:	d0cf      	beq.n	80067a0 <_malloc_r+0x48>
 8006800:	6025      	str	r5, [r4, #0]
 8006802:	e7db      	b.n	80067bc <_malloc_r+0x64>
 8006804:	20000204 	.word	0x20000204
 8006808:	20000208 	.word	0x20000208

0800680c <__ssputs_r>:
 800680c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006810:	688e      	ldr	r6, [r1, #8]
 8006812:	429e      	cmp	r6, r3
 8006814:	4682      	mov	sl, r0
 8006816:	460c      	mov	r4, r1
 8006818:	4690      	mov	r8, r2
 800681a:	4699      	mov	r9, r3
 800681c:	d837      	bhi.n	800688e <__ssputs_r+0x82>
 800681e:	898a      	ldrh	r2, [r1, #12]
 8006820:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006824:	d031      	beq.n	800688a <__ssputs_r+0x7e>
 8006826:	6825      	ldr	r5, [r4, #0]
 8006828:	6909      	ldr	r1, [r1, #16]
 800682a:	1a6f      	subs	r7, r5, r1
 800682c:	6965      	ldr	r5, [r4, #20]
 800682e:	2302      	movs	r3, #2
 8006830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006834:	fb95 f5f3 	sdiv	r5, r5, r3
 8006838:	f109 0301 	add.w	r3, r9, #1
 800683c:	443b      	add	r3, r7
 800683e:	429d      	cmp	r5, r3
 8006840:	bf38      	it	cc
 8006842:	461d      	movcc	r5, r3
 8006844:	0553      	lsls	r3, r2, #21
 8006846:	d530      	bpl.n	80068aa <__ssputs_r+0x9e>
 8006848:	4629      	mov	r1, r5
 800684a:	f7ff ff85 	bl	8006758 <_malloc_r>
 800684e:	4606      	mov	r6, r0
 8006850:	b950      	cbnz	r0, 8006868 <__ssputs_r+0x5c>
 8006852:	230c      	movs	r3, #12
 8006854:	f8ca 3000 	str.w	r3, [sl]
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800685e:	81a3      	strh	r3, [r4, #12]
 8006860:	f04f 30ff 	mov.w	r0, #4294967295
 8006864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006868:	463a      	mov	r2, r7
 800686a:	6921      	ldr	r1, [r4, #16]
 800686c:	f7ff fc32 	bl	80060d4 <memcpy>
 8006870:	89a3      	ldrh	r3, [r4, #12]
 8006872:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687a:	81a3      	strh	r3, [r4, #12]
 800687c:	6126      	str	r6, [r4, #16]
 800687e:	6165      	str	r5, [r4, #20]
 8006880:	443e      	add	r6, r7
 8006882:	1bed      	subs	r5, r5, r7
 8006884:	6026      	str	r6, [r4, #0]
 8006886:	60a5      	str	r5, [r4, #8]
 8006888:	464e      	mov	r6, r9
 800688a:	454e      	cmp	r6, r9
 800688c:	d900      	bls.n	8006890 <__ssputs_r+0x84>
 800688e:	464e      	mov	r6, r9
 8006890:	4632      	mov	r2, r6
 8006892:	4641      	mov	r1, r8
 8006894:	6820      	ldr	r0, [r4, #0]
 8006896:	f000 f92d 	bl	8006af4 <memmove>
 800689a:	68a3      	ldr	r3, [r4, #8]
 800689c:	1b9b      	subs	r3, r3, r6
 800689e:	60a3      	str	r3, [r4, #8]
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	441e      	add	r6, r3
 80068a4:	6026      	str	r6, [r4, #0]
 80068a6:	2000      	movs	r0, #0
 80068a8:	e7dc      	b.n	8006864 <__ssputs_r+0x58>
 80068aa:	462a      	mov	r2, r5
 80068ac:	f000 f93d 	bl	8006b2a <_realloc_r>
 80068b0:	4606      	mov	r6, r0
 80068b2:	2800      	cmp	r0, #0
 80068b4:	d1e2      	bne.n	800687c <__ssputs_r+0x70>
 80068b6:	6921      	ldr	r1, [r4, #16]
 80068b8:	4650      	mov	r0, sl
 80068ba:	f7ff feff 	bl	80066bc <_free_r>
 80068be:	e7c8      	b.n	8006852 <__ssputs_r+0x46>

080068c0 <_svfiprintf_r>:
 80068c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c4:	461d      	mov	r5, r3
 80068c6:	898b      	ldrh	r3, [r1, #12]
 80068c8:	061f      	lsls	r7, r3, #24
 80068ca:	b09d      	sub	sp, #116	; 0x74
 80068cc:	4680      	mov	r8, r0
 80068ce:	460c      	mov	r4, r1
 80068d0:	4616      	mov	r6, r2
 80068d2:	d50f      	bpl.n	80068f4 <_svfiprintf_r+0x34>
 80068d4:	690b      	ldr	r3, [r1, #16]
 80068d6:	b96b      	cbnz	r3, 80068f4 <_svfiprintf_r+0x34>
 80068d8:	2140      	movs	r1, #64	; 0x40
 80068da:	f7ff ff3d 	bl	8006758 <_malloc_r>
 80068de:	6020      	str	r0, [r4, #0]
 80068e0:	6120      	str	r0, [r4, #16]
 80068e2:	b928      	cbnz	r0, 80068f0 <_svfiprintf_r+0x30>
 80068e4:	230c      	movs	r3, #12
 80068e6:	f8c8 3000 	str.w	r3, [r8]
 80068ea:	f04f 30ff 	mov.w	r0, #4294967295
 80068ee:	e0c8      	b.n	8006a82 <_svfiprintf_r+0x1c2>
 80068f0:	2340      	movs	r3, #64	; 0x40
 80068f2:	6163      	str	r3, [r4, #20]
 80068f4:	2300      	movs	r3, #0
 80068f6:	9309      	str	r3, [sp, #36]	; 0x24
 80068f8:	2320      	movs	r3, #32
 80068fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068fe:	2330      	movs	r3, #48	; 0x30
 8006900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006904:	9503      	str	r5, [sp, #12]
 8006906:	f04f 0b01 	mov.w	fp, #1
 800690a:	4637      	mov	r7, r6
 800690c:	463d      	mov	r5, r7
 800690e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006912:	b10b      	cbz	r3, 8006918 <_svfiprintf_r+0x58>
 8006914:	2b25      	cmp	r3, #37	; 0x25
 8006916:	d13e      	bne.n	8006996 <_svfiprintf_r+0xd6>
 8006918:	ebb7 0a06 	subs.w	sl, r7, r6
 800691c:	d00b      	beq.n	8006936 <_svfiprintf_r+0x76>
 800691e:	4653      	mov	r3, sl
 8006920:	4632      	mov	r2, r6
 8006922:	4621      	mov	r1, r4
 8006924:	4640      	mov	r0, r8
 8006926:	f7ff ff71 	bl	800680c <__ssputs_r>
 800692a:	3001      	adds	r0, #1
 800692c:	f000 80a4 	beq.w	8006a78 <_svfiprintf_r+0x1b8>
 8006930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006932:	4453      	add	r3, sl
 8006934:	9309      	str	r3, [sp, #36]	; 0x24
 8006936:	783b      	ldrb	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 809d 	beq.w	8006a78 <_svfiprintf_r+0x1b8>
 800693e:	2300      	movs	r3, #0
 8006940:	f04f 32ff 	mov.w	r2, #4294967295
 8006944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006948:	9304      	str	r3, [sp, #16]
 800694a:	9307      	str	r3, [sp, #28]
 800694c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006950:	931a      	str	r3, [sp, #104]	; 0x68
 8006952:	462f      	mov	r7, r5
 8006954:	2205      	movs	r2, #5
 8006956:	f817 1b01 	ldrb.w	r1, [r7], #1
 800695a:	4850      	ldr	r0, [pc, #320]	; (8006a9c <_svfiprintf_r+0x1dc>)
 800695c:	f7f9 fc40 	bl	80001e0 <memchr>
 8006960:	9b04      	ldr	r3, [sp, #16]
 8006962:	b9d0      	cbnz	r0, 800699a <_svfiprintf_r+0xda>
 8006964:	06d9      	lsls	r1, r3, #27
 8006966:	bf44      	itt	mi
 8006968:	2220      	movmi	r2, #32
 800696a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800696e:	071a      	lsls	r2, r3, #28
 8006970:	bf44      	itt	mi
 8006972:	222b      	movmi	r2, #43	; 0x2b
 8006974:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006978:	782a      	ldrb	r2, [r5, #0]
 800697a:	2a2a      	cmp	r2, #42	; 0x2a
 800697c:	d015      	beq.n	80069aa <_svfiprintf_r+0xea>
 800697e:	9a07      	ldr	r2, [sp, #28]
 8006980:	462f      	mov	r7, r5
 8006982:	2000      	movs	r0, #0
 8006984:	250a      	movs	r5, #10
 8006986:	4639      	mov	r1, r7
 8006988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800698c:	3b30      	subs	r3, #48	; 0x30
 800698e:	2b09      	cmp	r3, #9
 8006990:	d94d      	bls.n	8006a2e <_svfiprintf_r+0x16e>
 8006992:	b1b8      	cbz	r0, 80069c4 <_svfiprintf_r+0x104>
 8006994:	e00f      	b.n	80069b6 <_svfiprintf_r+0xf6>
 8006996:	462f      	mov	r7, r5
 8006998:	e7b8      	b.n	800690c <_svfiprintf_r+0x4c>
 800699a:	4a40      	ldr	r2, [pc, #256]	; (8006a9c <_svfiprintf_r+0x1dc>)
 800699c:	1a80      	subs	r0, r0, r2
 800699e:	fa0b f000 	lsl.w	r0, fp, r0
 80069a2:	4318      	orrs	r0, r3
 80069a4:	9004      	str	r0, [sp, #16]
 80069a6:	463d      	mov	r5, r7
 80069a8:	e7d3      	b.n	8006952 <_svfiprintf_r+0x92>
 80069aa:	9a03      	ldr	r2, [sp, #12]
 80069ac:	1d11      	adds	r1, r2, #4
 80069ae:	6812      	ldr	r2, [r2, #0]
 80069b0:	9103      	str	r1, [sp, #12]
 80069b2:	2a00      	cmp	r2, #0
 80069b4:	db01      	blt.n	80069ba <_svfiprintf_r+0xfa>
 80069b6:	9207      	str	r2, [sp, #28]
 80069b8:	e004      	b.n	80069c4 <_svfiprintf_r+0x104>
 80069ba:	4252      	negs	r2, r2
 80069bc:	f043 0302 	orr.w	r3, r3, #2
 80069c0:	9207      	str	r2, [sp, #28]
 80069c2:	9304      	str	r3, [sp, #16]
 80069c4:	783b      	ldrb	r3, [r7, #0]
 80069c6:	2b2e      	cmp	r3, #46	; 0x2e
 80069c8:	d10c      	bne.n	80069e4 <_svfiprintf_r+0x124>
 80069ca:	787b      	ldrb	r3, [r7, #1]
 80069cc:	2b2a      	cmp	r3, #42	; 0x2a
 80069ce:	d133      	bne.n	8006a38 <_svfiprintf_r+0x178>
 80069d0:	9b03      	ldr	r3, [sp, #12]
 80069d2:	1d1a      	adds	r2, r3, #4
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	9203      	str	r2, [sp, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	bfb8      	it	lt
 80069dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80069e0:	3702      	adds	r7, #2
 80069e2:	9305      	str	r3, [sp, #20]
 80069e4:	4d2e      	ldr	r5, [pc, #184]	; (8006aa0 <_svfiprintf_r+0x1e0>)
 80069e6:	7839      	ldrb	r1, [r7, #0]
 80069e8:	2203      	movs	r2, #3
 80069ea:	4628      	mov	r0, r5
 80069ec:	f7f9 fbf8 	bl	80001e0 <memchr>
 80069f0:	b138      	cbz	r0, 8006a02 <_svfiprintf_r+0x142>
 80069f2:	2340      	movs	r3, #64	; 0x40
 80069f4:	1b40      	subs	r0, r0, r5
 80069f6:	fa03 f000 	lsl.w	r0, r3, r0
 80069fa:	9b04      	ldr	r3, [sp, #16]
 80069fc:	4303      	orrs	r3, r0
 80069fe:	3701      	adds	r7, #1
 8006a00:	9304      	str	r3, [sp, #16]
 8006a02:	7839      	ldrb	r1, [r7, #0]
 8006a04:	4827      	ldr	r0, [pc, #156]	; (8006aa4 <_svfiprintf_r+0x1e4>)
 8006a06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a0a:	2206      	movs	r2, #6
 8006a0c:	1c7e      	adds	r6, r7, #1
 8006a0e:	f7f9 fbe7 	bl	80001e0 <memchr>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d038      	beq.n	8006a88 <_svfiprintf_r+0x1c8>
 8006a16:	4b24      	ldr	r3, [pc, #144]	; (8006aa8 <_svfiprintf_r+0x1e8>)
 8006a18:	bb13      	cbnz	r3, 8006a60 <_svfiprintf_r+0x1a0>
 8006a1a:	9b03      	ldr	r3, [sp, #12]
 8006a1c:	3307      	adds	r3, #7
 8006a1e:	f023 0307 	bic.w	r3, r3, #7
 8006a22:	3308      	adds	r3, #8
 8006a24:	9303      	str	r3, [sp, #12]
 8006a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a28:	444b      	add	r3, r9
 8006a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a2c:	e76d      	b.n	800690a <_svfiprintf_r+0x4a>
 8006a2e:	fb05 3202 	mla	r2, r5, r2, r3
 8006a32:	2001      	movs	r0, #1
 8006a34:	460f      	mov	r7, r1
 8006a36:	e7a6      	b.n	8006986 <_svfiprintf_r+0xc6>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	3701      	adds	r7, #1
 8006a3c:	9305      	str	r3, [sp, #20]
 8006a3e:	4619      	mov	r1, r3
 8006a40:	250a      	movs	r5, #10
 8006a42:	4638      	mov	r0, r7
 8006a44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a48:	3a30      	subs	r2, #48	; 0x30
 8006a4a:	2a09      	cmp	r2, #9
 8006a4c:	d903      	bls.n	8006a56 <_svfiprintf_r+0x196>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0c8      	beq.n	80069e4 <_svfiprintf_r+0x124>
 8006a52:	9105      	str	r1, [sp, #20]
 8006a54:	e7c6      	b.n	80069e4 <_svfiprintf_r+0x124>
 8006a56:	fb05 2101 	mla	r1, r5, r1, r2
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	e7f0      	b.n	8006a42 <_svfiprintf_r+0x182>
 8006a60:	ab03      	add	r3, sp, #12
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	4622      	mov	r2, r4
 8006a66:	4b11      	ldr	r3, [pc, #68]	; (8006aac <_svfiprintf_r+0x1ec>)
 8006a68:	a904      	add	r1, sp, #16
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	f7fe f8ee 	bl	8004c4c <_printf_float>
 8006a70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006a74:	4681      	mov	r9, r0
 8006a76:	d1d6      	bne.n	8006a26 <_svfiprintf_r+0x166>
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	065b      	lsls	r3, r3, #25
 8006a7c:	f53f af35 	bmi.w	80068ea <_svfiprintf_r+0x2a>
 8006a80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a82:	b01d      	add	sp, #116	; 0x74
 8006a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a88:	ab03      	add	r3, sp, #12
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	4b07      	ldr	r3, [pc, #28]	; (8006aac <_svfiprintf_r+0x1ec>)
 8006a90:	a904      	add	r1, sp, #16
 8006a92:	4640      	mov	r0, r8
 8006a94:	f7fe fb90 	bl	80051b8 <_printf_i>
 8006a98:	e7ea      	b.n	8006a70 <_svfiprintf_r+0x1b0>
 8006a9a:	bf00      	nop
 8006a9c:	08006da4 	.word	0x08006da4
 8006aa0:	08006daa 	.word	0x08006daa
 8006aa4:	08006dae 	.word	0x08006dae
 8006aa8:	08004c4d 	.word	0x08004c4d
 8006aac:	0800680d 	.word	0x0800680d

08006ab0 <_sbrk_r>:
 8006ab0:	b538      	push	{r3, r4, r5, lr}
 8006ab2:	4c06      	ldr	r4, [pc, #24]	; (8006acc <_sbrk_r+0x1c>)
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	4608      	mov	r0, r1
 8006aba:	6023      	str	r3, [r4, #0]
 8006abc:	f7fa fde4 	bl	8001688 <_sbrk>
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	d102      	bne.n	8006aca <_sbrk_r+0x1a>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	b103      	cbz	r3, 8006aca <_sbrk_r+0x1a>
 8006ac8:	602b      	str	r3, [r5, #0]
 8006aca:	bd38      	pop	{r3, r4, r5, pc}
 8006acc:	200003a4 	.word	0x200003a4

08006ad0 <__ascii_mbtowc>:
 8006ad0:	b082      	sub	sp, #8
 8006ad2:	b901      	cbnz	r1, 8006ad6 <__ascii_mbtowc+0x6>
 8006ad4:	a901      	add	r1, sp, #4
 8006ad6:	b142      	cbz	r2, 8006aea <__ascii_mbtowc+0x1a>
 8006ad8:	b14b      	cbz	r3, 8006aee <__ascii_mbtowc+0x1e>
 8006ada:	7813      	ldrb	r3, [r2, #0]
 8006adc:	600b      	str	r3, [r1, #0]
 8006ade:	7812      	ldrb	r2, [r2, #0]
 8006ae0:	1c10      	adds	r0, r2, #0
 8006ae2:	bf18      	it	ne
 8006ae4:	2001      	movne	r0, #1
 8006ae6:	b002      	add	sp, #8
 8006ae8:	4770      	bx	lr
 8006aea:	4610      	mov	r0, r2
 8006aec:	e7fb      	b.n	8006ae6 <__ascii_mbtowc+0x16>
 8006aee:	f06f 0001 	mvn.w	r0, #1
 8006af2:	e7f8      	b.n	8006ae6 <__ascii_mbtowc+0x16>

08006af4 <memmove>:
 8006af4:	4288      	cmp	r0, r1
 8006af6:	b510      	push	{r4, lr}
 8006af8:	eb01 0302 	add.w	r3, r1, r2
 8006afc:	d807      	bhi.n	8006b0e <memmove+0x1a>
 8006afe:	1e42      	subs	r2, r0, #1
 8006b00:	4299      	cmp	r1, r3
 8006b02:	d00a      	beq.n	8006b1a <memmove+0x26>
 8006b04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b08:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b0c:	e7f8      	b.n	8006b00 <memmove+0xc>
 8006b0e:	4283      	cmp	r3, r0
 8006b10:	d9f5      	bls.n	8006afe <memmove+0xa>
 8006b12:	1881      	adds	r1, r0, r2
 8006b14:	1ad2      	subs	r2, r2, r3
 8006b16:	42d3      	cmn	r3, r2
 8006b18:	d100      	bne.n	8006b1c <memmove+0x28>
 8006b1a:	bd10      	pop	{r4, pc}
 8006b1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006b24:	e7f7      	b.n	8006b16 <memmove+0x22>

08006b26 <__malloc_lock>:
 8006b26:	4770      	bx	lr

08006b28 <__malloc_unlock>:
 8006b28:	4770      	bx	lr

08006b2a <_realloc_r>:
 8006b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2c:	4607      	mov	r7, r0
 8006b2e:	4614      	mov	r4, r2
 8006b30:	460e      	mov	r6, r1
 8006b32:	b921      	cbnz	r1, 8006b3e <_realloc_r+0x14>
 8006b34:	4611      	mov	r1, r2
 8006b36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b3a:	f7ff be0d 	b.w	8006758 <_malloc_r>
 8006b3e:	b922      	cbnz	r2, 8006b4a <_realloc_r+0x20>
 8006b40:	f7ff fdbc 	bl	80066bc <_free_r>
 8006b44:	4625      	mov	r5, r4
 8006b46:	4628      	mov	r0, r5
 8006b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b4a:	f000 f821 	bl	8006b90 <_malloc_usable_size_r>
 8006b4e:	42a0      	cmp	r0, r4
 8006b50:	d20f      	bcs.n	8006b72 <_realloc_r+0x48>
 8006b52:	4621      	mov	r1, r4
 8006b54:	4638      	mov	r0, r7
 8006b56:	f7ff fdff 	bl	8006758 <_malloc_r>
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d0f2      	beq.n	8006b46 <_realloc_r+0x1c>
 8006b60:	4631      	mov	r1, r6
 8006b62:	4622      	mov	r2, r4
 8006b64:	f7ff fab6 	bl	80060d4 <memcpy>
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	f7ff fda6 	bl	80066bc <_free_r>
 8006b70:	e7e9      	b.n	8006b46 <_realloc_r+0x1c>
 8006b72:	4635      	mov	r5, r6
 8006b74:	e7e7      	b.n	8006b46 <_realloc_r+0x1c>

08006b76 <__ascii_wctomb>:
 8006b76:	b149      	cbz	r1, 8006b8c <__ascii_wctomb+0x16>
 8006b78:	2aff      	cmp	r2, #255	; 0xff
 8006b7a:	bf85      	ittet	hi
 8006b7c:	238a      	movhi	r3, #138	; 0x8a
 8006b7e:	6003      	strhi	r3, [r0, #0]
 8006b80:	700a      	strbls	r2, [r1, #0]
 8006b82:	f04f 30ff 	movhi.w	r0, #4294967295
 8006b86:	bf98      	it	ls
 8006b88:	2001      	movls	r0, #1
 8006b8a:	4770      	bx	lr
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	4770      	bx	lr

08006b90 <_malloc_usable_size_r>:
 8006b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b94:	1f18      	subs	r0, r3, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	bfbc      	itt	lt
 8006b9a:	580b      	ldrlt	r3, [r1, r0]
 8006b9c:	18c0      	addlt	r0, r0, r3
 8006b9e:	4770      	bx	lr

08006ba0 <_init>:
 8006ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba2:	bf00      	nop
 8006ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba6:	bc08      	pop	{r3}
 8006ba8:	469e      	mov	lr, r3
 8006baa:	4770      	bx	lr

08006bac <_fini>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	bf00      	nop
 8006bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb2:	bc08      	pop	{r3}
 8006bb4:	469e      	mov	lr, r3
 8006bb6:	4770      	bx	lr
